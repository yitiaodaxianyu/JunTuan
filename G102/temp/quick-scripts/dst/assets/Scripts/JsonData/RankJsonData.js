
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/JsonData/RankJsonData.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c6db62QM2NI/ZgUwHoEz1rE', 'RankJsonData');
// Scripts/JsonData/RankJsonData.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RankJsonData = void 0;
exports.RankJsonData = ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Anguilla",
    "Antigua", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas",
    "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda",
    "Bhutan", "Bolivia", "Bonaire", "Bosniahercegovina", "Botswana", "Brazil", "Brunei", "Bulgaria",
    "Burkinafaso", "Burundi", "Cambodia(Kampuchea)", "Cameroon", "Canada", "Canary Islands", "Cape Verde",
    "Caymanislands", "CÃ´te d'Ivoire", "Central African Republ", "Chad", "Chile", "China", "Colombia", "Comoros",
    "Congo", "Congo, The Democratic", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curacao", "Cyprus",
    "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador",
    "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falklandislands",
    "Faroe Islands", "Fiji", "Finland", "France", "Frenchguiana", "Gabon", "Gambia", "Georgia", "Germany",
    "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey",
    "Guinea Republic", "Guinea-Bissau", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia",
    "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jersey Island", "Jordan", "Kazakhstan",
    "Kenya", "Kiribati", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia",
    "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, Republic Of",
    "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshallislands", "Martinique",
    "Mauritania", "Mauritius", "Mayotte", "Mexico", "Moldova Republic Of ", "Mongolia", "Montenegro",
    "Monteserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru Republic Of", "Nepal",
    "Netherlands", "Nevis", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue",
    "North Korea", "Norway", "Oman", "Pakistan", "Panama", "Papua New Guinea", "Paraguay", "Peru ",
    "Philippines", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion Island Of", "Romania",
    "Russian Federation", "Rwanda", "Saipan", "Samoa", "San Marino", "Sano Tome&Principe",
    "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia",
    "Slovenia", "Soloman Islands", "Somalia", "Somaliland Republic Of", "South Africa", "South Korea",
    "Spain", "Sri Lanka", "Ssamoa", "St. Barthelemy", "St.Eustatius", "St.Kitts", "St.Lucia",
    "St.Maarten", "St.Vincent", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syrian",
    "Tahiti", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tonga", "Trinidad & Tobago",
    "Tunisia", "Turkey", "Turks&Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates",
    "United Kingdom", "United States of America", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela",
    "Vietnam", "Virgin Islands(British", "Virgin Islands(U.S)", "Yemen", "Zambia", "Zimbabwe"];

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcSnNvbkRhdGFcXFJhbmtKc29uRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBVyxRQUFBLFlBQVksR0FBQyxDQUFDLGFBQWEsRUFBQyxTQUFTLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsVUFBVTtJQUV4RixTQUFTLEVBQUMsV0FBVyxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsV0FBVyxFQUFDLFNBQVMsRUFBQyxZQUFZLEVBQUMsU0FBUztJQUVwRixTQUFTLEVBQUMsWUFBWSxFQUFDLFVBQVUsRUFBQyxTQUFTLEVBQUMsU0FBUyxFQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsU0FBUztJQUVoRixRQUFRLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxtQkFBbUIsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBQyxVQUFVO0lBRXhGLGFBQWEsRUFBQyxTQUFTLEVBQUMscUJBQXFCLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxnQkFBZ0IsRUFBQyxZQUFZO0lBRS9GLGVBQWUsRUFBQyxnQkFBZ0IsRUFBQyx3QkFBd0IsRUFBQyxNQUFNLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsU0FBUztJQUVyRyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsY0FBYyxFQUFDLFlBQVksRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFDLFNBQVMsRUFBQyxRQUFRO0lBRS9GLGdCQUFnQixFQUFDLFNBQVMsRUFBQyxVQUFVLEVBQUMsVUFBVSxFQUFDLG9CQUFvQixFQUFDLFlBQVksRUFBQyxTQUFTO0lBRTVGLE9BQU8sRUFBQyxhQUFhLEVBQUMsbUJBQW1CLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxVQUFVLEVBQUMsaUJBQWlCO0lBRTFGLGVBQWUsRUFBQyxNQUFNLEVBQUMsU0FBUyxFQUFDLFFBQVEsRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsU0FBUztJQUU3RixPQUFPLEVBQUMsV0FBVyxFQUFDLFFBQVEsRUFBQyxXQUFXLEVBQUMsU0FBUyxFQUFDLFlBQVksRUFBQyxNQUFNLEVBQUMsV0FBVyxFQUFDLFVBQVU7SUFFN0YsaUJBQWlCLEVBQUMsZUFBZSxFQUFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsV0FBVztJQUU1RixNQUFNLEVBQUMsTUFBTSxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsZUFBZSxFQUFDLFFBQVEsRUFBQyxZQUFZO0lBRWhHLE9BQU8sRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBQyxZQUFZLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsU0FBUyxFQUFDLFNBQVM7SUFFL0YsT0FBTyxFQUFDLGVBQWUsRUFBQyxXQUFXLEVBQUMsWUFBWSxFQUFDLE9BQU8sRUFBQyx3QkFBd0I7SUFFakYsWUFBWSxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsVUFBVSxFQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsWUFBWTtJQUV6RixZQUFZLEVBQUMsV0FBVyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsc0JBQXNCLEVBQUMsVUFBVSxFQUFDLFlBQVk7SUFFMUYsYUFBYSxFQUFDLFNBQVMsRUFBQyxZQUFZLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxtQkFBbUIsRUFBQyxPQUFPO0lBRXBGLGFBQWEsRUFBQyxPQUFPLEVBQUMsZUFBZSxFQUFDLGFBQWEsRUFBQyxXQUFXLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNO0lBRXhGLGFBQWEsRUFBQyxRQUFRLEVBQUMsTUFBTSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsa0JBQWtCLEVBQUMsVUFBVSxFQUFDLE9BQU87SUFFdkYsYUFBYSxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsYUFBYSxFQUFDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxTQUFTO0lBRXJGLG9CQUFvQixFQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLFlBQVksRUFBQyxvQkFBb0I7SUFFaEYsY0FBYyxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsWUFBWSxFQUFDLGNBQWMsRUFBQyxXQUFXLEVBQUMsVUFBVTtJQUVwRixVQUFVLEVBQUMsaUJBQWlCLEVBQUMsU0FBUyxFQUFDLHdCQUF3QixFQUFDLGNBQWMsRUFBQyxhQUFhO0lBRTVGLE9BQU8sRUFBQyxXQUFXLEVBQUMsUUFBUSxFQUFDLGdCQUFnQixFQUFDLGNBQWMsRUFBQyxVQUFVLEVBQUMsVUFBVTtJQUVsRixZQUFZLEVBQUMsWUFBWSxFQUFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsV0FBVyxFQUFDLFFBQVEsRUFBQyxhQUFhLEVBQUMsUUFBUTtJQUV4RixRQUFRLEVBQUMsUUFBUSxFQUFDLFlBQVksRUFBQyxVQUFVLEVBQUMsVUFBVSxFQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUMsbUJBQW1CO0lBRXZGLFNBQVMsRUFBQyxRQUFRLEVBQUMsc0JBQXNCLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBQyxTQUFTLEVBQUMsc0JBQXNCO0lBRTVGLGdCQUFnQixFQUFDLDBCQUEwQixFQUFDLFNBQVMsRUFBQyxZQUFZLEVBQUMsU0FBUyxFQUFDLFdBQVc7SUFFeEYsU0FBUyxFQUFDLHdCQUF3QixFQUFDLHFCQUFxQixFQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsVUFBVSxDQUFDLENBQUMiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbGV0IFJhbmtKc29uRGF0YT1bXCJBZmdoYW5pc3RhblwiLFwiQWxiYW5pYVwiLFwiQWxnZXJpYVwiLFwiQW5kb3JyYVwiLFwiQW5nb2xhXCIsXCJBbmd1aWxsYVwiLFxyXG5cclxuXCJBbnRpZ3VhXCIsXCJBcmdlbnRpbmFcIixcIkFybWVuaWFcIixcIkFydWJhXCIsXCJBdXN0cmFsaWFcIixcIkF1c3RyaWFcIixcIkF6ZXJiYWlqYW5cIixcIkJhaGFtYXNcIixcclxuXHJcblwiQmFocmFpblwiLFwiQmFuZ2xhZGVzaFwiLFwiQmFyYmFkb3NcIixcIkJlbGFydXNcIixcIkJlbGdpdW1cIixcIkJlbGl6ZVwiLFwiQmVuaW5cIixcIkJlcm11ZGFcIixcclxuXHJcblwiQmh1dGFuXCIsXCJCb2xpdmlhXCIsXCJCb25haXJlXCIsXCJCb3NuaWFoZXJjZWdvdmluYVwiLFwiQm90c3dhbmFcIixcIkJyYXppbFwiLFwiQnJ1bmVpXCIsXCJCdWxnYXJpYVwiLFxyXG5cclxuXCJCdXJraW5hZmFzb1wiLFwiQnVydW5kaVwiLFwiQ2FtYm9kaWEoS2FtcHVjaGVhKVwiLFwiQ2FtZXJvb25cIixcIkNhbmFkYVwiLFwiQ2FuYXJ5IElzbGFuZHNcIixcIkNhcGUgVmVyZGVcIixcclxuXHJcblwiQ2F5bWFuaXNsYW5kc1wiLFwiQ8ODwrR0ZSBkJ0l2b2lyZVwiLFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibFwiLFwiQ2hhZFwiLFwiQ2hpbGVcIixcIkNoaW5hXCIsXCJDb2xvbWJpYVwiLFwiQ29tb3Jvc1wiLFxyXG5cclxuXCJDb25nb1wiLFwiQ29uZ28sIFRoZSBEZW1vY3JhdGljXCIsXCJDb29rIElzbGFuZHNcIixcIkNvc3RhIFJpY2FcIixcIkNyb2F0aWFcIixcIkN1YmFcIixcIkN1cmFjYW9cIixcIkN5cHJ1c1wiLFxyXG5cclxuXCJDemVjaCBSZXB1YmxpY1wiLFwiRGVubWFya1wiLFwiRGppYm91dGlcIixcIkRvbWluaWNhXCIsXCJEb21pbmljYW4gUmVwdWJsaWNcIixcIkVhc3QgVGltb3JcIixcIkVjdWFkb3JcIixcclxuXHJcblwiRWd5cHRcIixcIkVsIFNhbHZhZG9yXCIsXCJFcXVhdG9yaWFsIEd1aW5lYVwiLFwiRXJpdHJlYVwiLFwiRXN0b25pYVwiLFwiRXRoaW9waWFcIixcIkZhbGtsYW5kaXNsYW5kc1wiLFxyXG5cclxuXCJGYXJvZSBJc2xhbmRzXCIsXCJGaWppXCIsXCJGaW5sYW5kXCIsXCJGcmFuY2VcIixcIkZyZW5jaGd1aWFuYVwiLFwiR2Fib25cIixcIkdhbWJpYVwiLFwiR2VvcmdpYVwiLFwiR2VybWFueVwiLFxyXG5cclxuXCJHaGFuYVwiLFwiR2licmFsdGFyXCIsXCJHcmVlY2VcIixcIkdyZWVubGFuZFwiLFwiR3JlbmFkYVwiLFwiR3VhZGVsb3VwZVwiLFwiR3VhbVwiLFwiR3VhdGVtYWxhXCIsXCJHdWVybnNleVwiLFxyXG5cclxuXCJHdWluZWEgUmVwdWJsaWNcIixcIkd1aW5lYS1CaXNzYXVcIixcIkhhaXRpXCIsXCJIb25kdXJhc1wiLFwiSHVuZ2FyeVwiLFwiSWNlbGFuZFwiLFwiSW5kaWFcIixcIkluZG9uZXNpYVwiLFxyXG5cclxuXCJJcmFuXCIsXCJJcmFxXCIsXCJJcmVsYW5kXCIsXCJJc3JhZWxcIixcIkl0YWx5XCIsXCJKYW1haWNhXCIsXCJKYXBhblwiLFwiSmVyc2V5IElzbGFuZFwiLFwiSm9yZGFuXCIsXCJLYXpha2hzdGFuXCIsXHJcblxyXG5cIktlbnlhXCIsXCJLaXJpYmF0aVwiLFwiS29zb3ZvXCIsXCJLdXdhaXRcIixcIkt5cmd5enN0YW5cIixcIkxhb3NcIixcIkxhdHZpYVwiLFwiTGViYW5vblwiLFwiTGVzb3Rob1wiLFwiTGliZXJpYVwiLFxyXG5cclxuXCJMaWJ5YVwiLFwiTGllY2h0ZW5zdGVpblwiLFwiTGl0aHVhbmlhXCIsXCJMdXhlbWJvdXJnXCIsXCJNYWNhdVwiLFwiTWFjZWRvbmlhLCBSZXB1YmxpYyBPZlwiLFxyXG5cclxuXCJNYWRhZ2FzY2FyXCIsXCJNYWxhd2lcIixcIk1hbGF5c2lhXCIsXCJNYWxkaXZlc1wiLFwiTWFsaVwiLFwiTWFsdGFcIixcIk1hcnNoYWxsaXNsYW5kc1wiLFwiTWFydGluaXF1ZVwiLFxyXG5cclxuXCJNYXVyaXRhbmlhXCIsXCJNYXVyaXRpdXNcIixcIk1heW90dGVcIixcIk1leGljb1wiLFwiTW9sZG92YSBSZXB1YmxpYyBPZiBcIixcIk1vbmdvbGlhXCIsXCJNb250ZW5lZ3JvXCIsXHJcblxyXG5cIk1vbnRlc2VycmF0XCIsXCJNb3JvY2NvXCIsXCJNb3phbWJpcXVlXCIsXCJNeWFubWFyXCIsXCJOYW1pYmlhXCIsXCJOYXVydSBSZXB1YmxpYyBPZlwiLFwiTmVwYWxcIixcclxuXHJcblwiTmV0aGVybGFuZHNcIixcIk5ldmlzXCIsXCJOZXcgQ2FsZWRvbmlhXCIsXCJOZXcgWmVhbGFuZFwiLFwiTmljYXJhZ3VhXCIsXCJOaWdlclwiLFwiTmlnZXJpYVwiLFwiTml1ZVwiLFxyXG5cclxuXCJOb3J0aCBLb3JlYVwiLFwiTm9yd2F5XCIsXCJPbWFuXCIsXCJQYWtpc3RhblwiLFwiUGFuYW1hXCIsXCJQYXB1YSBOZXcgR3VpbmVhXCIsXCJQYXJhZ3VheVwiLFwiUGVydSBcIixcclxuXHJcblwiUGhpbGlwcGluZXNcIixcIlBvbGFuZFwiLFwiUG9ydHVnYWxcIixcIlB1ZXJ0byBSaWNvXCIsXCJRYXRhclwiLFwiUmV1bmlvbiBJc2xhbmQgT2ZcIixcIlJvbWFuaWFcIixcclxuXHJcblwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsXCJSd2FuZGFcIixcIlNhaXBhblwiLFwiU2Ftb2FcIixcIlNhbiBNYXJpbm9cIixcIlNhbm8gVG9tZSZQcmluY2lwZVwiLFxyXG5cclxuXCJTYXVkaSBBcmFiaWFcIixcIlNlbmVnYWxcIixcIlNlcmJpYVwiLFwiU2V5Y2hlbGxlc1wiLFwiU2llcnJhIExlb25lXCIsXCJTaW5nYXBvcmVcIixcIlNsb3Zha2lhXCIsXHJcblxyXG5cIlNsb3ZlbmlhXCIsXCJTb2xvbWFuIElzbGFuZHNcIixcIlNvbWFsaWFcIixcIlNvbWFsaWxhbmQgUmVwdWJsaWMgT2ZcIixcIlNvdXRoIEFmcmljYVwiLFwiU291dGggS29yZWFcIixcclxuXHJcblwiU3BhaW5cIixcIlNyaSBMYW5rYVwiLFwiU3NhbW9hXCIsXCJTdC4gQmFydGhlbGVteVwiLFwiU3QuRXVzdGF0aXVzXCIsXCJTdC5LaXR0c1wiLFwiU3QuTHVjaWFcIixcclxuXHJcblwiU3QuTWFhcnRlblwiLFwiU3QuVmluY2VudFwiLFwiU3VkYW5cIixcIlN1cmluYW1lXCIsXCJTd2F6aWxhbmRcIixcIlN3ZWRlblwiLFwiU3dpdHplcmxhbmRcIixcIlN5cmlhblwiLFxyXG5cclxuXCJUYWhpdGlcIixcIlRhaXdhblwiLFwiVGFqaWtpc3RhblwiLFwiVGFuemFuaWFcIixcIlRoYWlsYW5kXCIsXCJUb2dvXCIsXCJUb25nYVwiLFwiVHJpbmlkYWQgJiBUb2JhZ29cIixcclxuXHJcblwiVHVuaXNpYVwiLFwiVHVya2V5XCIsXCJUdXJrcyZDYWljb3MgSXNsYW5kc1wiLFwiVHV2YWx1XCIsXCJVZ2FuZGFcIixcIlVrcmFpbmVcIixcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsXHJcblxyXG5cIlVuaXRlZCBLaW5nZG9tXCIsXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIixcIlVydWd1YXlcIixcIlV6YmVraXN0YW5cIixcIlZhbnVhdHVcIixcIlZlbmV6dWVsYVwiLFxyXG5cclxuXCJWaWV0bmFtXCIsXCJWaXJnaW4gSXNsYW5kcyhCcml0aXNoXCIsXCJWaXJnaW4gSXNsYW5kcyhVLlMpXCIsXCJZZW1lblwiLFwiWmFtYmlhXCIsXCJaaW1iYWJ3ZVwiXTsiXX0=
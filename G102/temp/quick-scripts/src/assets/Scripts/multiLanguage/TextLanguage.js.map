{"version":3,"sources":["assets\\Scripts\\multiLanguage\\TextLanguage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6DAAmE;AACnE,yDAAqE;AACrE,qDAAgD;AAG1C,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAA0C,gCAAQ;IAAlD;QAAA,qEAqJC;QAlJW,iBAAW,GAAoB,CAAC,CAAC;QACzC,sBAAsB;QACd,sBAAgB,GAAoB,CAAC,CAAC;QACtC,uBAAiB,GAAiB,gCAAY,CAAC,EAAE,CAAC;QAC1D,mBAAmB;QACX,iBAAW,GAAU,EAAE,CAAC;QAChC,kBAAkB;QACV,mBAAa,GAAU,EAAE,CAAC;QAClC,uBAAuB;QACf,cAAQ,GAAU,EAAE,CAAC;QAC7B,WAAW;QACH,gBAAU,GAAQ,EAAE,CAAC;QACrB,oBAAc,GAAS,KAAK,CAAC;;IAsIzC,CAAC;IApIa,6BAAM,GAAhB;QACI,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC,WAAW,CAAC;QACvC,IAAG,CAAC,IAAI,CAAC,cAAc,EAAC;YACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC3B;QACD,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,gCAAS,GAAT,UAAU,EAAmB,EAAC,OAA0B;QAA1B,wBAAA,EAAA,YAA0B;QACpD,IAAI,CAAC,WAAW,GAAC,EAAE,CAAC;QACpB,IAAG,OAAO,OAAO,IAAI,QAAQ,EAAC;YAC1B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAC,OAAO,CAAC;SAC5B;aAAI;YACD,IAAI,CAAC,QAAQ,GAAC,OAAO,CAAC;SACzB;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED,gCAAS,GAAT;QACI,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,sCAAe,GAAf,UAAgB,UAA0B,EAAC,YAA4B;QACnE,IAAG,OAAO,UAAU,IAAI,QAAQ,EAAC;YAC7B,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAC,UAAU,CAAC;SAClC;aAAI;YACD,IAAI,CAAC,WAAW,GAAC,UAAU,CAAC;SAC/B;QACD,IAAG,OAAO,YAAY,IAAI,QAAQ,EAAC;YAC/B,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAC,YAAY,CAAC;SACtC;aAAI;YACD,IAAI,CAAC,aAAa,GAAC,YAAY,CAAC;SACnC;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,wCAAiB,GAAjB;QACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,OAAO;IACP,uCAAgB,GAAhB;QACI,IAAI,CAAC,iBAAiB,GAAC,yBAAe,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,CAAC;QAC1E,IAAG,IAAI,CAAC,WAAW,IAAE,CAAC,IAAE,sCAAqB,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,EAChF;YACI,IAAI,CAAC,cAAc,GAAC,IAAI,CAAC;YACzB,IAAG,OAAO,IAAI,CAAC,WAAW,IAAI,QAAQ,EAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,yBAAe,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aAClF;iBAAI;gBACD,IAAI,GAAG,GAAC,EAAE,CAAC;gBACX,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;oBACxC,IAAI,EAAE,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAG,EAAE,IAAE,CAAC,EAAC;wBACL,GAAG,IAAE,yBAAe,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;wBACtD,IAAG,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,MAAM;4BACrB,GAAG,IAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;qBAC7B;iBACJ;gBACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACvB;SACJ;IACL,CAAC;IAED,UAAU;IACV,gCAAS,GAAT,UAAU,GAAU;QAChB,IAAI,CAAC,UAAU,GAAC,GAAG,CAAC;IACxB,CAAC;IAED,UAAU;IACF,mCAAY,GAApB;QACI,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,IAAI,GAAG,GAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAG,GAAG,IAAE,EAAE,EAAC;gBACP,IAAI,MAAM,GAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7D;SACJ;IACL,CAAC;IAEO,gCAAS,GAAjB,UAAkB,GAAU;QACxB,IAAG,IAAI,CAAC,UAAU,IAAE,EAAE,EAAC;YACnB,IAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAE,IAAI,CAAC,UAAU,EAAC;gBAChE,IAAI,CAAC,MAAM,GAAC,GAAG,CAAC;aACnB;iBAAI;gBACD,IAAI,CAAC,MAAM,GAAC,IAAI,CAAC,UAAU,GAAC,GAAG,CAAC;aACnC;SACJ;aAAI;YACD,IAAI,CAAC,MAAM,GAAC,GAAG,CAAC;SACnB;IACL,CAAC;IAED,qBAAqB;IACd,gCAAS,GAAhB;QAEI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,oCAAgB,EAAC,IAAI,CAAC,gBAAgB,EAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAED,UAAU;IACH,mCAAY,GAAnB;QAEI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,oCAAgB,EAAC,IAAI,CAAC,gBAAgB,EAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,uCAAgB,GAAhB;QACI,IAAG,IAAI,CAAC,iBAAiB,IAAE,yBAAe,CAAC,WAAW,EAAE,CAAC,kBAAkB,EAAE,EAC7E;YACI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,YAAY,EAAE,CAAC;SACvB;IACL,CAAC;IAED,sBAAsB;IACtB,aAAa;IACb,IAAI;IACJ,qFAAqF;IACrF,QAAQ;IACR,mCAAmC;IACnC,+BAA+B;IAC/B,QAAQ;IACR,QAAQ;IAEE,gCAAS,GAAnB;QAEI,iBAAM,SAAS,WAAE,CAAC;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAjJD;QADC,QAAQ,CAAC,EAAC,OAAO,EAAC,qBAAqB,EAAC,CAAC;qDACD;IAHxB,YAAY;QADhC,OAAO;OACa,YAAY,CAqJhC;IAAD,mBAAC;CArJD,AAqJC,CArJyC,EAAE,CAAC,KAAK,GAqJjD;kBArJoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["import { TextManagementManager } from \"../JsonData/TextManagement\";\r\nimport { LanguageType, OnLanguageChange } from \"./LanguageConstants\";\r\nimport LanguageManager from \"./LanguageManager\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class TextLanguage extends cc.Label {\r\n\r\n    @property({tooltip:\"当前的文本id,使用文本表内预设的id\"})\r\n    private cur_text_id: number|number[] = 0;\r\n    //保存原本设定的Index，方便修改后恢复\r\n    private original_text_id: number|number[] = 0;\r\n    private cur_language_type: LanguageType = LanguageType.en;\r\n    /**替换的符号字符串，如 ~  */\r\n    private replace_str:string[]=[];\r\n    /**替换的值字符串，如10% */\r\n    private replace_value:string[]=[];\r\n    /**链接几个id之间的字符串，如：，、 */\r\n    private link_str:string[]=[];\r\n    /**前缀字符串 */\r\n    private prefix_str:string='';\r\n    private is_translation:boolean=false;\r\n\r\n    protected onLoad () {\r\n        this.original_text_id=this.cur_text_id;\r\n        if(!this.is_translation){\r\n            this.startTranslation();\r\n        }\r\n        this.addListen();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id 文本id或文本id数组\r\n     * @param linkStr 链接文本id数组的字符串\r\n     */\r\n    setTextId(id :number|number[],linkStr:string|string[]=[]){\r\n        this.cur_text_id=id;\r\n        if(typeof linkStr == \"string\"){\r\n            this.link_str[0]=linkStr;            \r\n        }else{\r\n            this.link_str=linkStr;\r\n        }\r\n        this.startTranslation();\r\n    }\r\n\r\n    getTextId():number|number[]{\r\n        return this.cur_text_id;\r\n    }\r\n\r\n    setReplaceValue(replaceStr:string|string[],replaceValue:string|string[]){\r\n        if(typeof replaceStr == \"string\"){\r\n            this.replace_str[0]=replaceStr;            \r\n        }else{\r\n            this.replace_str=replaceStr;\r\n        }\r\n        if(typeof replaceValue == \"string\"){\r\n            this.replace_value[0]=replaceValue;            \r\n        }else{\r\n            this.replace_value=replaceValue;\r\n        }\r\n        this.startTranslation();\r\n        this.startReplace();\r\n    }\r\n\r\n    getOriginalTextId(){\r\n        return this.original_text_id;\r\n    }\r\n\r\n    //开始翻译 \r\n    startTranslation () {\r\n        this.cur_language_type=LanguageManager.getInstance().getCurLanguageType();\r\n        if(this.cur_text_id!=0&&TextManagementManager.getInstance().getIsLoadCompleted())\r\n        {\r\n            this.is_translation=true;\r\n            if(typeof this.cur_text_id == \"number\"){\r\n                this.setString(LanguageManager.getInstance().getStrByTextId(this.cur_text_id));\r\n            }else{\r\n                let str='';\r\n                for(let i=0; i<this.cur_text_id.length; i++){\r\n                    let id=this.cur_text_id[i];\r\n                    if(id!=0){\r\n                        str+=LanguageManager.getInstance().getStrByTextId(id);\r\n                        if(i<this.link_str.length)\r\n                            str+=this.link_str[i];\r\n                    }\r\n                }\r\n                this.setString(str);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**设置前缀 */\r\n    setPrefix(str:string){\r\n        this.prefix_str=str;\r\n    }\r\n\r\n    /**开始替换 */\r\n    private startReplace(){\r\n        for(let i=0; i<this.replace_str.length; i++){\r\n            let str=this.replace_str[i];\r\n            if(str!=''){\r\n                let nowStr=this.string;\r\n                this.setString(nowStr.replace(str,this.replace_value[i]));\r\n            }\r\n        }\r\n    }\r\n\r\n    private setString(str:string){\r\n        if(this.prefix_str!=''){\r\n            if(this.string.substring(0,this.prefix_str.length)==this.prefix_str){\r\n                this.string=str;\r\n            }else{\r\n                this.string=this.prefix_str+str;\r\n            }                \r\n        }else{\r\n            this.string=str;\r\n        }\r\n    }\r\n\r\n    /**如果需要动态切换语言-事件监听 */\r\n    public addListen()\r\n    {\r\n        cc.director.on(OnLanguageChange,this.onLanguageChange,this);\r\n    }\r\n\r\n    /**事件移除 */\r\n    public removeListen()\r\n    {\r\n        cc.director.off(OnLanguageChange,this.onLanguageChange,this);\r\n    }\r\n   \r\n    onLanguageChange(){\r\n        if(this.cur_language_type!=LanguageManager.getInstance().getCurLanguageType())\r\n        {\r\n            this.startTranslation();\r\n            this.startReplace();\r\n        }\r\n    }\r\n    \r\n    // //如果需要动态切换语言就开启以下代码\r\n    // update(dt)\r\n    // {\r\n    //     if(this.cur_language_type!=LanguageManager.getInstance().getCurLanguageType())\r\n    //     {\r\n    //         this.startTranslation();\r\n    //         this.startReplace();\r\n    //     }\r\n    // }    \r\n\r\n    protected onDestroy()\r\n    {\r\n        super.onDestroy();\r\n        this.removeListen();\r\n    }\r\n}\r\n"]}
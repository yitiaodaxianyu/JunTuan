{"version":3,"sources":["assets\\Scripts\\copy\\voidcrack\\RogueHexagonTypes.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { LoadManager } from \"../../Loading/LoadManager\";\r\n\r\nexport class JsonRogueHexagonTypes {\r\n    /**格子ID */\r\n    public Hexagon_ID:number = 0 ;\r\n    /**章数 */\r\n    public Layers:number = 0 ;\r\n    /**行数 */\r\n    public Rows:number = 0 ;\r\n    /**位置 */\r\n    public Position:number = 0 ;\r\n    /**格子类型 */\r\n    public HexagonType:number = 0 ;\r\n    /**道具1_ID */\r\n    public RogueProp1_ID:number = 0 ;\r\n    /**道具1_数量 */\r\n    public RogueProp1_Sum:number = 0 ;\r\n    /**专武奖池集 */\r\n    public RogueProp2_ID:number = 0 ;\r\n    /**奖励数量 */\r\n    public RogueProp2_Sum:number = 0 ;\r\n}\r\n\r\nexport class RogueHexagonTypesManager {\r\n    private static _instance: RogueHexagonTypesManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonRogueHexagonTypes>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():RogueHexagonTypesManager {\r\n        if(this._instance==null) {\r\n            this._instance=new RogueHexagonTypesManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('RogueHexagonTypes',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonRogueHexagonTypes成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonRogueHexagonTypes();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.Hexagon_ID,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonRogueHexagonTypes(id:number):JsonRogueHexagonTypes {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据格子ID获取章数 */\r\n    public getLayers(id:number): number {\r\n        return this.data.get(id).Layers;\r\n    }\r\n    /**根据格子ID获取行数 */\r\n    public getRows(id:number): number {\r\n        return this.data.get(id).Rows;\r\n    }\r\n    /**根据格子ID获取位置 */\r\n    public getPosition(id:number): number {\r\n        return this.data.get(id).Position;\r\n    }\r\n    /**根据格子ID获取格子类型 */\r\n    public getHexagonType(id:number): number {\r\n        return this.data.get(id).HexagonType;\r\n    }\r\n    /**根据格子ID获取道具1_ID */\r\n    public getRogueProp1_ID(id:number): number {\r\n        return this.data.get(id).RogueProp1_ID;\r\n    }\r\n    /**根据格子ID获取道具1_数量 */\r\n    public getRogueProp1_Sum(id:number): number {\r\n        return this.data.get(id).RogueProp1_Sum;\r\n    }\r\n    /**根据格子ID获取专武奖池集 */\r\n    public getRogueProp2_ID(id:number): number {\r\n        return this.data.get(id).RogueProp2_ID;\r\n    }\r\n    /**根据格子ID获取奖励数量 */\r\n    public getRogueProp2_Sum(id:number): number {\r\n        return this.data.get(id).RogueProp2_Sum;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 格子ID*/\r\n    public static getMaxHexagon_ID():number {\r\n        return 80092;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n    /**\r\n     * 返回一个格子id2\r\n     * 层数*10000+行数+位置\r\n     * @param layer 层数\r\n     * @param row 行数\r\n     * @param position 位置\r\n     * @returns \r\n     */\r\n     static getId(layer:number,row:number,position:number):number{\r\n        return layer*10000+row*10+position;\r\n    }\r\n\r\n    getData():Map<number,JsonRogueHexagonTypes>{\r\n        return this.data;\r\n    }\r\n\r\n    /**返回这一层的所有格子id \r\n     * 层数\r\n    */\r\n    getAllLayerId(layer:number){\r\n        let Allid=[]\r\n        this.data.forEach((v,k)=>{\r\n            if(v.Layers==layer){\r\n                Allid.push(v.Hexagon_ID)\r\n            }\r\n        });\r\n        return Allid\r\n    }\r\n    \r\n}\r\n"]}
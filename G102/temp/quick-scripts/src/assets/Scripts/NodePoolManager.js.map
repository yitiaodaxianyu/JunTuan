{"version":3,"sources":["assets\\Scripts\\NodePoolManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NodePoolManager extends cc.Component {\r\n\r\n    //@property({type:[cc.NodePool],tooltip:'所有对象的对象池'})\r\n    node_pools: cc.NodePool[]=[];\r\n\r\n    @property({type:[cc.Prefab],tooltip:'所有对象的预制体'})\r\n    prefabs: cc.Prefab[]=[];\r\n\r\n    protected init(count:number):void\r\n    {\r\n        let initCount = count;\r\n        let prefabNum=this.prefabs.length;\r\n        for (let type = 0; type < prefabNum; ++type) {\r\n            this.node_pools.push(new cc.NodePool());\r\n            for(let i=0; i<initCount; ++i)\r\n            {\r\n                let node = cc.instantiate(this.prefabs[type]); // 创建节点\r\n                this.node_pools[type].put(node); // 通过 put 接口放入对象池\r\n            }\r\n        }\r\n    }\r\n\r\n    protected createNodeByType(type:number,pos:cc.Vec2):cc.Node\r\n    {\r\n        let node:cc.Node = null;\r\n        if (this.node_pools[type].size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            node = this.node_pools[type].get();\r\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            node = cc.instantiate(this.prefabs[type]);\r\n        }\r\n        node.setPosition(pos);\r\n        node.parent = this.node; // 将生成的加入节点树\r\n        return node;\r\n    }\r\n\r\n    protected createNodeByParent(type:number,pos:cc.Vec2,parent:cc.Node):cc.Node\r\n    {\r\n        let node:cc.Node = null;\r\n        if (this.node_pools[type].size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            node = this.node_pools[type].get();\r\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            node = cc.instantiate(this.prefabs[type]);\r\n        }\r\n        node.setPosition(pos);\r\n        node.active=true;\r\n        node.parent = parent; // 将生成的加入节点树\r\n        return node;\r\n    }\r\n\r\n    protected destroyNode(node:cc.Node,type:number)\r\n    {\r\n        this.node_pools[type].put(node); // 和初始化时的方法一样，将节点放进对象池，这个方法会同时调用节点的 removeFromParent\r\n    }\r\n\r\n    protected onDestroy()\r\n    {\r\n        let prefabNum=this.prefabs.length;\r\n        for (let type = 0; type < prefabNum; ++type) {\r\n            this.node_pools[type].clear();\r\n        }\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["assets\\Scripts\\BattlePass\\BattlePassManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import GameData from \"../GameData\";\r\nimport { Follow_Type } from \"../multiLanguage/FollowConstants\";\r\nimport FollowManager from \"../multiLanguage/FollowManager\";\r\nimport { PayManager } from \"../Payment/PayManager\";\r\nimport { PayId } from \"../thirdParty/ThirdParty\";\r\nimport { BattlePassDataManager } from \"./BattlePassData\";\r\n\r\n/**战令任务类型 */\r\nexport enum BattlePassTask{\r\n    /**完成一次无尽挑战 */\r\n    Endless=0,\r\n    /**完成一次boss挑战 */\r\n    Boss,\r\n    /**解锁一次新主线关卡 */\r\n    UnlockMission,\r\n    /**完成3次爬塔 */\r\n    Tower3,\r\n\r\n    Num,\r\n}\r\n/**战令领取类型 */\r\nexport enum BattlePassClaimType{\r\n    /**免费的领取 */\r\n    Free=0,\r\n    /**购买后的领取 */\r\n    Buy,\r\n}\r\n\r\nconst google_id:string = 'b501';\r\n\r\nexport class BattlePassManager {\r\n    private static _instance: BattlePassManager = null;\r\n    public static is_buy:boolean=false;\r\n\r\n\r\n    public static getInstance():BattlePassManager {\r\n        if(this._instance==null) {\r\n            this._instance=new BattlePassManager();\r\n            console.log(\"BattlePassManager null\");\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    //初始化游戏数据\r\n    private init () {        \r\n        BattlePassDataManager.getInstance();\r\n    }\r\n    /**\r\n     * \r\n     * @returns 返回战令最高等级\r\n     */\r\n    static getMaxLevel():number{\r\n        return 30;\r\n    }\r\n    /**\r\n     * \r\n     * @returns 返回当前赛季使用的战令系列\r\n     */\r\n    static getUseBattlePassSeries():number{\r\n        return 1;\r\n    }\r\n\r\n    // static resetAllTodayTaskProgress(){\r\n    //     for(let i=BattlePassTask.Endless;i<BattlePassTask.Num; i++){\r\n    //         this.saveTodayTaskProgress(i,0);\r\n    //     }\r\n    //     this.saveTodayAddExp(0);\r\n    // }\r\n\r\n    static getTodayTaskProgress(type:BattlePassTask){\r\n        let num=cc.sys.localStorage.getItem('battle_pass_task_'+type);\r\n        if(num!=\"\"&&num!=null)\r\n        {\r\n            num=parseInt(num);\r\n        }else\r\n        {\r\n            num=0;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    // static addTodayTaskProgress(type:BattlePassTask){\r\n    //     let newNum=this.getTodayTaskProgress(type)+1;\r\n    //     this.saveTodayTaskProgress(type,newNum);\r\n    // }\r\n\r\n    // static saveTodayTaskProgress(type:BattlePassTask,num:number){\r\n    //     cc.sys.localStorage.setItem('battle_pass_task_'+type,num);\r\n    //     switch(type){\r\n    //         case BattlePassTask.Endless:{\r\n    //             if(num!=0)\r\n    //             this.addTodayAddExp(1);\r\n    //         }break;\r\n    //         case BattlePassTask.Boss:{\r\n    //             if(num!=0)\r\n    //             this.addTodayAddExp(1);\r\n    //         }break;\r\n    //         case BattlePassTask.UnlockMission:{\r\n    //             if(num!=0)\r\n    //             this.addTodayAddExp(1);\r\n    //         }break;\r\n    //         case BattlePassTask.Tower3:{\r\n    //             if(num!=0&&num%3==0){\r\n    //                 this.addTodayAddExp(1);\r\n    //             }\r\n    //         }break;\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * 获取当前战令的经验值\r\n     * @returns 返回当前战令的经验值\r\n     */\r\n    static getCurExp():number{\r\n        let num=cc.sys.localStorage.getItem(\"Task_Accumulated_Points_Battle\");\r\n        if(num!=\"\"&&num!=null)\r\n        {\r\n            num=parseInt(num);\r\n        }else\r\n        {\r\n            num=0;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    static getCurLevel():number{\r\n        let exp=this.getCurExp();\r\n        let data=BattlePassDataManager.getInstance().getData();\r\n        let level=0;\r\n        data.forEach((v,k)=>{\r\n            if(exp>=v.RequiredExp){\r\n                level=v.BattlePassLevel;\r\n            }\r\n        })\r\n        return level\r\n    }\r\n\r\n    // static addCurExp(num:number){\r\n    //     let newNum=this.getCurExp()+num;\r\n    //     this.saveCurExp(newNum);\r\n    // }\r\n    /**\r\n     * 设置当前战令的经验值\r\n     * @param num 设置数量\r\n     */\r\n    // static saveCurExp(num:number){\r\n    //     cc.sys.localStorage.setItem(\"Task_Accumulated_Points_day\",Number(cc.sys.localStorage.getItem(\"Task_Accumulated_Points_day\")) + num);\r\n        \r\n    //     let level=Math.floor(num/10);        \r\n    //     if(FollowManager.getInstance().getFirstDo(Follow_Type.每级战令解锁人数_x级+level)<=0){\r\n    //         FollowManager.getInstance().addFirstDo(Follow_Type.每级战令解锁人数_x级+level);\r\n    //         FollowManager.getInstance().followEvent(Follow_Type.每级战令解锁人数_x级+level);\r\n    //     }\r\n    // }\r\n\r\n    // static getTodayAddExp(){\r\n    //     let num=cc.sys.localStorage.getItem('battle_pass_add_exp');\r\n    //     if(num!=\"\"&&num!=null)\r\n    //     {\r\n    //         num=parseInt(num);\r\n    //     }else\r\n    //     {\r\n    //         num=0;\r\n    //     }\r\n    //     return num;\r\n    // }\r\n\r\n    // static addTodayAddExp(num:number):boolean{\r\n    //     let newNum=this.getTodayAddExp()+num;\r\n    //     if(newNum<=8){\r\n    //         this.saveTodayAddExp(newNum);\r\n    //         this.addCurExp(1);\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    // static saveTodayAddExp(num:number){\r\n    //     cc.sys.localStorage.setItem('battle_pass_add_exp',num);\r\n    // }\r\n\r\n    /**\r\n     * @param type 战令任务类型类型\r\n     * @param id 对应的战令id，由赛季id和战令等级决定\r\n     * @returns 返回对应的领取状态\r\n     */\r\n     public static getClaimState(type:BattlePassClaimType,id:number):number\r\n     {        \r\n         let num=cc.sys.localStorage.getItem('battle_pass_claim_state_'+type+\"_\"+id);\r\n         if(num!=\"\"&&num!=null)\r\n         {\r\n             num=parseInt(num);\r\n         }else\r\n         {\r\n             num=0;\r\n         }\r\n         return num;\r\n     }\r\n    /**\r\n     * \r\n     * @param type 战令任务类型类型\r\n     * @param id 对应的战令id，由赛季id和战令等级决定\r\n     * @param num 领取状态,大于0表示已领取，其他表示未领取\r\n     */\r\n     public static saveClaimState(type:BattlePassClaimType,id:number,num:number)\r\n     {\r\n         cc.sys.localStorage.setItem('battle_pass_claim_state_'+type+\"_\"+id,num);\r\n     }\r\n\r\n    public static refreshBuyState(){\r\n        this.is_buy=PayManager.getInstance().getPayNum(google_id)>0;\r\n     }\r\n     /**\r\n      * 重置战令数据\r\n      */\r\n    public static resetBattlePass(){\r\n        //购买\r\n        PayManager.getInstance().savePayNum(google_id,0);\r\n        //经验\r\n        // this.saveCurExp(0);\r\n        //领取状态\r\n        for(let i=1; i<=this.getMaxLevel(); i++){\r\n            let id=BattlePassDataManager.getId(this.getUseBattlePassSeries(),i);\r\n            this.saveClaimState(BattlePassClaimType.Free,id,0);\r\n            this.saveClaimState(BattlePassClaimType.Buy,id,0);\r\n        }\r\n        cc.sys.localStorage.setItem(\"Task_Accumulated_Points_Battle\",'');\r\n     }\r\n}"]}
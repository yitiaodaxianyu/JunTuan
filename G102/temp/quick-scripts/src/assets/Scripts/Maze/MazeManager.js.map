{"version":3,"sources":["assets\\Scripts\\Maze\\MazeManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { FightingInfo, GameMode, IsDebug } from \"../Constants\";\r\nimport { HeroManager } from \"../Hero/Data/HeroManager\";\r\nimport { Hero_Type } from \"../Hero/Game/HeroConfig\";\r\nimport { LevelManager } from \"../Level/LevelManager\";\r\nimport { MissionLevelManager, TableMonsterData } from \"../Level/MissionLevel\";\r\nimport { Follow_Type } from \"../multiLanguage/FollowConstants\";\r\nimport FollowManager from \"../multiLanguage/FollowManager\";\r\nimport LanguageManager from \"../multiLanguage/LanguageManager\";\r\nimport { PetInfo } from \"../Pet/PetConfig\";\r\nimport { PetManager } from \"../Pet/PetManager\";\r\nimport { StorageKey } from \"../Storage/StorageConfig\";\r\nimport { TheStorageManager } from \"../Storage/StorageManager\";\r\nimport { MazeRoadManager } from \"./Data/MazeRoad\";\r\nimport { RogueBuffManager } from \"./Data/RogueBuff\";\r\nimport { RogueConfigurationManager } from \"./Data/RogueConfiguration\";\r\nimport { RogueHexagonTypesManager } from \"../copy/voidcrack/RogueHexagonTypes\";\r\nimport { RogueRewardManager } from \"./Data/RogueReward\";\r\n// import { RogueShopManager } from \"./Data/RogueShop\";\r\nimport { RogueTextManager } from \"./Data/RogueText\";\r\nimport { RogueLevelManager } from \"../copy/voidcrack/RogueLevel\";\r\nimport { MonsterGroupConfigureManager } from \"../Monster/Data/MonsterGroupConfigure\";\r\nimport Times from \"../Turntable/Times\";\r\n\r\nexport interface PropIndex{\r\n    prop_index:number;\r\n    prop_sale:number;\r\n}\r\n\r\nexport interface ShopPropList{\r\n    box_id:number;\r\n    prop_list:PropIndex[];\r\n}\r\n\r\nexport class MazeFightingData{\r\n    /**攻击力 % */\r\n    AttackPer:number=0;\r\n    /**暴击值 固定*/\r\n    CriticalValue:number=0;\r\n    /**命中值 固定*/\r\n    HitValue:number=0;\r\n    /**防御力 %*/\r\n    DefensePer:number=0;\r\n    /**伤害减免 %*/\r\n    InjuryReductionPer:number=0;\r\n    /**斩杀效果 %*/\r\n    BeheadPer:number=0;\r\n    /**开局恢复效果 % */\r\n    RecoveryStartPer:number=0;\r\n}\r\n\r\nexport class MazeManager {\r\n\r\n    private static _instance: MazeManager = null;\r\n    \r\n    /**正在战斗的格子id */\r\n    private fighting_id:number=10012;\r\n    /**正在完成了的格子id */\r\n    private passing_id:number=10012;\r\n    /**已经通关了的格子id */\r\n    private passed_ids:number[]=[];\r\n\r\n    private fighting_data:MazeFightingData=null;\r\n\r\n    private lease_pet_list:PetInfo[]=[];\r\n\r\n    public static getInstance():MazeManager {\r\n        if(this._instance==null) {\r\n            this._instance=new MazeManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init () {\r\n        MazeRoadManager.getInstance();\r\n        RogueBuffManager.getInstance();\r\n        RogueConfigurationManager.getInstance();\r\n        RogueHexagonTypesManager.getInstance();\r\n        RogueRewardManager.getInstance();\r\n        // RogueShopManager.getInstance();\r\n        RogueTextManager.getInstance();        \r\n        this.loadData();\r\n    }\r\n    \r\n    //-----------------------数据保存与读取-----------------------------\r\n    private loadData(){\r\n        this.loadFightingId();\r\n        this.loadMazePassedId();\r\n        this.loadPassingId();\r\n        this.loadLeasePetList();\r\n        this.fighting_data=new MazeFightingData();\r\n    }\r\n   \r\n    private loadMazePassedId(){\r\n        this.passed_ids=new Array();\r\n        let ids=TheStorageManager.getInstance().getItem(StorageKey.MazePassId); \r\n        if(ids===\"\" || ids===null)\r\n        {\r\n            this.passed_ids.push(RogueHexagonTypesManager.getId(this.getFloor(),1,2));\r\n        }else\r\n        {\r\n            let list=ids.split(',');\r\n            for(let i=0; i<list.length; i++)\r\n            {\r\n                let id=parseInt(list[i]);\r\n                this.passed_ids.push(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    resetMazeData(){\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeBuffList);        \r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeFightingId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazePassId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazePassingId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeShopList);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeUnSelectSpoils);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeBoxIdList);        \r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeSubHp);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeFloor);\r\n\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeLeasePetList);\r\n        let buffDate=RogueBuffManager.getInstance().getData();\r\n        buffDate.forEach((v)=>{\r\n            TheStorageManager.getInstance().removeItem(StorageKey.MazeBuffStage+v.RogueBuff_ID);\r\n        });\r\n        let data=RogueHexagonTypesManager.getInstance().getData();\r\n        data.forEach((v)=>{\r\n            TheStorageManager.getInstance().removeItem(StorageKey.MazeRandPetList+v.Hexagon_ID);\r\n        })\r\n        //内存数据也要清空\r\n        this.loadData();\r\n    }\r\n\r\n    /**重置楼层数据 */\r\n    resetFloorData(){\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeFightingId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazePassId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazePassingId);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeShopList);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeUnSelectSpoils);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeBoxIdList);\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeRandPetList);\r\n        this.loadData();\r\n    }\r\n\r\n    /**迷宫刚通关的id */\r\n    public getMazePassedIds():number[]{        \r\n        return this.passed_ids;\r\n    }\r\n\r\n    public addMazePassedId(id:number):boolean{        \r\n        if(RogueHexagonTypesManager.getInstance().getHexagonType(id)){\r\n            if(!this.passed_ids.includes(id)){\r\n                this.passed_ids.push(id);                \r\n                TheStorageManager.getInstance().setItem(StorageKey.MazePassId,this.passed_ids); \r\n                return true;\r\n            }            \r\n            return false;\r\n        }\r\n        return false;\r\n        \r\n    }\r\n    \r\n    private loadFightingId(){\r\n        this.fighting_id=TheStorageManager.getInstance().getInt(StorageKey.MazeFightingId,RogueHexagonTypesManager.getId(this.getFloor(),1,2));\r\n    }\r\n\r\n    public getFightingId():number{\r\n        return this.fighting_id;\r\n    }\r\n\r\n    public setFightingId(id:number):boolean{\r\n        if(RogueHexagonTypesManager.getInstance().getHexagonType(id)){\r\n            this.fighting_id=id;            \r\n            TheStorageManager.getInstance().setItem(StorageKey.MazeFightingId,id);            \r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private loadPassingId(){\r\n        this.passing_id=TheStorageManager.getInstance().getInt(StorageKey.MazePassingId,RogueHexagonTypesManager.getId(this.getFloor(),1,2));\r\n    }\r\n\r\n    public getPassingId():number{\r\n        return this.passing_id;\r\n    }\r\n\r\n    public setPassingId(id:number):boolean{\r\n        if(RogueHexagonTypesManager.getInstance().getHexagonType(id)){\r\n            this.passing_id=id;\r\n            TheStorageManager.getInstance().setItem(StorageKey.MazePassingId,id);\r\n            if(id==10092){\r\n            }else\r\n            if(id==20092){\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getFloor():number{\r\n        return TheStorageManager.getInstance().getInt(StorageKey.MazeFloor,1);\r\n    }\r\n\r\n    public setFloor(num:number){\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeFloor,num);\r\n    }\r\n\r\n    /**获取当前未选择的战利品 */\r\n    public getUnSelectSpoils():number[]{\r\n        let idList=new Array();\r\n        let ids=TheStorageManager.getInstance().getItem(StorageKey.MazeUnSelectSpoils);\r\n        if(ids==='' || ids===null){\r\n\r\n        }else{\r\n            let list=ids.split(',');\r\n            for(let i=0; i<list.length; i++)\r\n            {\r\n                let id=parseInt(list[i]);\r\n                idList.push(id);\r\n            }\r\n        }\r\n        return idList;\r\n    }\r\n\r\n    public setUnSelectSpoils(idList:number[]){\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeUnSelectSpoils,idList);        \r\n    }\r\n\r\n    /**获取商店列表 */\r\n    public getAllShopPropList():ShopPropList[]{\r\n        let arrList=new Array();\r\n        let ids=TheStorageManager.getInstance().getItem(StorageKey.MazeShopList);\r\n        if(ids==='' || ids===null){\r\n\r\n        }else{\r\n            arrList=JSON.parse(ids);            \r\n        }\r\n        return arrList;\r\n    }\r\n    /**根据id获得一个商店道具的列表 */\r\n    public getAPropIndex(boxId:number):PropIndex[]{\r\n        let listArr=this.getAllShopPropList();\r\n        let list=[];\r\n        for(let i=0; i<listArr.length; i++){\r\n            let obj=listArr[i];\r\n            if(boxId==obj.box_id){\r\n                list=obj.prop_list;\r\n                break;\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    public setShopProp(list:ShopPropList){\r\n        let listArr=this.getAllShopPropList();\r\n        listArr.push(list);\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeShopList,JSON.stringify(listArr));    \r\n    }\r\n    /**\r\n     * \r\n     * @param r1 格子1的行\r\n     * @param r2 格子2的行\r\n     * @param c1 格子1的列\r\n     * @param c2 格子2的列\r\n     * @param even 偶数行\r\n     */\r\n    checkAdjacent(r1:number,c1:number,r2:number,c2:number,r1IsEven:boolean):boolean{\r\n        if(r1IsEven){\r\n            //偶数行是R1，判断大于等于\r\n            let offsetC=c2-c1;\r\n            if(Math.abs(r1-r2)<=1 && offsetC>=0 && Math.abs(offsetC)<=1){\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n           //奇数行是R1，判断大于等于\r\n           let offsetC=c2-c1;\r\n           if(Math.abs(r1-r2)<=1 && offsetC<=0 && Math.abs(offsetC)<=1){\r\n               return true;\r\n           }else{\r\n               return false;\r\n           } \r\n        }\r\n    }\r\n\r\n    /**获得Buff的列表 */\r\n    public getBuffList():number[]{        \r\n        let list=TheStorageManager.getInstance().getIntList(StorageKey.MazeBuffList,[]);\r\n        return list;\r\n    }\r\n    /**是否存在一些buff */\r\n    public isHaveABuff(checkList:number[]):boolean{        \r\n        let isHave=false;\r\n        let list=this.getBuffList();\r\n        for(let n=0; n<checkList.length; n++){\r\n            if(list.indexOf(checkList[n])!=-1){\r\n                return true;\r\n            }\r\n        }        \r\n        return isHave;\r\n    }\r\n    /**检查buff阶段是否可以升级 */\r\n    public checkBuffStage(checkList:number[]){        \r\n        let haveList=[];\r\n        let list=this.getBuffList();\r\n        for(let n=0; n<checkList.length; n++){\r\n            let buffId=checkList[n]\r\n            if(list.indexOf(buffId)!=-1){\r\n                this.addBuffStage(buffId);\r\n            }\r\n        }\r\n        return haveList;\r\n    }\r\n\r\n    public addBuff(id:number){\r\n        let list=this.getBuffList();\r\n        list.push(id);\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeBuffList,list);\r\n    }\r\n\r\n    public resetBuffList(){\r\n        TheStorageManager.getInstance().removeItem(StorageKey.MazeBuffList);\r\n    }\r\n\r\n    /**获得Buff的列表 */\r\n    public getBuffStage(buffId:number):number{\r\n        let stage=TheStorageManager.getInstance().getInt(StorageKey.MazeBuffStage+buffId,0);\r\n        return stage;\r\n    }\r\n\r\n    public addBuffStage(buffId:number){\r\n        let stage=this.getBuffStage(buffId);\r\n        stage+=1;\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeBuffStage+buffId,stage);\r\n    }\r\n\r\n    public resetBuffStage(){\r\n        let idList=RogueBuffManager.getInstance().getBuffIdList();\r\n        for(let i=0; i<idList.length; i++){\r\n            TheStorageManager.getInstance().removeItem(StorageKey.MazeBuffStage+idList[i]);\r\n        }        \r\n    }\r\n\r\n    public refreshFightingData():MazeFightingData{\r\n        this.fighting_data=new MazeFightingData();\r\n        let buffList=this.getBuffList();\r\n        let RBM=RogueBuffManager.getInstance();\r\n        for(let i=0; i<buffList.length; i++){\r\n            let buffId=buffList[i];            \r\n            let jsonData=RBM.getJsonRogueBuff(buffId);\r\n            switch(jsonData.RogueBuff_Type){\r\n                case 1:{\r\n                    this.fighting_data.AttackPer+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 2:{\r\n                    let stage=this.getBuffStage(buffId);\r\n                    let value=jsonData.RogueBuff1_Value*stage;\r\n                    if(value>jsonData.RogueBuff2_Value){\r\n                        value=jsonData.RogueBuff2_Value;\r\n                    }\r\n                    this.fighting_data.AttackPer+=value;\r\n                }break;\r\n                case 3:{\r\n                    this.fighting_data.CriticalValue+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 4:{\r\n                    this.fighting_data.HitValue+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 5:{\r\n                    this.fighting_data.DefensePer+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 6:{\r\n                    let stage=this.getBuffStage(buffId);\r\n                    let value=jsonData.RogueBuff1_Value*stage;\r\n                    if(value>jsonData.RogueBuff2_Value){\r\n                        value=jsonData.RogueBuff2_Value;\r\n                    }\r\n                    this.fighting_data.DefensePer+=value;\r\n                }break;\r\n                case 7:{\r\n                    this.fighting_data.InjuryReductionPer+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 8:{\r\n                    this.fighting_data.BeheadPer+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n                case 9:{\r\n                    this.fighting_data.RecoveryStartPer+=jsonData.RogueBuff1_Value;\r\n                }break;\r\n            }\r\n        }\r\n        return this.fighting_data;\r\n    }\r\n\r\n    /**获取迷宫地基对应的格子排布二维列表 */\r\n    getGroundBoxIdList():number[][]{\r\n        let idList=[];\r\n        let data=TheStorageManager.getInstance().getItem(StorageKey.MazeBoxIdList);\r\n        if(data===\"\" || data===null)\r\n        {\r\n            idList=[];\r\n        }else\r\n        {\r\n            idList=JSON.parse(data);\r\n        }\r\n        return idList;\r\n    }\r\n\r\n    saveGroundBoxIdList(list:number[][]){\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeBoxIdList,JSON.stringify(list));\r\n    }\r\n\r\n    /**获取当前挑战的信息----迷宫怪物信息/标题信息/背景图片名称 */\r\n    getFightingInfo(fightingId?:number):FightingInfo{\r\n        let jsonData=RogueLevelManager.getInstance().getJsonRogueLevel(fightingId);\r\n        let fightingInfo=new FightingInfo();\r\n        let xagonType= RogueHexagonTypesManager.getInstance().getHexagonType(Times.voidsensid)\r\n        if(xagonType==1){\r\n            fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(830002);//普通战役\r\n        }\r\n        if(xagonType==3){\r\n            fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(830003);//普通战役\r\n        }\r\n        if(xagonType==5){\r\n            fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(830004);//普通战役\r\n        }\r\n\r\n        //背景图片名称    \r\n        // let bgIndex=0;\r\n        let bgName='bg/Maze_Bg_Battle';\r\n        fightingInfo.bg_name=bgName;\r\n        fightingInfo.wall_name='bg/Maze_Bg_Wall';\r\n        fightingInfo.wave_types=jsonData.MonsterTideWave;\r\n        fightingInfo.wave_refresh_time=jsonData.TimeInterval;\r\n        //怪物信息列表\r\n        let monsterDatas=new Array();\r\n        let monsterGroups=jsonData.MonsterGroupConfigure;\r\n        let MGC=MonsterGroupConfigureManager.getInstance();\r\n        for(let i=0; i<monsterGroups.length; i++){\r\n            let dataArr=new Array();\r\n            let groupId=monsterGroups[i];\r\n            let monsterJsonData=MGC.getJsonMonsterGroupConfigure(groupId)\r\n            for(let n=0; n<monsterJsonData.MonsterId.length; n++){\r\n                let tableMonsterData=new TableMonsterData();\r\n                tableMonsterData.id=monsterJsonData.MonsterId[n];\r\n                tableMonsterData.num=monsterJsonData.MonsterNum[n];\r\n                tableMonsterData.refresh_time=monsterJsonData.RefreshInterval[n];\r\n                tableMonsterData.level=jsonData.MonsterLevel[i];\r\n                tableMonsterData.hp_rate=jsonData.HpCoefficient[i];\r\n                dataArr.push(tableMonsterData);\r\n                fightingInfo.total_monster_num+=tableMonsterData.num;\r\n            }\r\n            monsterDatas.push(dataArr);\r\n        }\r\n        fightingInfo.monster_datas=monsterDatas;\r\n        return fightingInfo;\r\n    }\r\n    /**获取剩余的血量 */\r\n    public getMazeHp():number{\r\n        let fullHp=this.getMazeMaxHp();\r\n        let subHp=TheStorageManager.getInstance().getInt(StorageKey.MazeSubHp,0);\r\n        return fullHp-subHp*fullHp;\r\n    }\r\n\r\n    public getMazeMaxHp():number{\r\n        let teamList=HeroManager.getInstance().getTeamList(GameMode.Maze);\r\n        let fullHp=0;\r\n        let heroList = HeroManager.getInstance().getHeroList();\r\n        for(let i=0; i<heroList.length; i++){\r\n            if(teamList.includes(heroList[i].hero_type)){                \r\n                fullHp+=HeroManager.getInstance().getHeroData(heroList[i].hero_type).total_hp*0.25;\r\n            }\r\n        }\r\n        if(fullHp<3000)\r\n        {\r\n            fullHp=3000;\r\n        }\r\n        fullHp=Math.round(fullHp);\r\n        return fullHp;\r\n    }\r\n\r\n    /**设置迷宫扣掉的血量% */\r\n    public setMazeSubHp(hp:number):boolean{\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeSubHp,hp);\r\n        return false;\r\n    }\r\n    /**获得租借列表 */\r\n    public getLeasePetList():PetInfo[]{\r\n        return this.lease_pet_list;\r\n    }\r\n\r\n    public loadLeasePetList(){        \r\n        let list=TheStorageManager.getInstance().getJson(StorageKey.MazeLeasePetList);\r\n        this.lease_pet_list=new Array();\r\n        if(list){\r\n            for(let i=0; i<list.length; i++){\r\n                let petInfo=new PetInfo();\r\n                let info=list[i];\r\n                petInfo.hero_type=info.hero_type;\r\n                petInfo.pet_awaken_stage=info.pet_awaken_stage;\r\n                petInfo.pet_id=info.pet_id;\r\n                petInfo.pet_level=info.pet_level;\r\n                petInfo.pet_quality=info.pet_quality;\r\n                petInfo.sequence_id=info.sequence_id;\r\n                petInfo.lease_type=info.lease_type;\r\n                this.lease_pet_list.push(petInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    public saveLeasePetList(){\r\n        TheStorageManager.getInstance().setJson(StorageKey.MazeLeasePetList,this.lease_pet_list);\r\n    }\r\n\r\n    /**添加一个宠物至租借列表 */\r\n    public addLeasePetList(petInfo:PetInfo){\r\n        let list=this.getLeasePetList();\r\n        list.push(petInfo);\r\n        TheStorageManager.getInstance().setJson(StorageKey.MazeLeasePetList,list);\r\n    }\r\n\r\n    resetLeasePetList(){\r\n        TheStorageManager.getInstance().setJson(StorageKey.MazeLeasePetList,[]);\r\n    }\r\n\r\n    /**获得租借的已经随机出的列表 */\r\n    public getRandPetList(boxId:number):PetInfo[]{\r\n        let list=TheStorageManager.getInstance().getJson(StorageKey.MazeRandPetList+boxId);\r\n        let petList=new Array();\r\n        if(list){\r\n            //this.pet_list=list;\r\n            for(let i=0; i<list.length; i++){\r\n                let petInfo=new PetInfo();\r\n                let info=list[i];\r\n                petInfo.hero_type=info.hero_type;\r\n                petInfo.pet_awaken_stage=info.pet_awaken_stage;\r\n                petInfo.pet_id=info.pet_id;\r\n                petInfo.pet_level=info.pet_level;\r\n                petInfo.pet_quality=info.pet_quality;\r\n                petInfo.sequence_id=info.sequence_id;\r\n                petInfo.lease_type=info.lease_type;\r\n                petList.push(petInfo);\r\n            }\r\n        }\r\n        return petList;\r\n    }\r\n    /**设置租借的已经随机出的列表 */\r\n    public setRandPetList(boxId:number,petList:PetInfo[]){\r\n        TheStorageManager.getInstance().setJson(StorageKey.MazeRandPetList+boxId,petList);\r\n    }\r\n    /**单方面重置英雄的绑定信息 */\r\n    resetHeroBind(){\r\n        let list=this.getLeasePetList();\r\n        for(let i=0; i<list.length; i++){\r\n            let petInfo=list[i];\r\n            if(petInfo.hero_type!=Hero_Type.NULL){\r\n                // let mainList=PetManager.getInstance().getPetList();\r\n                let isHave=false;\r\n                // for(let m=0; m<mainList.length; m++){\r\n                //     let mainInfo=mainList[m]\r\n                //     if(mainInfo.hero_type==petInfo.hero_type){\r\n                //         HeroManager.getInstance().getHeroData(petInfo.hero_type).pet_info=mainInfo;\r\n                //         isHave=true;\r\n                //         break;\r\n                //     }\r\n                // }\r\n                if(!isHave){\r\n                    HeroManager.getInstance().getHeroData(petInfo.hero_type).pet_info=null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**恢复英雄的绑定，在进入迷宫时调用,如果主列表与迷宫列表的宠物不绑定同一个英雄时或者主列表宠物绑定的英雄为NULL时 */\r\n    recoverHeroBind(){\r\n        // let list=PetManager.getInstance().getPetList();\r\n        let leaseList=this.getLeasePetList();\r\n        for(let m=0; m<leaseList.length; m++){\r\n            let leaseInfo=leaseList[m]\r\n            if(leaseInfo.hero_type!=Hero_Type.NULL){\r\n                let isHave=false;\r\n                // for(let i=0; i<list.length; i++){\r\n                //     let petInfo=list[i];\r\n                //     if(petInfo.hero_type!=Hero_Type.NULL){\r\n                //         if(petInfo.hero_type==leaseInfo.hero_type){\r\n                //             //HeroManager.getInstance().getHeroData(leaseInfo.hero_type).pet_info=leaseInfo;\r\n                //             //如果主线宠物绑定的英雄跟租借宠物绑定的英雄一致，则使用主线的\r\n                //             isHave=true;\r\n                //             leaseInfo.hero_type=Hero_Type.NULL;\r\n                //         }\r\n                //     }\r\n                // }\r\n                if(isHave==false){\r\n                    //如果主线宠物绑定的英雄和租借宠物绑定的英雄没有冲突，则需要租借的绑定英雄\r\n                    HeroManager.getInstance().getHeroData(leaseInfo.hero_type).pet_info=leaseInfo;\r\n                }\r\n            }\r\n        }        \r\n    }\r\n    /**是否重置 */\r\n    checkDate():boolean{\r\n        let startTime=this.getStartDate();\r\n        let endTime=this.getEndTime();\r\n        let offsetTime=Math.floor((endTime-startTime)/1000);\r\n        let day2=2*24*60*60;\r\n        // if(IsDebug){\r\n        //     day2=2*60;\r\n        // }\r\n        if(offsetTime>=day2){\r\n            if(this.getPassingId()!=RogueHexagonTypesManager.getId(this.getFloor(),1,2)){\r\n                FollowManager.getInstance().followEvent(Follow_Type.rogue玩法最终完成的格子数);\r\n            }\r\n            this.setStartDate();\r\n            this.resetMazeData();\r\n            FollowManager.getInstance().followEvent(Follow_Type.rogue玩法开始次数);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getEndTime():number{\r\n        let startTime=new Date(2022,8,1,0,0,0,0).getTime();\r\n        //cc.log(\"日期：\"+new Date(timeNum).toLocaleString());\r\n        let nowTime=new Date().getTime();\r\n        let offsetTime=nowTime-startTime;\r\n        let offsetDay=Math.floor(offsetTime/(24*60*60*1000));\r\n        let endDay=offsetDay+2-(offsetDay)%2;\r\n        let endTime=startTime+(endDay)*(24*60*60*1000);\r\n        return endTime;\r\n    }\r\n\r\n    getRemainTime():number{\r\n        let nowTime=new Date().getTime();\r\n        let remainTimeSec=(this.getEndTime()-nowTime)/1000;\r\n        return remainTimeSec;\r\n    }\r\n\r\n    getStartDate():number{\r\n        return TheStorageManager.getInstance().getInt(StorageKey.MazeStartDate,0);\r\n    }\r\n\r\n    setStartDate(){\r\n        TheStorageManager.getInstance().setItem(StorageKey.MazeStartDate,new Date().getTime());\r\n    }\r\n\r\n}\r\n"]}
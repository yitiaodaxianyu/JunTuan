{"version":3,"sources":["assets\\Scripts\\Maze\\Data\\RoguePetsLease.ts"],"names":[],"mappings":";;;;;;;AAAA,yDAAwD;AAGxD;IAAA;QACI,UAAU;QACH,YAAO,GAAU,CAAC,CAAE;QAC3B,YAAY;QACL,gBAAW,GAAY,EAAE,CAAE;QAClC,WAAW;QACJ,eAAU,GAAY,EAAE,CAAE;QACjC,UAAU;QACH,gBAAW,GAAY,EAAE,CAAE;IACtC,CAAC;IAAD,yBAAC;AAAD,CATA,AASC,IAAA;AATY,gDAAkB;AAW/B;IAAA;QAEI,iBAAiB;QACT,SAAI,GAAgC,IAAI,CAAC;QACzC,sBAAiB,GAAS,KAAK,CAAC;QA4DxC,yBAAyB;IAG7B,CAAC;IA7DiB,iCAAW,GAAzB;QACI,IAAG,IAAI,CAAC,SAAS,IAAE,IAAI,EAAE;YACrB,IAAI,CAAC,SAAS,GAAC,IAAI,qBAAqB,EAAE,CAAC;YAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IACD,SAAS;IACD,oCAAI,GAAZ;QACI,IAAG,CAAC,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;IACL,CAAC;IACD,QAAQ;IACA,wCAAQ,GAAhB;QAAA,iBAgBC;QAfG,yBAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAC,yBAAW,CAAC,SAAS,EAAC,UAAC,KAAY,EAAE,MAAmB;YAC1F,IAAG,KAAK,EAAC;gBACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO;aACV;YACD,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtC,KAAI,CAAC,IAAI,GAAC,IAAI,GAAG,EAAE,CAAC;YACpB,IAAI,IAAI,GAAC,MAAM,CAAC,IAAI,CAAC;YACrB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC5B,IAAI,QAAQ,GAAC,IAAI,kBAAkB,EAAE,CAAC;gBACtC,QAAQ,GAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAC,QAAQ,CAAC,CAAC;aAC5C;YACD,KAAI,CAAC,iBAAiB,GAAC,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,YAAY;IACL,kDAAkB,GAAzB;QACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IACD,sBAAsB;IACf,qDAAqB,GAA5B,UAA6B,EAAS;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IACD,oBAAoB;IACb,8CAAc,GAArB,UAAsB,EAAS;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC;IACzC,CAAC;IACD,mBAAmB;IACZ,6CAAa,GAApB,UAAqB,EAAS;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC;IACxC,CAAC;IACD,kBAAkB;IACX,8CAAc,GAArB,UAAsB,EAAS;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC;IACzC,CAAC;IAED,qBAAqB;IACP,mCAAa,GAA3B;QACI,OAAO,EAAE,CAAC;IACd,CAAC;IA7Dc,+BAAS,GAA0B,IAAI,CAAC;IAkE3D,4BAAC;CAnED,AAmEC,IAAA;AAnEY,sDAAqB","file":"","sourceRoot":"/","sourcesContent":["import { LoadManager } from \"../../Loading/LoadManager\";\r\n\r\n\r\nexport class JsonRoguePetsLease {\r\n    /**主线章节 */\r\n    public Chapter:number = 0 ;\r\n    /**宠物奖池ID */\r\n    public PetsLeaseID:number[] = [] ;\r\n    /**宠物组权重 */\r\n    public PetsWeight:number[] = [] ;\r\n    /**宠物品质 */\r\n    public PetsQuality:number[] = [] ;\r\n}\r\n\r\nexport class RoguePetsLeaseManager {\r\n    private static _instance: RoguePetsLeaseManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonRoguePetsLease>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():RoguePetsLeaseManager {\r\n        if(this._instance==null) {\r\n            this._instance=new RoguePetsLeaseManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('RoguePetsLease',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonRoguePetsLease成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonRoguePetsLease();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.Chapter,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonRoguePetsLease(id:number):JsonRoguePetsLease {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据主线章节获取宠物奖池ID */\r\n    public getPetsLeaseID(id:number): number[] {\r\n        return this.data.get(id).PetsLeaseID;\r\n    }\r\n    /**根据主线章节获取宠物组权重 */\r\n    public getPetsWeight(id:number): number[] {\r\n        return this.data.get(id).PetsWeight;\r\n    }\r\n    /**根据主线章节获取宠物品质 */\r\n    public getPetsQuality(id:number): number[] {\r\n        return this.data.get(id).PetsQuality;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 主线章节*/\r\n    public static getMaxChapter():number {\r\n        return 10;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n\r\n}\r\n"]}
{"version":3,"sources":["assets\\Scripts\\Task\\Data\\ThreadTaskInformation.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { LoadManager } from \"../../Loading/LoadManager\";\r\nimport { StorageKey } from \"../../Storage/StorageConfig\";\r\nimport { TheStorageManager } from \"../../Storage/StorageManager\";\r\n\r\nexport class JsonThreadTaskInformation {\r\n    /**主线任务ID */\r\n    public ThreadTaskID:number = 0 ;\r\n    /**显示顺序 */\r\n    public DisplayOrder:number = 0 ;\r\n    /**主线任务文本 */\r\n    public ThreadTaskDescription:number = 0 ;\r\n    /**道具1ID */\r\n    public PropID_1:number = 0 ;\r\n    /**道具1数量 */\r\n    public PropNum_1:number = 0 ;\r\n    /**道具2ID */\r\n    public PropID_2:number = 0 ;\r\n    /**道具2数量 */\r\n    public PropNum_2:number = 0 ;\r\n    /**任务类型 */\r\n    public TaskType:number = 0 ;\r\n    /**任务阶段 */\r\n    public TaskPhase:number = 0 ;\r\n    /**任务参数 */\r\n    public TaskParameters:number = 0 ;\r\n}\r\n\r\nexport class ThreadTaskInformationManager {\r\n    private static _instance: ThreadTaskInformationManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonThreadTaskInformation>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():ThreadTaskInformationManager {\r\n        if(this._instance==null) {\r\n            this._instance=new ThreadTaskInformationManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('ThreadTaskInformation',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonThreadTaskInformation成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonThreadTaskInformation();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.ThreadTaskID,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonThreadTaskInformation(id:number):JsonThreadTaskInformation {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据主线任务ID获取显示顺序 */\r\n    public getDisplayOrder(id:number): number {\r\n        return this.data.get(id).DisplayOrder;\r\n    }\r\n    /**根据主线任务ID获取主线任务文本 */\r\n    public getThreadTaskDescription(id:number): number {\r\n        return this.data.get(id).ThreadTaskDescription;\r\n    }\r\n    /**根据主线任务ID获取道具1ID */\r\n    public getPropID_1(id:number): number {\r\n        return this.data.get(id).PropID_1;\r\n    }\r\n    /**根据主线任务ID获取道具1数量 */\r\n    public getPropNum_1(id:number): number {\r\n        return this.data.get(id).PropNum_1;\r\n    }\r\n    /**根据主线任务ID获取道具2ID */\r\n    public getPropID_2(id:number): number {\r\n        return this.data.get(id).PropID_2;\r\n    }\r\n    /**根据主线任务ID获取道具2数量 */\r\n    public getPropNum_2(id:number): number {\r\n        return this.data.get(id).PropNum_2;\r\n    }\r\n    /**根据主线任务ID获取任务类型 */\r\n    public getTaskType(id:number): number {\r\n        return this.data.get(id).TaskType;\r\n    }\r\n    /**根据主线任务ID获取任务阶段 */\r\n    public getTaskPhase(id:number): number {\r\n        return this.data.get(id).TaskPhase;\r\n    }\r\n    /**根据主线任务ID获取任务参数 */\r\n    public getTaskParameters(id:number): number {\r\n        return this.data.get(id).TaskParameters;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 主线任务ID*/\r\n    public static getMaxThreadTaskID():number {\r\n        return 12001020;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    getMainTaskData():JsonThreadTaskInformation{\r\n        let info = null;\r\n        let index = TheStorageManager.getInstance().getNumber(StorageKey.TaskMainShowIndex,0) + 1;\r\n        this.data.forEach((v,k)=>{\r\n            if(v.DisplayOrder == index){\r\n                info = v;\r\n            }\r\n        });\r\n        return info;\r\n    }\r\n\r\n    getMainTaskDataByTypeAndIndex(type:number,index:number):JsonThreadTaskInformation{\r\n        let info = null;\r\n        this.data.forEach((v,k)=>{\r\n            if(v.TaskPhase == index  && v.TaskType == type){\r\n                info = v;\r\n            }\r\n        });\r\n        return info;\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["assets\\Scripts\\Task\\Data\\AchievenmentTask.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { LoadManager } from \"../../Loading/LoadManager\";\r\nimport { StorageKey } from \"../../Storage/StorageConfig\";\r\nimport { TheStorageManager } from \"../../Storage/StorageManager\";\r\n\r\nexport class JsonAchievenmentTask {\r\n    /**成就任务ID */\r\n    public TaskID:number = 0 ;\r\n    /**成就任务类型 */\r\n    public AchievenmentTaskType:number = 0 ;\r\n    /**任务阶段 */\r\n    public AchievenmentTaskPhase:number = 0 ;\r\n    /**成就任务文本 */\r\n    public TaskDescription:number = 0 ;\r\n    /**任务参数1 */\r\n    public TaskParameters:number = 0 ;\r\n    /**奖励道具ID */\r\n    public RewardPropID:number = 0 ;\r\n    /**奖励道具数量 */\r\n    public RewardPropNum:number = 0 ;\r\n}\r\n\r\nexport class AchievenmentTaskManager {\r\n    private static _instance: AchievenmentTaskManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonAchievenmentTask>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():AchievenmentTaskManager {\r\n        if(this._instance==null) {\r\n            this._instance=new AchievenmentTaskManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('AchievenmentTask',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonAchievenmentTask成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonAchievenmentTask();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.TaskID,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonAchievenmentTask(id:number):JsonAchievenmentTask {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据成就任务ID获取成就任务类型 */\r\n    public getAchievenmentTaskType(id:number): number {\r\n        return this.data.get(id).AchievenmentTaskType;\r\n    }\r\n    /**根据成就任务ID获取任务阶段 */\r\n    public getAchievenmentTaskPhase(id:number): number {\r\n        return this.data.get(id).AchievenmentTaskPhase;\r\n    }\r\n    /**根据成就任务ID获取成就任务文本 */\r\n    public getTaskDescription(id:number): number {\r\n        return this.data.get(id).TaskDescription;\r\n    }\r\n    /**根据成就任务ID获取任务参数1 */\r\n    public getTaskParameters(id:number): number {\r\n        return this.data.get(id).TaskParameters;\r\n    }\r\n    /**根据成就任务ID获取奖励道具ID */\r\n    public getRewardPropID(id:number): number {\r\n        return this.data.get(id).RewardPropID;\r\n    }\r\n    /**根据成就任务ID获取奖励道具数量 */\r\n    public getRewardPropNum(id:number): number {\r\n        return this.data.get(id).RewardPropNum;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 成就任务ID*/\r\n    public static getMaxTaskID():number {\r\n        return 700006;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    // 获取当前成就任务列表\r\n    getAchievenmentTaskData():JsonAchievenmentTask[]{\r\n        let info = [];\r\n        let type = 1;\r\n        let index = TheStorageManager.getInstance().getNumber(StorageKey.TaskAchievementIndex + type,0) + 1;\r\n        this.data.forEach((v,k)=>{\r\n            if(type == v.AchievenmentTaskType){\r\n                if(index == v.AchievenmentTaskPhase){\r\n                    type ++;\r\n                    index = TheStorageManager.getInstance().getNumber(StorageKey.TaskAchievementIndex + type,0) + 1;\r\n                    info.push(v);\r\n                }\r\n            }else if(type < v.AchievenmentTaskType){\r\n                info.push(null);\r\n                type++;\r\n                index = TheStorageManager.getInstance().getNumber(StorageKey.TaskAchievementIndex + type,0) + 1;\r\n                if(index == v.AchievenmentTaskPhase){\r\n                    type ++;\r\n                    index = TheStorageManager.getInstance().getNumber(StorageKey.TaskAchievementIndex + type,0) + 1;\r\n                    info.push(v);\r\n                }\r\n            }\r\n        });\r\n        if(info.length < Math.floor(AchievenmentTaskManager.getMaxTaskID() / 100000)){\r\n            info.push(null);\r\n        }\r\n        return info;\r\n    }\r\n\r\n    getNowAchievenmentTaskDataByType(type:number):JsonAchievenmentTask{\r\n        let info = null;\r\n        let index = TheStorageManager.getInstance().getNumber(StorageKey.TaskAchievementIndex + type,0) + 1;\r\n        this.data.forEach((v,k)=>{\r\n            if(type == v.AchievenmentTaskType){\r\n                if(index == v.AchievenmentTaskPhase){\r\n                    info = v;\r\n                }\r\n            }\r\n        });\r\n        return info;\r\n    }\r\n\r\n    getAchievenmentTaskDataByTypeAndIndex(type:number,index:number):JsonAchievenmentTask{\r\n        let info = null;\r\n        this.data.forEach((v,k)=>{\r\n            if(v.AchievenmentTaskPhase == index  && v.AchievenmentTaskType == type){\r\n                info = v;\r\n            }\r\n        });\r\n        return info;\r\n    }\r\n}\r\n"]}
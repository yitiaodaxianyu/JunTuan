{"version":3,"sources":["assets\\Scripts\\JsonData\\TextManagement.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ValueType, ValueUnit } from \"../Constants\";\r\nimport { LoadManager } from \"../Loading/LoadManager\";\r\nimport LanguageManager from \"../multiLanguage/LanguageManager\";\r\nimport UserData from \"../UserData\";\r\n\r\nexport class JsonTextManagement {\r\n    /**文本ID */\r\n    public Text_ID:number = 0 ;\r\n    /**英语 */\r\n    public English:string = '' ;\r\n    /**汉语 */\r\n    public Chinese:string = '' ;\r\n    /**印尼语 */\r\n    public Indonesian:string = '' ;\r\n    /**俄语 */\r\n    public Russian:string = '' ;\r\n    /**泰语 */\r\n    public Thai:string = '' ;\r\n    /**韩国 */\r\n    public Korea:string = '' ;\r\n}\r\n\r\nexport class TextManagementManager {\r\n    private static _instance: TextManagementManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonTextManagement>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():TextManagementManager {\r\n        if(this._instance==null) {\r\n            this._instance=new TextManagementManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('TextManagement',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonTextManagement成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonTextManagement();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.Text_ID,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n            UserData.getInstance().HttpPostCheckVersion();\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonTextManagement(id:number):JsonTextManagement {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据文本ID获取英语 */\r\n    public getEnglish(id:number): string {\r\n        return this.data.get(id).English;\r\n    }\r\n    /**根据文本ID获取汉语 */\r\n    public getChinese(id:number): string {\r\n       \r\n       \r\n        return this.data.get(id).Chinese;\r\n    }\r\n    /**根据文本ID获取印尼语 */\r\n    public getIndonesian(id:number): string {\r\n        return this.data.get(id).Indonesian;\r\n    }\r\n    /**根据文本ID获取俄语 */\r\n    public getRussian(id:number): string {\r\n        return this.data.get(id).Russian;\r\n    }\r\n    /**根据文本ID获取泰语 */\r\n    public getThai(id:number): string {\r\n        return this.data.get(id).Thai;\r\n    }\r\n    /**根据文本ID获取韩国 */\r\n    public getKorea(id:number): string {\r\n        return this.data.get(id).Korea;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 文本ID*/\r\n    public static getMaxText_ID():number {\r\n        return 1600010;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    /*获得富文本字符串\r\n    * textId 文本id\r\n    * value 数值\r\n    * valueType 数值类型\r\n    */\r\n    static getRichString(textId:number,value:number,valueType:ValueType):string{\r\n        //获取文本内容，查找特殊符号~替换数值\r\n        let textStr=LanguageManager.getInstance().getStrByTextId(textId);\r\n        let valueStr=this.getValueUnit(value,valueType);\r\n        //加上色值\r\n        valueStr=this.getColorStr(valueStr);\r\n        let newStr=textStr.replace(\"~\",valueStr);\r\n        return newStr;\r\n    }\r\n\r\n    /**根据数值和数值类型获得数值+单位字符串 */\r\n    static getValueUnit(value:number,type:ValueType):string{\r\n        switch(type){\r\n            case ValueType.None:return value.toFixed(1)+ValueUnit.None;\r\n            case ValueType.Percent:return (value*100).toFixed(1)+ValueUnit.Percent;\r\n            case ValueType.Thousandths:return (value*100).toFixed(1)+ValueUnit.Thousandths;\r\n            case ValueType.Second:return value.toFixed(1)+ValueUnit.Second;\r\n        }\r\n    }\r\n    /**返回适合富文本的字符串，默认绿色 */\r\n    static getColorStr(str:string):string{\r\n        return '<color=green>'+str+'</color>';\r\n    }\r\n}\r\n"]}
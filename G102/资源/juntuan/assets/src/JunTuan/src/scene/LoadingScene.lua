---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/13 10:39
---

Define = require("JunTuan.src.configs.Define")
MsgKeyData = require("JunTuan.src.macros.MsgKeyData")
JunTuanCfg = require("JunTuan.src.configs.CommonCfg")
AnimationMgr = require("src.app.Component.AnimationManager")
AudioManager = require("JunTuan.src.controllers.AudioManager")
ExternalTools = require("src.app.Component.ExternalTools")
GameDataManager = require("JunTuan.src.controllers.GameDataManager"):getInstance()
GameDataCfg = require("JunTuan.src.configs.GameDataCfg")
GameTool = require("JunTuan.src.controllers.GameTool")
PropCfg = require("JunTuan.src.configs.PropCfg")
GiftBagCfg = require("JunTuan.src.configs.GiftBagCfg")
AccountDB = require("src.app.DB.AccountDB")
GameDB = require("src.app.DB.GameDB")
NoticeController = require("JunTuan.src.controllers.NoticeController")

-- 军团大作战加载场景
local LoadingScene = class("LoadingScene", cc.Scene)

function LoadingScene:ctor()
    AudioManager:initAudioMgr()
    local name1 = "res/JunTuan/plist/public_jtdzz"
    local name2 = "res/JunTuan/plist/pop_jtdzz"
    display.loadSpriteFrames(name1 .. ".plist", name1 .. ".png")
    display.loadSpriteFrames(name2 .. ".plist", name2 .. ".png")
    self:enableNodeEvents()
    self:preloadRes()
end

function LoadingScene:quickLogin(isPhone)
    local lastAcc = AccountDB:GetLastAccount()
    local account, password, loginType
    if lastAcc then
        loginType = lastAcc.LoginType
        account = lastAcc.Account
        password = lastAcc.Password
        if isPhone then
            if password == "" or loginType ~= LOGIN_TYPE_ACCOUNT then
                return false
            end
        end
        UserData.Shared():setLoginType(loginType)
        UserData.Shared():setUserAccountPassword(account, password)
        LoginManager.Shared():ConnectServer()
        return true
    end
    return false
end

function LoadingScene:getPbBase()
    local imei, isOk = DeviceUtil.IMEI()
    if not isOk then
        -- 获取不到imei
        local androidId = DeviceUtil.getAndroidId()
        local mac = DeviceUtil.getMacAddress()
        if androidId == "" and mac == "" then
            -- 都获取不到，只能手机登录
            --self.btn_login_1:show()
            --print("获取不到imei, 只能手机登录")
            --return
        else
            UserData.Shared().phoneInfo = androidId .. mac
            UserData.Shared().androidId = androidId
            UserData.Shared().mac = mac
        end
        self.isGetIMEI = false
    else
        self.isGetIMEI = true
        UserData.Shared().imei = imei
    end

    local phoneType = 0
    if DeviceUtil.IsRealDevice() then
        phoneType = 1
    end
    local platform = 0
    if DeviceUtil.Platform() == "android" then
        platform = 1
    elseif DeviceUtil.Platform() == "ios" then
        platform = 2
    end
    local pb = {
        account = CodeUtil.MD5(DeviceUtil.IMEI()),
        machineId = imei,
        channelId = QDChannel,
        phoneMode = DeviceUtil.DeviceModel(),
        phoneSN = DeviceUtil.SerialNum(),
        isPhone = phoneType,
        version = APP_VERSION,
        platform = platform,
        mac = DeviceUtil.getMacAddress(),
        bigVersion = EXE_VERSION,
    }
    HttpManager.Shared():getPbBase(pb)
end

function LoadingScene:showUI(notQuickLogin)
    if not notQuickLogin then
        local isLoginOut = GameDB.GetNumForKey("isLoginOut", 0)
        if isLoginOut == 0 then
            if self:quickLogin() then
                self.panel_press:show()
                return
            end
        end
    end
    if not self.isGetIMEI and not UserData.Shared().phoneInfo then
        self.btn_login_1:show()
    else
        self.btn_login_1:show()
        self.btn_login_2:show()
    end
end

function LoadingScene:onEnter()
    self:addNotify()
    self:initView()
    self:getPbBase()
    --self:showUI()
    self:CheckVersionInfo()

    -- 回退键退出游戏
    local listener = cc.EventListenerKeyboard:create()
    listener:registerScriptHandler(function(keyCode, event)
        if keyCode == cc.KeyCode.KEY_BACK then
            printf("回退键退出游戏")
            confirm("确定退出游戏吗？", function ()
                local platform = DeviceUtil.Platform()
                if platform == "ios" then  -- iOS设备
                    os.exit()
                else
                    cc.Director:getInstance():endToLua()
                end
            end)
        end
    end, cc.Handler.EVENT_KEYBOARD_PRESSED)
    local eventDispatcher = self:getEventDispatcher()
    eventDispatcher:addEventListenerWithSceneGraphPriority(listener, self)
end

function LoadingScene:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.scene.loadingScene,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self.csbNode = ui
    self:addChild(ui)

    local img = ui:getChildByName("img_bg")
    img:loadTexture("res/JunTuan/img/loadingSceneBg.jpg", ccui.TextureResType.localType)

    local panel_root = ui:getChildByName("Panel_root")
    local btn_login_1 = panel_root:getChildByName("btn_login_1")        -- 手机登录
    local btn_login_2 = panel_root:getChildByName("btn_login_2")        -- 游客登录

    self.btn_login_1 = btn_login_1:hide()
    self.btn_login_2 = btn_login_2:hide()

    local function btnCall(btn)
        if btn == btn_login_1 then
            self:phoneLogin()
        elseif btn == btn_login_2 then
            self:visitorLogin()
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_login_1, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_login_2, btnCall)

    self.panel_press = panel_root:getChildByName("Panel_press"):hide()
    self.panel_press.press_bar = self.panel_press:getChildByName("press_bar")
    self.panel_press.press_bar:setPercent(0)

    self.txt_version = panel_root:getChildByName("Text_version")
    self.txt_version:setString(string.format("V.%s", APP_VERSION))
end

-- 手机号登录
function LoadingScene:phoneLogin()
    if self:quickLogin(true) then
        return
    end
    local para = {
        flag = 1
    }
    local view = require("JunTuan.src.views.PhoneView").new(para)
    ExternalTools:showView(view, self)
end

-- 游客登录
function LoadingScene:visitorLogin()
    showWaiting()
    UserData.Shared():setLoginType(LOGIN_TYPE_VISITOR)
    LoginManager.Shared():ConnectServer()
end

-- 资源预加载
function LoadingScene:preloadRes(overCall)
    local resArray = {}
    for _, v in pairs(JunTuanCfg.plist) do
        table.insert(resArray, { img = v .. ".png", plist = v .. ".plist" })
    end

    local plistArr = resArray
    local total = #plistArr
    local curLoad = 0

    local function loadCall()
        curLoad = curLoad + 1
        display.loadSpriteFrames(plistArr[curLoad].plist, plistArr[curLoad].img)
        if curLoad == total then
            self:preloadAni()
            --self:preloadSpine()
            if overCall then
                overCall()
            end
        end
    end

    for _,v in pairs(plistArr) do
        display.loadImage(v.img, loadCall)
    end
end

function LoadingScene:preloadAni()
    -- 英雄动画
    AnimationMgr:addAniToCache("boomEffect", "bombAni", 6, 0.025, 1)
    AnimationMgr:addAniToCache("snipingHit", "hero3Skill", 6, 0.025, 3)
    AnimationMgr:addAniToCache("", "hero4Skill", 4, 0.1, 3)
    AnimationMgr:addAniToCache("bullet_fire", "hero4Atk", 6, 0.1, 1)

    -- 怪物动画
    AnimationMgr:addAniToCache("addHp", "datongling_addHp", 8, 0.15, 1)
    AnimationMgr:addAniToCache("line", "datongling_line", 8, 0.15, 3)
    AnimationMgr:addAniToCache("datonglingLine", "datongling_halo", 15, 0.05, 3)
    AnimationMgr:addAniToCache("bullet", "fczs_bullet", 5, 0.05, 3)
    AnimationMgr:addAniToCache("buff", "buff_xjz", 8, 0.05, 3)
    AnimationMgr:addAniToCache("affix_zhandoukuang", "affix_zdk", 8, 0.15, 3, 5)
    AnimationMgr:addAniToCache("affix_xianjizhe", "affix_xjz", 10, 0.15, 3, 5)
    AnimationMgr:addAniToCache("affix_jiasuguaibuff", "affix_jiasu", 4, 0.15, 3)
    AnimationMgr:addAniToCache("affix_huixueguai", "affix_huixue", 14, 0.025, 3)
    AnimationMgr:addAniToCache("fire", "buff_fire", 8, 0.1, 3)
    AnimationMgr:addAniToCache("poison", "buff_poison", 6, 0.1, 3)

    -- 其他动画
    AnimationMgr:addAniToCache("exp", "exp", 8, 0.1, 3)
    AnimationMgr:addAniToCache("repel", "repel", 5, 0.25, 3, 2)
    AnimationMgr:addAniToCache("money", "money", 9, 0.025, 3)
end

function LoadingScene:preloadSpine()
    for i = 1, 22 do
        if i >= 11 and i <= 15 then
            -- 缺失的
        else
            -- 怪物骨骼动画
            local file = string.format("res/JunTuan/spine/enemy/guai_%02d", i)
            table.insert(JunTuanCfg.spineAniCache, file)
        end
    end

    for i = 1, 6 do
        -- 角色骨骼动画
        local file = string.format("res/JunTuan/spine/player/0%d_01", i)
        table.insert(JunTuanCfg.spineAniCache, file)
    end

    for _, file in pairs(JunTuanCfg.spineAniCache) do
        local json = file .. ".json"
        local atlas = file .. ".atlas"
        sp.SkeletonAnimation:readSkeletonDataToCache(file, json, atlas, 1)
    end
end

-- 显示加载界面
function LoadingScene:showLoading()
    local function overCall()
        self:removeFromParent(true)
    end
    local para = {
        overCall = overCall,
        time = 1,
        from = "loading"
    }
    local layer = require("JunTuan.src.views.GameLoadingView").new(para)
    ExternalTools:showView(layer, self)
end

function LoadingScene:CheckVersionInfo()
    local function updateProgress(list, bytesReceived, totalBytesReceived, totalBytesExpected)
        printf("正在更新，请耐心等待")
        local p = totalBytesReceived / totalBytesExpected
        self.panel_press:show()
        local txt_press = self.panel_press:getChildByName("Text_press")
        txt_press:setString("正在更新，请耐心等待")
        self.panel_press.press_bar:setPercent(p * 100)
        ExternalTools:loadingTxtDotAni(txt_press, "正在更新，请耐心等待...")
        print(list)
        print(bytesReceived, totalBytesReceived, totalBytesExpected)
    end
    local function httpSuccess()
        self.isCheckUpdate = true
        if not self.loginDelay then
            self:showUI()
            printf("-------- 版本检测完成 --------")
        end
    end
    local function httpFailed(errorCode)
        local function sureCall()
            self:showUI()
        end
        alert("网络不给力，请检查网络,是否重新连接。",sureCall,nil,true,nil)
    end
    UpdateManager.Shared():updateGame(httpSuccess, httpFailed, updateProgress)
end

function LoadingScene:addNotify()
    self.loginSuc = MessageManager.Shared():addMsg(MsgKeyData.onLoginSuc, function ()
        local scene = SceneManager:GetRunningScene()
        performWithDelay(scene, function ()
            -- 暂时没有登录注册，直接连游戏服务器
            print("暂时没有登录注册，直接连游戏服务器")
            GameManager.Shared():ConnectServer(GameManager.Shared().currRoomType)
        end, 2)
    end)
    self.loginFailed = MessageManager.Shared():addMsg(MsgKeyData.onLoginFailed, function ()
        self.panel_press:hide()
        self:showUI(true)
    end)
end

function LoadingScene:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onLoginSuc, self.loginSuc)
    MessageManager.Shared():removeMsg(MsgKeyData.onLoginFailed, self.loginFailed)
end

function LoadingScene:onExit()
    self:removeNotify()
end

return LoadingScene
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/6/22 14:29
---

-- 广播控制类
local NoticeController = {}
local obj = nil

function NoticeController.Shared()
    if not obj then
        obj = setmetatable({}, {__index = NoticeController})
        obj:Init()
    end
    return obj
end

function NoticeController:Init()
    self.noticeList = {}
    self.curMsgIdx = 1
    self.curNoticeType = 1
    self.fontSize = 20
    self.fontColor = cc.c3b(255, 255, 255)
    self.fontName = "res/YOUYUAN.TTF"
end

function NoticeController:insertData(msg, msgType)
    if not self.noticeList[msgType] then
        self.noticeList[msgType] = {}
    end
    table.insert(self.noticeList[msgType], msg)
    -- 限制最大存储20条信息防止内存溢出
    if #self.noticeList[msgType] > 20 then
        table.remove(self.noticeList[msgType], 1)
    end
end

function NoticeController:setFontInfo(fontSize, fontName)
    self.fontSize = fontSize or 35
    self.fontName = fontName or "res/YOUYUAN.TTF"
end

function NoticeController:setNoticeBg(bg_notice)
    self.bg_notice = bg_notice:hide()
    self.bg_notice.size = bg_notice:getContentSize()
end

function NoticeController:setNoticeTxt(txt_notice)
    self.txt_notice = txt_notice:hide()
end

function NoticeController:setCurNoticeType(noticeType)
    self.curNoticeType = noticeType
end

function NoticeController:startScroll()
    if self.isScrolling then
        -- 正在滚动中,不处理
        return
    end
    local list = self.noticeList[self.curNoticeType]
    if list then
        local msg = list[self.curMsgIdx]
        if not msg then
            return
        end
        self.curMsgIdx = self.curMsgIdx + 1
        if self.curMsgIdx > #list then
            self.curMsgIdx = 1
        end
        local content, strColor = getContentColor(msg,{
            {startChar = "#Y",endChar = "Y#",color = cc.c3b(245,218,84)},
            {startChar = "#R",endChar = "R#",color = cc.c3b(255,0,0)},
            {startChar = "#G",endChar = "G#",color = cc.c3b(25,218,25)},
            {startChar = "#O",endChar = "O#",color = cc.c3b(255,165,0)},
        })
        --local label = ccui.Text:create(content, "Arial", self.fontSize)
        local label = self.txt_notice:clone()
        label:show()
        label:setString(content)
        label:setTextColor(self.fontColor)
        if self.fontName then
            label:setFontName(self.fontName)
        end
        if self.fontSize then
            label:setFontSize(self.fontSize)
        end
        for _, v in ipairs(strColor) do
            if v.startIdx > 0 and v.endIdx > 1 then
                for i = v.startIdx, v.endIdx - 1 do
                    label:getLetter(i):setColor(v.color)
                end
            end
        end
        self.bg_notice:show()
        local s = self.bg_notice.size
        local w = label:getContentSize().width
        label:setAnchorPoint(0.5, 0.5)
        local cur_x = s.width + w / 2 + 10
        local cur_y = s.height * 0.5
        local p = cc.p(cur_x, cur_y)
        label:setPosition(p)
        local parent = self.txt_notice:getParent()
        parent:addChild(label)

        local disUnit = 80
        local sub = 0
        if w > s.width then
            sub = w - s.width
        end
        local to_x_1 = s.width * 0.5 - sub
        local to_x_2 = -s.width - (w / 2 + 10)
        local time1 = (cur_x - to_x_1) / disUnit
        local time2 = (to_x_1 - to_x_2) / disUnit
        label:runAction(cc.Sequence:create(
                cc.MoveTo:create(time1, cc.p(to_x_1, cur_y)),
                cc.CallFunc:create(function ()
                    self.isScrolling = false
                    self:startScroll()
                end),
                cc.MoveTo:create(time2, cc.p(to_x_2, cur_y)),
                cc.CallFunc:create(function ()
                    label:removeFromParent(true)
                    --table.remove(list, 1)
                end)
        ))
        self.isScrolling = true
    end
end

function NoticeController:startScrollTimeCountdown()
    local function update()
        self:startScroll()
    end
    if not self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.mainScheduler = scheduler:scheduleScriptFunc(update, 1, false)
    end
end

function NoticeController:stopScrollTimeCountdown()
    if self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.mainScheduler)
        self.mainScheduler = nil
    end
end

return NoticeController
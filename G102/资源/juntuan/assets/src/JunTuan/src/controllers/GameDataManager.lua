---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/14 15:55
---

local GameDataManager = class("GameDataManager")
local SegmentCfg = require("JunTuan.src.configs.SegmentCfg")
local EquipCfg = {}
local HeroCfg = require("JunTuan.src.configs.HeroCfg")
local SkillCfg = require("JunTuan.src.configs.SkillCfg")
local PetCfg = require("JunTuan.src.configs.PetConfig")
local SceneLevelCfg = require("JunTuan.src.configs.SceneLevelCfg")
local EnemyCfg = require("JunTuan.src.configs.EnemyCfg")

function GameDataManager:getInstance()
    if self._instance == nil then
        self._instance = GameDataManager.new()
        self:initData()
    end
    return self._instance
end

function GameDataManager:initData()
    self.roleActive = { 3, 2, 4, 5, 1 }               -- 英雄激活配置（最多上阵5个英雄）
    self.heroLevel = { 1, 1, 1, 1, 1, 1 }             -- 英雄当前等级（1 - 100）
    self.segmentLevel = { 1, 1, 1, 1, 1, 1 }          -- 英雄当前军衔等级（1 - 10）
    self.segment = {}                                 -- 军衔升级配置
    self.equipCfg = {}                                -- 装备品质配置
    self.equipDataCfg = {}                            -- 装备数值配置
    self.heroEquips = {}                              -- 英雄身上穿戴的装备
    self.heroBase = {}                                -- 英雄升级升级配置
    self.petLevel = {}                                -- 宠物当前等级
    self.petLevelData = {}                            -- 宠物升级数据配置
    self.petRankData = {}                             -- 宠物阶级数据配置
    self.petHandbook = {}                             -- 宠物图鉴
    self.petLineUp = {}                               -- 上阵宠物
    self.pet = {}                                     -- 已有的宠物信息
    self.totalCombat = 0                              -- 总战斗力
    self.sceneData = {}                               -- 当前场景数据
    self.levelData = {}                               -- 当前关卡数据
    self.partData = {}                                -- 当前波数据
    self.curScene = -1                                -- 当前是第几场景
    self.curLevel = -1                                -- 当前是第几关
    self.curPart = -1                                 -- 当前是第几波

    --self:initSegment()
    --self:initEquipCfg()
    --self:initHeroCfg()
    --self:initPetCfg()
    --self:initGameTxtCfg()
end

-- 初始化军衔配置表
function GameDataManager:initSegment()
    for _, s in pairs(SegmentCfg) do
        if s.Rank ~= 0 then
            if not self.segment[s.Role] then
                self.segment[s.Role] = {}
            end
            self.segment[s.Role][s.Rank] = {
                itemNum = s.ItemNum,
                gem = s.Gem,
                money = s.Money,
                valueType = s.ValueType,
                value = s.Value
            }
        end
    end
end

-- 初始化装备配置表
function GameDataManager:initEquipCfg()
    self.equipCfg = EquipCfg.Role_EquipCfg
    self.equipDataCfg = {}
    for _, v in pairs(EquipCfg.Role_Equip) do
        self.equipDataCfg[v.Id] = v
    end
    for i = 1, 6 do
        self.heroEquips[i] = {}
        for j = 1, 3 do
            local equip = {
                id = 0,
                type1 = 0,      -- 装备附加属性类型
                type2 = 0,
                type3 = 0
            }
            self.heroEquips[i][j] = equip
        end
    end
end

-- 初始化英雄配置表
function GameDataManager:initHeroCfg()
    local levelUpCfg = HeroCfg.LevelUpCfg
    self.G_base = HeroCfg.HeroDataBase
    for _, v in pairs(levelUpCfg) do
        if not self.heroBase[v.Type] then
            self.heroBase[v.Type] = {}
        end
        if not self.heroBase[v.Type][v.Level] then
            self.heroBase[v.Type][v.Level] = {}
        end
        self.heroBase[v.Type][v.Level].Atk = v.Atk
        self.heroBase[v.Type][v.Level].MoneyCost = v.MoneyCost
    end
end

-- 初始化宠物配置
function GameDataManager:initPetCfg()
    self.petHandbook = clone(PetCfg.PetHandbook)
    for i = 1, 10 do
        self.petLevel[i] = 0
    end

    for _, v in pairs(PetCfg.PetUpData) do
        if not self.petLevelData[v.Type] then
            self.petLevelData[v.Type] = {}
        end
        self.petLevelData[v.Type][v.Level] = {
            Atk = v.Atk,
            MoneyCost = v.MoneyCost
        }
    end

    for _, v in pairs(PetCfg.PetRankData) do
        if not self.petRankData[v.Type] then
            self.petRankData[v.Type] = {}
        end
        self.petRankData[v.Type][v.Rank] = {
            Interval = v.Interval,
            SkillCd = v.SkillCd,
            UniqueValue = v.UniqueValue,
            IllustratedAtt = v.IllustratedAtt,
        }
    end
end

-- 初始化游戏文本配置
function GameDataManager:initGameTxtCfg()
    --local gameTxtCfg = JsonUtil.decode()
end

-- 设置关卡信息
function GameDataManager:setSceneLevelInfo(curScene, curLevel, curPart)
    self.curScene = curScene
    self.curLevel = curLevel
    self.curPart = curPart
    self.sceneData, self.levelData = self:getSceneLevelData(curScene, curLevel)
    self.partData = self.levelData[curPart]
end

-- 设置英雄装备
function GameDataManager:setHeroEquip(heroType, equipPos, equipID, subData)
    self.heroEquips[heroType][equipPos].id = equipID
    if subData then
        self.heroEquips[heroType][equipPos].type1 = subData[1]
        self.heroEquips[heroType][equipPos].type2 = subData[2]
        self.heroEquips[heroType][equipPos].type3 = subData[3]
    end
end

-- 获得宠物
function GameDataManager:setPetData(petType, petRank)
    if not self.pet[petType] then
        self.pet[petType] = {}
    end
    local petInfo = {
        id = self:getPetID(petType, petRank),
        stage = petRank
    }
    self.pet[petType][petRank] = petInfo
end

-- 上阵宠物
function GameDataManager:setPetLineUp(pos, petInfo)
    self.petLineUp[pos] = petInfo
end

-- 获取英雄当前等级
function GameDataManager:getHeroLevel(heroType)
    return self.heroLevel[heroType]
end

-- 获取英雄攻击类型
function GameDataManager:getHeroAtkType(heroType)
    local data = self.G_base[heroType]
    return data.AttType
end

-- 获取英雄当前军衔等级技能加成
function GameDataManager:getSegmentSkillAdd(heroType, segmentLevel)
    for _, v in pairs(SkillCfg.Skill_Special) do
        if v.Role == heroType and v.Lv == segmentLevel then
            return v
        end
    end
end

-- 计算战斗力
-- heroType : 英雄类型（1-6）
function GameDataManager:getCombat(heroType)
    local segmentData = self:getRoleSegment(heroType)
    local equipData = self:getRoleEquipData(heroType)[heroType]
    local segmentInfo = segmentData[heroType]
    local combat = 0
    if self.heroLevel[heroType] == 0 then
        return combat
    end
    local curLevel = self:getHeroLevel(heroType)
    local atk = self.heroBase[heroType][curLevel].Atk + equipData.damage
    local add = self.G_base[heroType].PowerBaseAttNum / 1e4
    local attNumPer = equipData.attNumPer
    local damagePer = segmentInfo.damagePer + equipData.damagePer
    local attackSpeed = equipData.attackSpeed
    local interval = 1e3 / self.G_base[heroType].Interval
    if 5 == heroType then
        interval = 1e3 / 5880
    end
    local powerExAtt = equipData.powerExAtt
    local critRate = equipData.critRate + segmentInfo.critRate
    local critHit = equipData.critMultiples + segmentInfo.critMultiples + self.G_base[heroType].CritHit / 1e4
    local p = atk * (1 + attackSpeed) * (1 + attNumPer) * (1 + damagePer) * interval * add
    local info = self:getSegmentSkillAdd(heroType, self.segmentLevel[heroType])
    local I = info.Param1 / 1e4             -- 技能伤害比列
    local h = info.Param2 / 1e3
    local N = info.PowerHumanNum / 1e4
    local f = info.PowerBulletNum           -- 技能子弹数
    if 1 == heroType then
        combat = p * (powerExAtt + 1 + critRate * (critHit - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f
    elseif 2 == heroType then
        combat = p * (1 + powerExAtt) * (1 + critRate * (critHit - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f
    elseif 3 == heroType then
        combat = p * (1 + critRate / (1 - equipData.personal2) * (critHit - 1) + equipData.personal2 * (equipData.personal1 - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f
    elseif 4 == heroType then
        combat = p * (powerExAtt + 1 + critRate * (critHit - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f * h * 170 / (h + 17)
    elseif 5 == heroType then
        combat = p * (1 + powerExAtt) * (1 + critRate * (critHit - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f * 10
    elseif 6 == heroType then
        combat = p * (powerExAtt + 1 + critRate * (critHit - 1))
        combat = combat + .033333 * atk * (1 + damagePer) * I * N * f * 2
    end
    return math.round(combat)
end

-- 获取军衔信息
-- curLevel : 当前军衔等级（1 - 10）
function GameDataManager:getRoleSegment(heroType)
    local property = { "damage", "attackSpeed", "critRate", "critMultiples", "damagePer" }
    local roleSegmentData = {}
    if heroType ~= 0 then
        roleSegmentData[heroType] = {
            damage = 0,
            attackSpeed = 0,
            critRate = 0,
            critMultiples = 0,
            damagePer = 0
        }
        for i, segInfo in pairs(self.segment[heroType]) do
            if i <= self.segmentLevel[heroType] then
                local data = roleSegmentData[heroType][property[segInfo.valueType]]
                data = data + segInfo.value / 1e4
                roleSegmentData[heroType][property[segInfo.valueType]] = data
            else
                break
            end
        end
    end
    return roleSegmentData
end

-- 获取英雄装备信息
function GameDataManager:getRoleEquipData(heroType)
    local property = {
        [5] = "damagePer",
        [6] = "attackSpeed",
        [3] = "critRate",
        [7] = "critMultiples",
    }
    local roleEquipData = {}
    if heroType ~= 0 then
        roleEquipData[heroType] = {
            damage = 0,                 -- 装备提供的攻击力
            attackSpeed = 0,            -- 装备提供的攻速
            critRate = 0,               -- 装备提供的暴击率
            critMultiples = 0,          -- 装备提供的暴击伤害
            personal1 = 0,              -- 英雄特有属性1
            personal2 = 0,              -- 英雄特有属性2
            damagePer = 0,              -- 装备提供的攻击力加成
            attNumPer = 0,              -- 装备提供的额外攻击次数
            powerExAtt = 0              -- 装备提供的特有属性2
        }
        local equip1 = self.heroEquips[heroType][1]     -- 武器
        local equip2 = self.heroEquips[heroType][2]     -- 衣服
        local equip3 = self.heroEquips[heroType][3]     -- 配件

        -- 装备具体属性数据表
        local equip1Data = self.equipDataCfg[equip1.id] -- 武器
        local equip2Data = self.equipDataCfg[equip2.id] -- 衣服
        local equip3Data = self.equipDataCfg[equip3.id] -- 配件
        self:initRoleEquipData(roleEquipData, property, equip1Data, equip1, heroType)
        self:initRoleEquipData(roleEquipData, property, equip2Data, equip2, heroType)
        self:initRoleEquipData(roleEquipData, property, equip3Data, equip3, heroType)
    end
    return roleEquipData
end

-- 参数说明: 装备配置数据，装备类型配置，玩家类型（1-6）
function GameDataManager:initRoleEquipData(roleEquipData, property, equipDataCfg, equipTypeCfg, heroType)
    if equipDataCfg then
        local damage = roleEquipData[heroType].damage
        damage = damage + equipDataCfg.MainValue
        roleEquipData[heroType].damage = damage
        local attNumPer = roleEquipData[heroType].attNumPer
        local powerExAtt = roleEquipData[heroType].powerExAtt
        local pNum = equipDataCfg.PowerAttNumPercent / 1e4
        local pea = equipDataCfg.PowerExAtt / 1e4
        attNumPer = attNumPer + pNum
        powerExAtt = powerExAtt + pea
        roleEquipData[heroType].attNumPer = pNum
        roleEquipData[heroType].powerExAtt = pea
        if equipDataCfg.Rank >= 2 then
            if 6 == equipDataCfg.SubType then
                local attackSpeed = roleEquipData[heroType].attackSpeed
                attackSpeed = attackSpeed + 5
                local tmp
                if attackSpeed == heroType then
                    tmp = Define.dartCombat[heroType] / 1e4
                else
                    tmp = equipDataCfg.SubValue / 1e4
                end
            else
                if 8 == equipDataCfg.SubType or 10 == equipDataCfg.SubType or 12 == equipDataCfg.SubType or
                        14 == equipDataCfg.SubType or 16 == equipDataCfg.SubType or 18 == equipDataCfg.SubType then
                    roleEquipData[heroType].personal1 = equipDataCfg.SubValue / 1e4
                else
                    if 9 == equipDataCfg.SubType or 11 == equipDataCfg.SubType or 13 == equipDataCfg.SubType or
                            15 == equipDataCfg.SubType or 17 == equipDataCfg.SubType or 19 == equipDataCfg.SubType then
                        roleEquipData[heroType].personal2 = equipDataCfg.SubValue / 1e4
                    end
                end
            end
            if equipDataCfg.Rank >= 4 then
                local typeCfg = equipTypeCfg.type1
                local exType = property[equipDataCfg["ExType" .. typeCfg]]
                local tmp = roleEquipData[heroType][exType]
                tmp = tmp + equipDataCfg["Exvalue" .. typeCfg] * self.equipCfg[1].Num / 1e4 / 1e4
                roleEquipData[heroType][exType] = tmp
                if equipDataCfg.Rank >= 7 then
                    typeCfg = equipTypeCfg.type2
                    exType = property[equipDataCfg["ExType" .. typeCfg]]
                    tmp = roleEquipData[heroType][exType]
                    tmp = tmp + equipDataCfg["Exvalue" .. typeCfg] * self.equipCfg[2].Num / 1e4 / 1e4
                    roleEquipData[heroType][exType] = tmp
                    if equipDataCfg.Rank >= 10 then
                        typeCfg = equipTypeCfg.type3
                        exType = property[equipDataCfg["ExType" .. typeCfg]]
                        tmp = roleEquipData[heroType][exType]
                        tmp = tmp + equipDataCfg["Exvalue" .. typeCfg] * self.equipCfg[3].Num / 1e4 / 1e4
                        roleEquipData[heroType][exType] = tmp
                    end
                end
            end
        end
    end
end

-- 获取阵容战力
function GameDataManager:getLineupCombat()
    local combat = 0
    for _, v in pairs(self.roleActive) do
        if v ~= 0 then
            combat = combat + self:getCombat(v)
        end
    end
    return combat
end

-- 获取总战力
function GameDataManager:getTotalCombat()
    local e = 0
    for i = 1, 6 do
        e = e + self:getCombat(i)
    end
    e = e + self:getPetsCombat()
    if self.totalCombat ~= 0 and self.totalCombat < e then
        local up = e - self.totalCombat
        -- 此处显示战力提升动画
        -- self.gameView:showCombatUpAni(up)
    end
    self.totalCombat = e
    return e
end

-- 获取宠物id
-- petType : 宠物类型（1-10）
-- petRank : 宠物阶级（1-10）
function GameDataManager:getPetID(petType, petRank)
    return 1e4 + petType * 100 + petRank
end

-- 根据宠物id获取宠物类型
function GameDataManager:getPetType(petID)
    return math.floor(petID / 100 % 100)
end

-- 根据宠物id获取宠物阶级
function GameDataManager:getPetType(petID)
    return math.floor(petID % 100)
end

-- 获取宠物总战力(不计算宠物图鉴攻击力加成)
function GameDataManager:getPetsCombat()
    local combat = 0
    for _, data in pairs(self.pet) do
        for _, petInfo in pairs(data) do
            combat = combat + self:getSinglePetCombat(petInfo)
        end
    end
    return math.floor(combat)
end

-- 获取单个宠物战力
function GameDataManager:getSinglePetCombat(petInfo)
    local t = 1
    -- petInfo.id(100101 - 101001)
    local petType = math.floor(petInfo.id / 100 % 100)
    local petRank = math.floor(petInfo.id % 100)
    if 3 ~= petType and 9 ~= 0 then
        t = 2
    end
    local rankInfo = self.petRankData[petType][petRank]
    local curLevel = self.petLevel[petType]
    local atk = self.petLevelData[petType][curLevel].Atk
    local interval = 1 / rankInfo.Interval
    local power = PetCfg.PetDataBase[petType].PowerBaseAttNum / 1e4 * t
    return math.floor(atk * interval * 1e4 * power)
end

-- 获得上阵宠物战力
function GameDataManager:getFightPetsCombat()
    local combat = 0
    local add = self:getTotalAttackGainValue() / 1e4 + 1    -- 总攻击力加成
    for _, v in pairs(self.petLineUp) do
        combat = combat + self:getSinglePetCombat(v)
    end
    return math.floor(add * combat)
end

-- 获取宠物攻击力加成
function GameDataManager:getTotalAttackGainValue()
    local add = 0
    for petType, info in pairs(self.petHandbook) do
        local petRank = 0
        for _, flag in pairs(info) do
            petRank = petRank + 1
            if flag == 3 then
                add = add + self.petRankData[petType][petRank].IllustratedAtt
            end
        end
    end
    return add
end

function GameDataManager:getLevelCfgData(id)
    for _, v in pairs(SceneLevelCfg.LevelCfg) do
        if v.Id == id then
            return v
        end
    end
end

-- 获得关卡数据
-- curScene : 当前场景
function GameDataManager:getSceneLevelData(curScene, level)
    local sceneData = {}
    local levelData = {}
    for _, v in pairs(SceneLevelCfg.SceneDataCfg) do
        if v.Scene == curScene and v.Checkpoint == level then
            sceneData = v
            break
        end
    end
    for _, v in pairs(sceneData.ArrayID) do
        local levelCfg = self:getLevelCfgData(v)
        if levelCfg then
            levelCfg.MonsterIds = {}
            levelCfg.MonsterNums = {}
            for i = 1, 7 do
                local id = "MonsterId".. i
                local num = "MonsterNum".. i
                if levelCfg[id] > 0 and levelCfg[num] > 0 then
                    table.insert(levelCfg.MonsterIds, levelCfg[id])
                    table.insert(levelCfg.MonsterNums, levelCfg[num])
                end
            end
            table.insert(levelData, levelCfg)
            if sceneData.PartnerEffect == 1 then
                break
            end
        end
    end
    self.sceneData = sceneData
    self.levelData = levelData
    return sceneData, levelData
end

-- 获得怪物配置
function GameDataManager:getEnemyDataCfg(enemyType)
    local enemyDataCfg = EnemyCfg.EnemyDataCfg
    for _, v in pairs(enemyDataCfg) do
        if v.MonsterID == enemyType then
            return v
        end
    end
end

-- 获得怪物附加配置
function GameDataManager:getEnemyAffixCfg(enemyType)
    local affixConfig = UserData.Shared().gameCfg[Define.ENUM_CFG_KEY.MONSTER_INFO]
    for _, v in pairs(affixConfig) do
        if v.MonsterTypeId == enemyType then
            local data = {
                MosterId = v.MonsterTypeId,
                Type = v.MonsterId,
                Param = ExternalTools:getTableFromStr(v.BuffValue),
            }
            return data
        end
    end
    printf("没有找到对应的怪物附加buff, id is %d", enemyType)
end

-- 获取英雄信息
function GameDataManager:getHeroInfo(heroType)
    local segmentData = self:getRoleSegment(heroType)
    local equipData = self:getRoleEquipData(heroType)[heroType]
    local segmentInfo = segmentData[heroType]
    local curLevel = self:getHeroLevel(heroType)
    local atk = self.heroBase[heroType][curLevel].Atk + equipData.damage        -- 攻击力：基础+装备
    local attNumPer = equipData.attNumPer                                       -- 装备提升的伤害
    local damagePer = segmentInfo.damagePer + equipData.damagePer               -- 军衔提升的伤害
    local attackSpeed = equipData.attackSpeed
    local interval = 1e3 / self.G_base[heroType].Interval
    if 5 == heroType then
        interval = 1e3 / 5880
    end

    local critRate = equipData.critRate + segmentInfo.critRate
    local critHit = equipData.critMultiples + segmentInfo.critMultiples + self.G_base[heroType].CritHit / 1e4
    local info = self:getSegmentSkillAdd(heroType, self.segmentLevel[heroType])
    local I = info.Param1 / 1e4             -- 技能伤害比列
    local f = info.PowerBulletNum           -- 技能子弹数

    local valueInfo = {}
    valueInfo.roleId = heroType
    valueInfo.heroRank = self.segmentLevel[heroType]
    valueInfo.attack = atk * (1 + attNumPer) * (1 + damagePer)
    valueInfo.interval = interval * (1 + attackSpeed)
    valueInfo.critRate = 0.35--critRate
    valueInfo.critMultiples = critHit
    valueInfo.attackPer = 1
    valueInfo.attackSpeedPer = 1
    valueInfo.personal1 = math.random(0, 100)
    valueInfo.personal2 = math.random(0, 100)
    valueInfo.skillParam1 = I
    valueInfo.skillParam2 = f
    return valueInfo
end

function GameDataManager:onExit()
    self:initData()
    self._instance = nil
end

return GameDataManager
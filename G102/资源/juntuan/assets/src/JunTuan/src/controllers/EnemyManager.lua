---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/9 10:23
---

local Enemy = require("JunTuan.src.models.Enemy")
local BoxEnemy = require("JunTuan.src.models.BxGuai")
local EnemyManager = class("EnemyManager")

function EnemyManager:getInstance()
    if self._instance == nil then
        self._instance = EnemyManager.new()
        self._instance:initData()
    end
    return self._instance
end

function EnemyManager:addNotify()
    self.sszTrigger = MessageManager.Shared():addMsg(MsgKeyData.shuangShengZiTrigger, function (data)
        local enemy = data.enemy
        self:shuangShengZiTrigger(enemy)
    end)
    self.muTiTrigger = MessageManager.Shared():addMsg(MsgKeyData.muTiZiTrigger, function (data)
        local enemy = data.enemy
        self:muTiBornTrigger(enemy)
    end)
end

function EnemyManager:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.shuangShengZiTrigger, self.sszTrigger)
    MessageManager.Shared():removeMsg(MsgKeyData.muTiZiTrigger, self.muTiTrigger)
end

function EnemyManager:initData()
    self.enemyTable = {}            -- 实时怪物表
    self.cacheEnemyList = {}        -- 怪物缓存表
    self.boxEnemyTable = {}
    self.productEnemiesLock = false
    self.gameDataMgr = GameDataManager:getInstance()
end

function EnemyManager:setGameView(_gameView)
    self.gameView = _gameView
end

function EnemyManager:createEnemy(enemyInfo)
    --local enemy = self:getEnemyFromCache(enemyInfo.type, enemyInfo.isBoss)
    --if not enemy then
        local enemy = Enemy.new(enemyInfo)
        enemy:setManager(self)
    --else
    --    enemy:show()
    --    enemy:initData(enemyInfo)
    --    enemy:resetAnimation()
    --    enemy.isCache = true
    --end
    table.insert(self.enemyTable, enemy)
    return enemy
end

-- 三选二宝箱怪
function EnemyManager:createSkillEnemy()
    if #self.boxEnemyTable >= 3 then
        return
    end
    for i = 1, 3 do
        local enemy = BoxEnemy.new()
        enemy:setEnemyMgr(self)
        self.gameView:addBoxEnemy(enemy)
        table.insert(self.boxEnemyTable, enemy)
    end
end

-- 本地数据生成怪物
function EnemyManager:productEnemy(enemyData, hpUp, isBoss, money)
    local r = self.gameDataMgr.sceneData
    local hp = (r.MonsterHP * enemyData.ModulusHP * hpUp * 1e-4) or 1
    local enemyInfo = {
        id = enemyData.MonsterID, attType = enemyData.AttType, type = enemyData.MonsterIcon,
        state = Define.state.born, hp = hp, maxHp = hp,
        money = money or 0, speed = enemyData.ModulusSpeed or 1, resist = 1e-4 * enemyData.ModulusReBack or 0,
        isPassenger = false, isBoss = false, IconZoom = enemyData.IconZoom, MonsterEffectId = enemyData.MonsterEffectId,
    }
    if isBoss then
        enemyInfo.isBoss = true
    else
        enemyInfo.isBoss = false
    end
    local enemy = self:createEnemy(enemyInfo)
    self.gameView:addEnemy(enemy)
    printf("---------- 生成怪物 ----------")
    printf("id is %d", enemyInfo.id)
    printf("attType is %d", enemyInfo.attType)
    printf("type is %d", enemyInfo.type)
    printf("hp is %d", enemyInfo.hp)
    printf("money is %d", enemyInfo.money)
    printf("speed is %d", enemyInfo.speed)
    printf("resist is %d", enemyInfo.resist)
    printf("isBoss is %d", enemyInfo.isBoss and 1 or 0)
    printf("---------- 生成怪物 ----------")
end

-- 接服务端数据生成怪物
function EnemyManager:productEnemyEx(enemyData)
    local enemyInfo = {
        id = enemyData.monsterId, attType = enemyData.attType, type = enemyData.monsterId,
        state = Define.state.born, hp = enemyData.maxHP, maxHp = enemyData.maxHP,
        money = enemyData.money, speed = enemyData.speed, resist = enemyData.resist, nums = enemyData.nums,
        isPassenger = false, isBoss = (enemyData.isBoss == 1), IconZoom = enemyData.iconZoom, MonsterEffectId = enemyData.monsterEffectId,
    }
    local enemy = self:createEnemy(enemyInfo)
    self.gameView:addEnemy(enemy)
end

-- 根据配置生成怪物
-- curScene: 当前场景，curLevel: 当前关数，curPart: 当前波数
function EnemyManager:productEnemies(sceneData, partData)
    if not self.productEnemiesLock then
        local function productEnemy(sceneData, partData)
            if partData.BossId[1] > 0 then
                -- Boss来临提示
                self.gameView:bossComingTip(true)
            end
            if 1 == sceneData.PartnerEffect then
                -- 三选二宝箱怪
                self:createSkillEnemy()
            else
                local partNum = #sceneData.ArrayID
                local dropMoney = sceneData.MonsterMoney / partNum
                local a = 0
                for i = 1, partData.BaseMosterNum do
                    local len = #partData.BaseMoster
                    local enemyType = partData.BaseMoster[math.random(1, len)]
                    local enemyDataCfg = self.gameDataMgr:getEnemyDataCfg(enemyType)
                    a = a + enemyDataCfg.ModulusHP
                end
                if partData.BossId[1] > 0 then
                    for i, bossNum in pairs(partData.BossNum) do
                        for j = 1, bossNum do
                            local enemyType = partData.BossId[i]
                            local enemyDataCfg = self.gameDataMgr:getEnemyDataCfg(enemyType)
                            a = a + enemyDataCfg.ModulusHP * partData.BossHp[i] / 1e4
                            local v = math.floor(dropMoney * (enemyDataCfg.ModulusHP * partData.BossHp[i] / 1e4 / a))
                            self:productEnemy(enemyDataCfg, partData.BossHp[i] / 1e4, true, v)
                        end
                    end
                end
                local u = #partData.BaseMoster
                local c = partData.BaseMosterNum
                local m = {}
                for i = 1, u do
                    m[i] = partData.BaseMoster[i]
                end
                for _, v in pairs(m) do
                    for i = 0, c do
                        local enemyDataCfg = self.gameDataMgr:getEnemyDataCfg(v)
                        if a == 0 then
                            a = enemyDataCfg.ModulusHP
                        end
                        local k = math.floor(dropMoney * (enemyDataCfg.ModulusHP / a))
                        self:productEnemy(enemyDataCfg, 1, false, k)
                    end
                end
                local p = {}
                local t = {}
                for i = 1, #partData.MonsterIds do
                    p[i] = partData.MonsterIds[i]
                    t[i] = partData.MonsterNums[i]
                end
                for i = partData.PickNum, 1, -1 do
                    local d = math.random(1, #p)
                    local b = p[d] or 0
                    local a = t[d] or 0
                    local r = self.gameDataMgr:getEnemyDataCfg(b)
                    for j = 1, a do
                        self:productEnemy(r, 1)
                    end
                    table.remove(p, 1)
                    table.remove(t, 1)
                end
            end
            self.productEnemiesLock = false
        end
        self.productEnemiesLock = true
        --local sceneData, partData = self.gameDataMgr.sceneData, self.gameDataMgr.partData
        productEnemy(sceneData, partData)
    end
end

function EnemyManager:productEnemiesEx(PartnerEffect, enemyInfoList)
    if not self.productEnemiesLock then
        self.productEnemiesLock = true
        if PartnerEffect == 1 then
            -- 三选二宝箱怪
            self:createSkillEnemy()
        else
            for _, v in ipairs(enemyInfoList) do
                local num = v.nums
                for i = 1, num do
                    self:productEnemyEx(v)
                    self.isOnDesAll = false
                end
            end
        end
        self.productEnemiesLock = false
    end
end

function EnemyManager:shuangShengZiTrigger(enemy)
    if enemy.shuangShengZi.num > 0 then
        enemy.shuangShengZi.num = enemy.shuangShengZi.num - 1
        for i = 1, 2 do
            local enemyInfo = enemy.enemyInfo
            enemyInfo.isBaby = true
            local newEnemy = self:createEnemy(enemyInfo)
            newEnemy:initShuangShengZiByFather(enemy)
            newEnemy:shuangShengZiBorn(i, enemy)
            self.gameView:addEnemy(newEnemy)
        end
        GameTool:wordTip(enemy, "fenlie")
    end
end

function EnemyManager:muTiBornTrigger(enemy)
    if enemy.muTi.num > 0 then
        for i = 1, enemy.muTi.num do
            local enemyInfo = enemy.enemyInfo
            enemyInfo.isBaby = true
            enemyInfo.isBoss = false
            local newEnemy = self:createEnemy(enemyInfo)
            newEnemy:muTiBorn(enemy)
            self.gameView:addEnemy(newEnemy)
        end
        GameTool:wordTip(enemy, "fuhua")
    end
end

function EnemyManager:removeBoxEnemy(enemy)
    table.removebyvalue(self.boxEnemyTable, enemy)
    if #self.boxEnemyTable <= 0 then
        self.gameView:showThree_two()
    end
end

function EnemyManager:removeEnemy(enemy, isRemoveT)
    if isRemoveT then
        table.removebyvalue(self.enemyTable, enemy)
    end
    if not tolua.isnull(enemy) then
        enemy:die()
       --self:cacheEnemy(enemy)
    end
    if #self.enemyTable == 0 then
        if not self.isOnDesAll then
            self.isOnDesAll = true
            MessageManager.Shared():postMsg(MsgKeyData.onDesAllEnemy)
        end
    end
end

-- 缓存怪物对象
function EnemyManager:cacheEnemy(enemy)
    if not self.cacheEnemyList[enemy.type] then
        self.cacheEnemyList[enemy.type] = {}
    end
    table.insert(self.cacheEnemyList[enemy.type], enemy)
end

-- 从缓存池中取对象
function EnemyManager:getEnemyFromCache(type, isBoss)
    local cacheList = self.cacheEnemyList[type]
    if not cacheList or #cacheList < 1 then
        return nil
    end
    if isBoss then
        for i, v in pairs(cacheList) do
            if v.isBoss then
                table.remove(self.cacheEnemyList[type], i)
                return v
            end
        end
    end
    local enemy = cacheList[1]
    if enemy then
        table.remove(self.cacheEnemyList, 1)
    end
    return enemy
end

function EnemyManager:removeAllEnemy()
    for _, enemy in pairs(self.enemyTable) do
        self:removeEnemy(enemy, false)
    end
    self.enemyTable = {}
end

-- 清空缓存列表
function EnemyManager:clearCacheList()
    for _, v in pairs(self.cacheEnemyList) do
        v:removeFromParent(true)
    end
    self.cacheEnemyList = {}
end

-- 清空怪物列表
function EnemyManager:clearEnemyList()
    for _, v in pairs(self.enemyTable) do
        v:removeFromParent(true)
    end
    self.enemyTable = {}
end

-- 击退所有怪物
function EnemyManager:repelAllEnemy()
    for _, enemy in pairs(self.enemyTable) do
        self.gameView:repelEnemy(enemy)
    end
end

-- 冰封所有怪物
function EnemyManager:frozenAllEnemy()
    for _, enemy in pairs(self.enemyTable) do
        enemy:beFrozen()
    end
    for _, enemy in pairs(self.boxEnemyTable) do
        enemy:beFrozen()
    end
end

-- 解除冰封
function EnemyManager:unFrozenAllEnemy()
    for _, enemy in pairs(self.enemyTable) do
        enemy:removeFrozen()
    end
    for _, enemy in pairs(self.boxEnemyTable) do
        enemy:removeFrozen()
    end
end

-- 轰炸所有怪物
function EnemyManager:bombAllEnemy()
    for _, enemy in pairs(self.enemyTable) do
        enemy:beBomb()
    end
    for _, enemy in pairs(self.boxEnemyTable) do
        enemy:beHit()
    end
end

function EnemyManager:onFrame(dt)
    local removeT = {}
    for _, v in pairs(self.enemyTable) do
        v:updateState(dt * 1e3)
        if v.state == Define.state.die then
            if not v.isFeiTing then
                -- 飞艇需要播完动画后才移除
                table.insert(removeT, v)
            end
        end
    end
    for _, v in pairs(self.boxEnemyTable) do
        v:update(dt)
    end
    for _, v in pairs(removeT) do
        self:removeEnemy(v, true)
    end
end

function EnemyManager:onExit()
    self:removeNotify()
    self:clearEnemyList()
    self:initData()
    self._instance = nil
end

return EnemyManager
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/9 10:23
---

local Hero = require("JunTuan.src.models.Hero")
local HeroManager = class("HeroManager")

function HeroManager:getInstance()
    if self._instance == nil then
        self._instance = HeroManager.new()
        self._instance:initData()
    end
    return self._instance
end

function HeroManager:initData()
    self.heroTable = {}
    self.isSkillRecover = true
    self.gameDataMgr = GameDataManager:getInstance()
    self:addNotify()
end

function HeroManager:createHero(heroInfo, size)
    local hero = Hero.new(heroInfo, size)
    table.insert(self.heroTable, hero)
    return hero
end

function HeroManager:checkAtkEnemy(hero)
    local enemy = hero.atkEnemy
    if enemy then
        local flag = (not tolua.isnull(enemy))
        if flag and enemy.state == Define.state.die then
            hero:atkEnemyDie()
        end
    end
end

-- 设置能否技能恢复
function HeroManager:setSkillRecover(flag)
    self.isSkillRecover = flag
end

-- 技能能量恢复
function HeroManager:onSkillRecover(hero, dt)
    if self.isSkillRecover then
        hero:skillRecover(dt)
    end
end

function HeroManager:onFrame(dt)
    for _, hero in pairs(self.heroTable) do
        if hero.state ~= Define.state.ult then
            -- 普攻
            hero.atkCool = hero.atkCool - dt
            --local atkSpeed = GameTool:dataDecrypt(hero.atkSpeed)
            --local up = GameTool:dataDecrypt(hero.attackSpeedPer)
            local atkSpeed = hero.atkSpeed
            local up = hero.attackSpeedPer
            atkSpeed = (1 + up) * atkSpeed
            if hero.atkCool <= 0 then
                hero.atkCool = 1 / atkSpeed
                local num = 1
                if hero.heroType == 3 then
                    -- 狙击兵单独判断
                    if hero:forwardAddAtkCheck() then
                        -- 正向加一, 多攻击一次
                        num = num + 1
                    end
                    if hero.isXXJY then
                        -- 斜向加一, 多攻击两次
                        num = num + 2
                    end
                end
                for i = 1, num do
                    hero:heroNormalAtk(num, i ~= 1)
                end
            end
            if hero.heroType == 5 then
                local atkNum = 1 / atkSpeed
                local percent = (1 - hero.atkCool / atkNum)  * 100
                hero.press_bar:setPercentage(percent)
            end
        end
        self:onSkillRecover(hero, dt)
        self:checkAtkEnemy(hero)
    end
end

function HeroManager:getHeroByID(heroType)
    for _, v in pairs(self.heroTable) do
        if v.heroType == heroType then
            return v
        end
    end
end

-- 所有角色进入狂暴状态
function HeroManager:allHeroCrazy()
    for _, v in pairs(self.heroTable) do
        v:crazyState()
    end
end

-- 所有角色取消狂暴状态
function HeroManager:allHeroUnCrazy()
    for _, v in pairs(self.heroTable) do
        v:removeCrazyState()
    end
end

function HeroManager:addNotify()
    self.skillOverMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleSkillOver, function (data)
        local hero = self:getHeroByID(data.heroType)
        if hero then
            hero:handleSkillOver(data)
        end
    end)
    self.killEnemyMsg = MessageManager.Shared():addMsg(MsgKeyData.onKillEnemy, function (data)
        local hero = self:getHeroByID(data.heroType)
        if hero then
            hero:handleKillEnemy(data)
        end
    end)
    self.heroDataUpdateMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleUpdate, function (data)
        local hero = self:getHeroByID(data.roleId)
        if hero then
            hero:handleRoleUpdate(data.buff)
        end
    end)
end

function HeroManager:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleSkillOver, self.skillOverMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onKillEnemy, self.killEnemyMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleUpdate, self.heroDataUpdateMsg)
end

function HeroManager:onExit()
    self:removeNotify()
    self:initData()
    self._instance = nil
end

return HeroManager
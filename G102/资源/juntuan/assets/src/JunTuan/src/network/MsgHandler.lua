---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/28 15:54
---

-- 游戏消息处理

local MsgSendMgr = require("src.JunTuan.src.network.MsgSendMgr")
local MsgHandler = class("MsgHandler")
local cmdGame = require("src.JunTuan.src.network.CMD_Game")

function MsgHandler:getInstance()
    if nil == _G["JunTuanMsgHandler.obj"] then
        _G["JunTuanMsgHandler.obj"] = MsgHandler.new()
        _G["JunTuanMsgHandler.obj"]:initData()
    end
    return _G["JunTuanMsgHandler.obj"]
end

function MsgHandler:initData()
    self.earlyMessage = {}      -- 缓存消息队列
    self.lastUserStatus = -1
    self.isReady = false
    self.isReqChair = false
    self.isReqSceneMsg = false

    -- self.msgHandlers = {;
    -- self:initMsgHandlers();
end

function MsgHandler:initMsgHandlers()
    self.msgHandlers = {};
    self.msgHandlers[cmdGame.SUB_SC_GAME_ENTER] = self.onEnterGame;                     --进入游戏
    self.msgHandlers[cmdGame.SUB_SC_ROLE_LINEUP_SWITCH] = self.onLineUpChange;          --阵容转换
    --self.msgHandlers[cmdGame.SUB_SC_ROLE_LEVELUP] = self.onRoleLevelUp;                 --角色升级
    --self.msgHandlers[cmdGame.SUB_SC_ROLE_RANKUP] = self.onRoleLevelUp;                  --晋阶
    self.msgHandlers[cmdGame.SUB_SC_ROLE_CHIP_CONVERT] = self.roleChipsConvert;         --碎片转换
    self.msgHandlers[cmdGame.SUB_SC_ROLE_LINEUP_DISPATCH] = self.onRoleToLineup;        --阵容出战
    self.msgHandlers[cmdGame.SUB_SC_EQUIP_MERGE] = self.onEquipMerge;                   --装备合并
    self.msgHandlers[cmdGame.SUB_SC_EQUIP_RESET] = self.onEquipReset;                   --装备重置
    self.msgHandlers[cmdGame.SUB_SC_EQUIP_CONVERT] = self.onEquipConvert;               --装备转换
    self.msgHandlers[cmdGame.SUB_SC_EQUIP_LIST] = self.onEquipListRet;                  --装备列表(响应)
    self.msgHandlers[cmdGame.SUB_SC_EQUIP_WEAR] = self.onEquipWearRet;                  --装备穿戴返回

    self.msgHandlers[cmdGame.SUB_SC_TREASURE_BOX_OPEN] = self.onOpenBoxRet;             --开宝箱
    self.msgHandlers[cmdGame.SUB_SC_BOX_EXCHANGE] = self.onExchangeBoxRet;              --宝箱兑换
    self.msgHandlers[cmdGame.SUB_SC_GAME_RECONNECT] = self.reconnectHandle;             --断线重现
    self.msgHandlers[cmdGame.SUB_SC_TREASURE_BOX] = self.boxListHandle;                 --宝箱列表
    self.msgHandlers[cmdGame.SUB_SC_MONSTER_BOOKS] = self.onMonsterBookList;            --图鉴
    self.msgHandlers[cmdGame.SUB_SC_MONSTER_BOOKS_REWARD] = self.onMonsterBookGetReward;--图鉴奖励
    self.msgHandlers[cmdGame.SUB_SC_MILESTONE] = self.onMileStoneInit;                  --里程碑列表
    self.msgHandlers[cmdGame.SUB_SC_MILESTONE_REWARD] = self.mileStoneReward;           --里程碑奖励
    self.msgHandlers[cmdGame.SUB_SC_ENERGY_RECOVERY] = self.energyRecoveryHandle;       --体力恢复
    self.msgHandlers[cmdGame.SUB_SC_SIGN_LIST] = self.onSignTask;                       --七日签到列表
    self.msgHandlers[cmdGame.SUB_SC_USER_SIGN] = self.signHandle;                       --玩家签到
    self.msgHandlers[cmdGame.SUB_SC_DAILY_TASK_LIST] = self.dailyTaskList;              --每日任务列表
    self.msgHandlers[cmdGame.SUB_SC_DAILY_TASK_REWARD] = self.dailyTaskReward;          --每日任务奖励
    self.msgHandlers[cmdGame.SUB_SC_ROLE_INFO] = self.roleInfoHandle;                   --角色数据
    self.msgHandlers[cmdGame.SUB_SC_ROLE_ATTR_INFO] = self.roleAttrInfoHandle;          --角色属性数据

    self.msgHandlers[cmdGame.SUB_SC_BATTLE_START] = self.onStartGame;                   --游戏开始
    self.msgHandlers[cmdGame.SUB_SC_BATTLE_NEXT] = self.onNextLevel;                    --下一关
    self.msgHandlers[cmdGame.SUB_SC_ROLE_ABILITY_CHOICE] = self.onThreeTwoGet;          --三选二选择技能
    self.msgHandlers[cmdGame.SUB_SC_ROLE_ABILITY_LIST] = self.onThreeTwoList;           --角色三选二列表返回
    self.msgHandlers[cmdGame.SUB_SC_ABILITY_CELL_UNLOCK] = self.onThreeTwoSlot;         --三选二技能槽解锁请求
    self.msgHandlers[cmdGame.SUB_SC_BATTLE_EXIT] = self.onExitBattle;                   --退出战斗
    self.msgHandlers[cmdGame.SUB_SC_BATTLE_OVER] = self.onExitGameOver;                 --游戏结算退出
    self.msgHandlers[cmdGame.SUB_SC_BATTLE_BLOOD_DEDUCE] = self.onWallHpSubRet;         --城墙血量扣除返回

    self.msgHandlers[cmdGame.SUB_SC_HANGUP_REWARD] = self.onHungRewardGet;              --离线收益
    self.msgHandlers[cmdGame.SUB_SC_HANGUP_INFO] = self.onHungRewardInfo;               --离线收益信息

    self.msgHandlers[cmdGame.SUB_SC_ROLE_LIST] = self.onRoleInfoList;                   -- 角色列表（响应）
    self.msgHandlers[cmdGame.SUB_SC_USER_SCENE] = self.onNewSceneInfo;                  -- 最新通关数据（响应）
    self.msgHandlers[cmdGame.SUB_SC_ABILITY_REFRESH] = self.onUpdateThreeTwo;           -- 三选二技能刷新（响应）
    self.msgHandlers[cmdGame.SUB_SC_USER_SNAPSHOT] = self.onUserSnapshot;               -- 处理快照信息(响应)
    self.msgHandlers[cmdGame.SUB_SC_GAME_REVIVE] = self.onGameRevive;                   -- 游戏复活(响应)
    self.msgHandlers[cmdGame.SUB_SC_MOPPINGUP_SNAPSHOT] = self.onMoppingUp;             -- 扫荡(响应)
    self.msgHandlers[cmdGame.SUB_SC_GAME_REVIVE_TIMES] = self.onIsCanRevive;            -- 复活次数(响应)
    self.msgHandlers[cmdGame.SUB_SC_USER_VIEW] = self.onUserInfo;                       -- 用户信息(响应)
    self.msgHandlers[cmdGame.SUB_SC_USER_VIEW_MODIFY] = self.onModifyUserInfo;          -- 修改昵称、头像(响应)
    self.msgHandlers[cmdGame.SUB_SC_Use_User_Skill] = self.onUseProp;          -- 修改昵称、头像(响应)

    -- 推送
    self.msgHandlers[cmdGame.PUSH_USER_COIN] = self.onCoinUpdateHandle;                 -- 金币刷新
    self.msgHandlers[cmdGame.PUSH_USER_GEM] = self.onGenUpdateHandle;                   -- 钻石刷新
    self.msgHandlers[cmdGame.PUSH_DAILY_TASK_CHANGE] = self.onTaskChange;               -- 每日任务变化
    self.msgHandlers[cmdGame.PUSH_RECHARGE_SUCCESS] = self.onRechargeSuc;               -- 充值成功
    self.msgHandlers[cmdGame.PUSH_PROPS_CHANGE] = self.onPropChange;                    -- 道具变化推送
    self.msgHandlers[cmdGame.PUSH_ROLE_COMBAT_CHANGE] = self.onRoleCombatPush;          -- 角色战力推送

    -- 排行榜
    self.msgHandlers[cmdGame.SUB_SC_Rank_Activity] = self.onRankActInfo                 -- 排行榜活动(响应)
    self.msgHandlers[cmdGame.SUB_SC_Rank_List] = self.onRankListInfo                    -- 排行榜排名(响应)
    self.msgHandlers[cmdGame.SUB_SC_Rank_Award] = self.onRankRewardInfo                 -- 排行榜领取奖励(响应)
end

function MsgHandler:getMessageHandle(cmd)
    if cmd == nil then
        return nil;
    end

    if self.msgHandlers == nil then
        self:initMsgHandlers();
    end
    return self.msgHandlers[cmd];
end

function MsgHandler:setGameView(view)
    self.gameView = view
end

-- 用户状态
function MsgHandler:onUserStatus(data)
    local struct_PB = ServerStruct_Game_pb.PB_GR_UserStatus()
    struct_PB:ParseFromString(data)
    local userID = struct_PB.dwUserID       -- 用户ID
    local status = struct_PB.cbUserStatus   -- 用户状态
    if userID == UserData.Shared().dwUserID then
        if status == USER_STATUS_SIT then
            print("收到用户状态信息，USER_STATUS_SIT", status)
            if not self.isReady and self.lastUserStatus ~= USER_STATUS_PLAYING then
                self.isReady = true
                MsgSendMgr:sendUserReady()
            end
        elseif status == USER_STATUS_STAND then
            print("收到用户状态信息，USER_STATUS_STAND", status)
            if not self.isReqChair and not self.isReady and self.lastUserStatus ~= USER_STATUS_PLAYING then
                self.isReqChair = true
                MsgSendMgr:sendReqChair()
            end
        elseif status == USER_STATUS_READY then
            print("收到用户状态信息，USER_STATUS_READY", status)
            if not self.isReqSceneMsg then
                self.isReqSceneMsg = true
                MsgSendMgr:sendOption()
            end
        elseif status == USER_STATUS_PLAYING then
            print("收到用户状态信息，USER_STATUS_PLAYING", status)
            if self.lastUserStatus == -1 then
                -- 断线重连
                if not self.isReqSceneMsg then
                    self.isReqSceneMsg = true
                    MsgSendMgr:sendOption()
                end
            end
            self.lastUserStatus = status
        end
    end
end

-- 场景消息
function MsgHandler:onGameSceneMsg(data)
    printf("---------- 场景消息 ----------")
    printf("---------- 场景消息 ----------")
    MsgSendMgr:sendUserLogin()
end

-- 系统消息
function MsgHandler:onSystemMsg(data)
    local struct_PB = ServerStruct_Game_pb.PB_GR_GameSystemMessage()
    struct_PB:ParseFromString(data)
    printf("---------- 系统消息 ----------")
    printf("消息类型: wType", struct_PB.wType)
    printf("消息内容: szString", struct_PB.szString)
    printf("---------- 系统消息 ----------")
end

-- 进入游戏(初始化大厅界面)
function MsgHandler.onEnterGame(data)
    local struct_PB = GamePB_pb.PBPlayerInfo()
    struct_PB:ParseFromString(data)
    local result = struct_PB.result
    local serverStatus = struct_PB.serverStatus
    local userInfo = struct_PB.user
    local heroInfoList = struct_PB.userRole
    local userScene = struct_PB.userScene
    local userEquip = struct_PB.userEquip
    local userStatus = struct_PB.userStatus     --游戏状态 0:大厅  1:游戏中
    local gameWorld = struct_PB.gameWorld
    local gameLevel = struct_PB.gameLevel
    local gamePart = struct_PB.gamePart
    --local cost = struct_PB.cost                 -- 消耗钻石配置
    local curLevelData = {
        userStatus = userStatus,
        gameWorld = gameWorld,
        gameLevel = gameLevel,
        gamePart = gamePart,
    }
    UserData.Shared():setUserInfo(userInfo)
    UserData.Shared():setRoleInfo(heroInfoList)
    UserData.Shared():setSceneInfo(userScene)
    UserData.Shared():setEquipInfo(userEquip)
    UserData.Shared():setCurLevelData(curLevelData)
    --UserData.Shared():setGemCostCfg(cost)
    UserData.Shared():refreshUserDefaultDaily()
    MessageManager.Shared():postMsg(MsgKeyData.onEnterGame, {})
    
    printf("---------- 进入游戏(初始化大厅界面) ----------")
    printf("userId is %d", userInfo.userId)
    printf("nick is %s", userInfo.nick)
    printf("金币数coin is %d", userInfo.coin)
    printf("钻石数gemCoin is %d", userInfo.gemCoin)
    printf("---------- 进入游戏(初始化大厅界面) ----------")
end

-- 角色升级、晋阶请求返回
function MsgHandler:onRoleLevelUp(data)
    local struct_PB = GamePB_pb.PBRoleUpInfo()
    struct_PB:ParseFromString(data)
    local result = struct_PB.result
    local noError = result.noError
    local outMsg = result.outMsg
    MessageManager.Shared():postMsg(MsgKeyData.onRoleLevelUp, struct_PB)
    printf("---------- 角色升级请求返回 ----------")
    printf("noError is %d", noError and 1 or 0)
    printf("outMsg is %s", outMsg)
    printf("---------- 角色升级请求返回 ----------")
end

-- 阵容切换请求返回
function MsgHandler.onLineUpChange(data)
    local struct_PB = GamePB_pb.PBReturnInfo()
    struct_PB:ParseFromString(data)
    local noError = struct_PB.noError
    local outMsg = struct_PB.outMsg
    if noError == false then
        GameTool:showTxtTip(string.format("%s", outMsg));
        return
    end
    printf("---------- 阵容切换请求返回 ----------")
    printf("noError is %d", noError and 1 or 0)
    printf("outMsg is %s", outMsg)
    printf("---------- 阵容切换请求返回 ----------")
    MessageManager.Shared():postMsg(MsgKeyData.onLineUpChange, struct_PB)
end

-- 英雄上阵请求返回
function MsgHandler.onRoleToLineup(data)
    local struct_PB = GamePB_pb.PBReturnInfo()
    struct_PB:ParseFromString(data)
    local noError = struct_PB.noError
    local outMsg = struct_PB.outMsg
    printf("---------- 英雄上阵请求返回 ----------")
    printf("noError is %d", noError and 1 or 0)
    printf("outMsg is %s", outMsg)
    printf("---------- 英雄上阵请求返回 ----------")
    MessageManager.Shared():postMsg(MsgKeyData.onRoleToLineup, struct_PB)
end

-- 开宝箱请求返回
function MsgHandler.onOpenBoxRet(data)
    local struct_PB = GamePB_pb.PBBoxOpenInfo()
    struct_PB:ParseFromString(data)
    local result = struct_PB.result
    if result.noError == false then
        GameTool:showTxtTip(string.format("%s", result.outMsg))
        return;
    end
    
    local rewardInfo = struct_PB.reward;
    local equipInfo = rewardInfo.userEquip;
    local boxInfo = struct_PB.boxInfo;
    UserData.Shared():updateEquipInfo(equipInfo);
    UserData.Shared():updateBoxList(boxInfo);
    MessageManager.Shared():postMsg(MsgKeyData.onOpenBox, rewardInfo);
end

-- 宝箱兑换返回
function MsgHandler.onExchangeBoxRet(data)
    local struct_PB = GamePB_pb.PBExchangeBoxInfo();
    struct_PB:ParseFromString(data);
    
    local result = struct_PB.result
    if result.noError then
        local userInfo = {
            coin = struct_PB.updateCoin,
            energy = struct_PB.updateEnergy
        }
        UserData.Shared():updateUserCurrency(userInfo);
        UserData.Shared():setEnergyExLeft(struct_PB.exchangeTimes);
        MessageManager.Shared():postMsg(MsgKeyData.onExchangeBox, struct_PB)
        MessageManager.Shared():postMsg(MsgKeyData.onCurrencyUpdate, {})
    end
    GameTool:showTxtTip(string.format("%s", result.outMsg))
end

--装备合成响应
function MsgHandler.onEquipMerge(data)
    local struct_PB = GamePB_pb.PBEquipMergeInfo();
    struct_PB:ParseFromString(data);
    local ret = struct_PB.result;

    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        return;
    end
    
    local equipInfo = struct_PB.userEquip;
    UserData.Shared():setEquipInfo(equipInfo);
    MessageManager.Shared():postMsg(MsgKeyData.onEquipMerge, struct_PB);
end

--图鉴响应
function MsgHandler.onMonsterBookList(data)
    local struct_PB = GamePB_pb.PBMonsterBooksList();
    struct_PB:ParseFromString(data);

    local monsterBook = struct_PB.books;
    local ifDataInit = UserData.Shared():getMonsterBooks() == nil;
    UserData.Shared():initMonsterBook(monsterBook);
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.MONSTERBOOK});
end

--图鉴领奖
function MsgHandler.onMonsterBookGetReward(data)
    local struct_PB = GamePB_pb.PBMonsterBooksRewardInfo();
    struct_PB:ParseFromString(data);
    local ret = struct_PB.result;
    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        return;
    end
    GameTool:showTxtTip("领取成功");
    local updateBook = struct_PB.booksInfo;
    UserData.Shared():updateMonsterBook(updateBook);
    MessageManager.Shared():postMsg(MsgKeyData.onMonsterBookRewarded, {});
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.MONSTERBOOK});
end

--里程碑数据
function MsgHandler.onMileStoneInit(data)
    local struct_PB = GamePB_pb.PBMilestoneList();
    struct_PB:ParseFromString(data);

    local mileList = struct_PB.stoneInfos;
    local canGet = struct_PB.canGet;
    UserData.Shared():updateMileStone(mileList);
    UserData.Shared():setMileUnGetNum(canGet);

    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.MILESTONE});
    MessageManager.Shared():postMsg(MsgKeyData.onMileStoneShow, {});
    printf("---------- 里程碑列表返回 ----------")
    printf("canGet is %d", canGet)
    printf("---------- 里程碑列表返回 ----------")
end

--7天签到
function MsgHandler.onSignTask(data)
    local struct_PB = GamePB_pb.PBSignTaskList();
    struct_PB:ParseFromString(data);

    local signTaskList = struct_PB.signTask;
    local signDays = struct_PB.signDays;
    UserData.Shared():initSignTask(signTaskList,signDays);
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.SIGN});
    MessageManager.Shared():postMsg(MsgKeyData.onSignTaskShow, {});
end

--碎片转换
function MsgHandler.roleChipsConvert(data)
    local struct_PB = GamePB_pb.PBRoleChipConvertInfo()
    struct_PB:ParseFromString(data)
    local result = struct_PB.result
    if result.noError then
        --local roleId = struct_PB.roleId
        --local chipNums = struct_PB.chipNums
        --UserData.Shared():updateRoleChip(roleId, chipNums)
        MessageManager.Shared():postMsg(MsgKeyData.onRoleChipChange, struct_PB)
    else
        GameTool:showTxtTip(result.outMsg)
    end
end

--装备重置
function MsgHandler.onEquipReset(data)
    local struct_PB = GamePB_pb.PBEquipResetInfo();
    struct_PB:ParseFromString(data);
    local ret = struct_PB.result;

    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        return;
    end

    local userEquip = struct_PB.userEquip;
    local combat = struct_PB.combat;
    local roleId = userEquip.roleId
    UserData.Shared().roleInfoList[roleId].combat = combat
    UserData.Shared():updateEquipInfo(userEquip);
    MessageManager.Shared():postMsg(MsgKeyData.onEquipReset, userEquip);
end

--装备转换
function MsgHandler.onEquipConvert(data)
    local struct_PB = GamePB_pb.PBEquipConvertInfo();
    struct_PB:ParseFromString(data);
    local ret = struct_PB.result;
    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        return;
    end
    local userEquip = struct_PB.userEquip;
    UserData.Shared():updateEquipInfo(userEquip);
    MessageManager.Shared():postMsg(MsgKeyData.onEquipConvert, userEquip);
end

--断线重连
function MsgHandler.reconnectHandle()

end

--获取宝箱列表
function MsgHandler.boxListHandle(data)
    local struct_PB = GamePB_pb.PBUserBoxList();
    struct_PB:ParseFromString(data);

    local boxList = struct_PB.box;
    UserData.Shared():initBoxList(boxList);
    MessageManager.Shared():postMsg(MsgKeyData.onBoxListShow, {});
end

--里程碑奖励
function MsgHandler.mileStoneReward(data)
    local struct_PB = GamePB_pb.PBRewardList();
    struct_PB:ParseFromString(data);
    local ret = struct_PB.result;
    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        printf("noError is %d", ret.noError and 1 or 0)
        printf("outMsg is %s", ret.outMsg)
        return;
    end
    local canGet = struct_PB.canGet
    UserData.Shared():setMileUnGetNum(canGet)
    local reward = struct_PB.reward;
    local rewardList = {};
    for _,v in pairs(reward) do
        local localInfo = {}
        localInfo.rewardId = v.rewardId;
        localInfo.rewardNums = v.rewardNums;
        localInfo.rewardType = v.rewardType;
        if v.userEquip then
            localInfo.userEquip = UserData.Shared():updateEquipInfo(v.userEquip)
        end
        if localInfo.rewardId ~= nil then
            table.insert(rewardList,localInfo);
        end
    end

    MessageManager.Shared():postMsg(MsgKeyData.onMileStoneRewarded, rewardList);
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.MILESTONE});
end

-- 体力恢复
function MsgHandler.energyRecoveryHandle(data)
    local struct_PB = GamePB_pb.PBUserEnergyInfo();
    struct_PB:ParseFromString(data);

    local energy = struct_PB.energy;
    local energyMax = struct_PB.energyMax;
    local countDown = struct_PB.countDown;
    UserData.Shared():set_lCurEnergy(energy)
    if energyMax then
        UserData.Shared():set_lMaxEnergy(energyMax)
    end
    UserData.Shared().lEnergyTime = countDown
    MessageManager.Shared():postMsg(MsgKeyData.onEnergyRecv)
    printf("---------- 体力恢复返回 ----------")
    printf("energy is %d", energy)
    printf("energyMax is %d", energyMax or -1)
    printf("countDown is %d", countDown)
    printf("---------- 体力恢复返回 ----------")
end

--玩家签到
function MsgHandler.signHandle(data)
    local struct_PB = GamePB_pb.PBRewardList();
    struct_PB:ParseFromString(data);

    local ret = struct_PB.result;
    if ret.noError ~= nil and ret.noError == false then
        GameTool:showTxtTip(string.format("%s", ret.outMsg))
        return;
    end
    local reward = struct_PB.reward;
    local rewardList = {};
    for _,v in pairs(reward) do
        local localInfo = {}
        localInfo.rewardId = v.rewardId;
        localInfo.rewardNums = v.rewardNums;
        localInfo.rewardType = v.rewardType;
        if localInfo.rewardId ~= nil then
            -- rewardList[localInfo.rewardId] = localInfo;
            table.insert(rewardList,localInfo);
        end
        if v.userEquip then
            localInfo.userEquip = UserData.Shared():updateEquipInfo(v.userEquip)
        end
    end
    MessageManager.Shared():postMsg(MsgKeyData.onSignRewarded, rewardList);
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, {Define.ENUM_REDTIS_TYPE.SIGN});
end

--日常任务列表
function MsgHandler.dailyTaskList(data)
    printf("---------- 每日任务列表返回 ----------")
    local struct_PB = GamePB_pb.PBDailyTaskList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onDailyTaskList, struct_PB)
end

--每日任务领奖返回
function MsgHandler.dailyTaskReward(data)
    printf("---------- 每日任务领奖返回 ----------")
    local struct_PB = GamePB_pb.PBRewardList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onDailyTaskReward, struct_PB)
end

-- 每日任务变化
function MsgHandler.onTaskChange(data)
    printf("---------- 每日任务变化 ----------")
    local struct_PB = GamePB_pb.PBPushDailyTaskChange()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onDailyTaskChange, struct_PB)
end

--角色数据
function MsgHandler.roleInfoHandle(data)
    local struct_PB = GamePB_pb.PBUserRoleInfo()
    struct_PB:ParseFromString(data)
    UserData.Shared():updateRoleData(struct_PB);
    MessageManager.Shared():postMsg(MsgKeyData.onRoleDataReturn, struct_PB)
end

--角色属性数据
function MsgHandler.roleAttrInfoHandle(data)
    local struct_PB = GamePB_pb.PBRoleInfo()
    struct_PB:ParseFromString(data)
    UserData.Shared():setRoleAttr(struct_PB)
    MessageManager.Shared():postMsg(MsgKeyData.onRoleInfoRet, struct_PB)
end

-- 游戏开始(响应)
function MsgHandler.onStartGame(data)
    local struct_PB = GamePB_pb.PBMonsterList()
    struct_PB:ParseFromString(data)
   MessageManager.Shared():postMsg(MsgKeyData.onStartGame, struct_PB)
end

-- 下一关(响应)
function MsgHandler.onNextLevel(data)
    local struct_PB = GamePB_pb.PBMonsterList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onNextLevel, struct_PB)
end

-- 角色三选二列表返回
function MsgHandler.onThreeTwoList(data)
    local struct_PB = GamePB_pb.PBAbilityList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onThreeTowList, struct_PB)
end

-- 三选二选择技能
function MsgHandler.onThreeTwoGet(data)
    local struct_PB = GamePB_pb.PBChoiceAblilityInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onThreeTowGet, struct_PB)
end

-- 三选二技能槽解锁请求
function MsgHandler.onThreeTwoSlot(data)
    local struct_PB = GamePB_pb.PBAbilityCellUnLock()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onThreeTowSlot, struct_PB)
end

-- 退出战斗(响应)
function MsgHandler.onExitBattle(data)
    MessageManager.Shared():postMsg(MsgKeyData.onExitBattle)
end

-- 游戏结算退出(响应)
function MsgHandler.onExitGameOver(data)
    local struct_PB = GamePB_pb.PBBattleOverInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onGameOver, struct_PB)
end

-- 城墙血量扣除（响应）
function MsgHandler.onWallHpSubRet(data)
    local struct_PB = GamePB_pb.PBBattleBloodDeduceInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onWallHpSub, struct_PB)
end

-- 角色列表（响应）
function MsgHandler.onRoleInfoList(data)
    printf("---------- 角色列表（响应） ----------")
    local struct_PB = GamePB_pb.PBUserRoleList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onRoleListRet, struct_PB)
end

-- 最新通关数据（响应）
function MsgHandler.onNewSceneInfo(data)
    printf("---------- 最新通关数据（响应） ----------")
    local struct_PB = GamePB_pb.PBUserSceneInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onNewSceneInfo, struct_PB)
end

-- 三选二技能刷新（响应）
function MsgHandler.onUpdateThreeTwo(data)
    printf("---------- 三选二技能刷新（响应） ----------")
    local struct_PB = GamePB_pb.PBAbilityList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onUpdateThreeTwo, struct_PB)
end

-- 处理快照信息(响应)
function MsgHandler.onUserSnapshot(data)
    printf("---------- 处理快照信息（响应） ----------")
    local struct_PB = GamePB_pb.PBSnapshotInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onUserSnapshot, struct_PB)
end

-- 装备列表(响应)
function MsgHandler.onEquipListRet(data)
    printf("---------- 装备列表(响应) ----------")
    local struct_PB = GamePB_pb.PBRoleEquipsList()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onEquipListRet, struct_PB)
end

-- 装备穿戴返回
function MsgHandler.onEquipWearRet(data)
    printf("---------- 装备穿戴返回 ----------")
    local struct_PB = GamePB_pb.PBEquipWearInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onEquipWearRet, struct_PB)
end

-- 金币刷新
function MsgHandler.onCoinUpdateHandle(data)
    printf("---------- 金币刷新 ----------")
    local struct_PB = GamePB_pb.PBPushCoin()
    struct_PB:ParseFromString(data)
    local userInfo = {
        coin = data.coin,
    }
    UserData.Shared():updateUserCurrency(userInfo);
    MessageManager.Shared():postMsg(MsgKeyData.onCurrencyUpdate, {})
end

-- 钻石刷新
function MsgHandler.onGenUpdateHandle(data)
    printf("---------- 钻石刷新 ----------")
    local struct_PB = GamePB_pb.PBPushGem()
    struct_PB:ParseFromString(data)
    local userInfo = {
        gemCoin = data.genCoin,
    }
    UserData.Shared():updateUserCurrency(userInfo);
    MessageManager.Shared():postMsg(MsgKeyData.onCurrencyUpdate, {})
end

-- 充值成功
function MsgHandler.onRechargeSuc(data)
    printf("---------- 充值成功 ----------")
    local struct_PB = GamePB_pb.PBPushRechargeSuccess()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onRechargeSuc, struct_PB)
end

-- 道具变化
function MsgHandler.onPropChange(data)
    printf("---------- 道具变化 ----------")
    local struct_PB = GamePB_pb.PBPushPropsChange()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onPropChange, struct_PB)
end

-- 角色战力推送
function MsgHandler.onRoleCombatPush(data)
    printf("---------- 角色战力推送 ----------")
    local struct_PB = GamePB_pb.PBPushRoleCombatSuccess()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onHeroCombatPush, struct_PB)
end

-- 离线收益领取返回
function MsgHandler.onHungRewardGet(data)
    printf("---------- 离线收益领取返回 ----------")
    local struct_PB = GamePB_pb.PBHungUpRewardTake()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onHungRewardGet, struct_PB)
end

-- 离线收益信息返回
function MsgHandler.onHungRewardInfo(data)
    printf("---------- 离线收益信息返回 ----------")
    local struct_PB = GamePB_pb.PBHungUpRewardInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onHungRewardInfo, struct_PB)
end

-- 询问复活返回
function MsgHandler.onIsCanRevive(data)
    printf("---------- 询问复活返回 ----------")
    local struct_PB = GamePB_pb.PBGameReviveTimes()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onIsCanRevive, struct_PB)
end

-- 游戏复活
function MsgHandler.onGameRevive(data)
    printf("---------- 游戏复活返回 ----------")
    local struct_PB = GamePB_pb.PBGameRevive()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onGameRevive, struct_PB)
end

-- 快速扫荡
function MsgHandler.onMoppingUp(data)
    printf("---------- 快速扫荡返回 ----------")
    local struct_PB = GamePB_pb.PBMoppingUpTake()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onMoppingUp, struct_PB)
end

-- 用户信息返回
function MsgHandler.onUserInfo(data)
    printf("---------- 用户信息返回 ----------")
    local struct_PB = GamePB_pb.PBUserViewResp()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onUserInfo, struct_PB)
end

-- 修改昵称头像返回
function MsgHandler.onModifyUserInfo(data)
    printf("---------- 修改昵称头像返回 ----------")
    local struct_PB = GamePB_pb.PBReturnInfo()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onModifyUserInfo, struct_PB)
end

-- 使用道具返回
function MsgHandler.onUseProp(data)
    printf("---------- 使用道具返回 ----------")
    local struct_PB = GamePB_pb.PBUseUserSkillResp()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onUseProp, struct_PB)
end

-- 排行榜活动信息返回
function MsgHandler.onRankActInfo(data)
    printf("---------- 排行榜活动信息返回 ----------")
    local struct_PB = GamePB_pb.PBRankActivityResp()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onRankActInfo, struct_PB)
end

-- 排行榜排名信息返回
function MsgHandler.onRankListInfo(data)
    printf("---------- 排行榜排名信息返回 ----------")
    local struct_PB = GamePB_pb.PBRankListResp()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onRankListInfo, struct_PB)
end

-- 排行榜领取奖励返回
function MsgHandler.onRankRewardInfo(data)
    printf("---------- 排行榜领取奖励返回 ----------")
    local struct_PB = GamePB_pb.PBRankAwardResp()
    struct_PB:ParseFromString(data)
    MessageManager.Shared():postMsg(MsgKeyData.onRankRewardInfo, struct_PB)
end

function MsgHandler:onExit()
    self:initData()
end

return MsgHandler
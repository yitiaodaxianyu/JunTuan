---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/28 15:54
---

-- 消息发送管理器

local cmdCode = require("src.macros.CMD_Game")
local cmdGame = require("src.JunTuan.src.network.CMD_Game")
local sendMgr = require("src.app.Manager.Net.GameSendManager").Shared()
local MsgSendMgr = class("MsgSendMgr", sendMgr)

function MsgSendMgr.Shared()
    if nil == _G["JunTuanMsgSendMgr.obj"] then
        _G["JunTuanMsgSendMgr.obj"] = MsgSendMgr.new()
    end
    return _G["JunTuanMsgSendMgr.obj"]
end

-- 用户准备
function MsgSendMgr:sendUserReady()
    print("发送用户准备消息")
    local struct_PB = ServerStruct_Game_pb.PB_GR_GameUserReady()
    self:SendPb(cmdGame.MDM_GF_FRAME, cmdGame.SUB_GF_USER_READY, struct_PB)
end

function MsgSendMgr:sendReqChair()
    print("发送用户请求位置消息")
    local struct_PB = ServerStruct_Game_pb.PB_GR_UserReqChair()
    self:SendPb(cmdGame.MDM_GR_USER, cmdGame.SUB_GR_USER_CHAIR_REQ, struct_PB)
end

-- 用户进入
function MsgSendMgr:sendUserLogin()
    printf("发送用户进入")
    local struct_PB = ServerStruct_Game_pb.PB_GR_GameUserReady()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_GAME_ENTER, struct_PB)
end

-- 用户登出
function MsgSendMgr:sendUserLogOut()
    printf("发送用户登出")
    --local struct_PB = GamePB_pb.PB_C_UserOpenCard()
    --self:SendPb(cmdGame.MDM_CS_USER_COLLECT, cmdGame.SUB_CS_C_USER_ENTER, struct_PB)
end

-- 发送游戏配置消息(请求场景消息)
function MsgSendMgr:sendOption()
    print("发送游戏配置, 请求场景消息")
    local struct_PB = ServerStruct_Game_pb.PB_GR_GameOption()
    self:SendPb(cmdGame.MDM_GF_FRAME, cmdGame.SUB_GF_GAME_OPTION, struct_PB)
end

-- 进入游戏
function MsgSendMgr:sendEnterGame()
    printf("发送进入游戏")
    local struct_PB = ServerStruct_Game_pb.PB_GR_GameOption()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_GAME_ENTER, struct_PB)
end

-- 阵容切换
function MsgSendMgr:sendRoleSwitch(roleId1, position1, roleId2, position2)
    if roleId1 == roleId2 then
        roleId2 = 0
        position2 = 0
    end
    local struct_PB = GamePB_pb.PBRoleSwitchParams()
    struct_PB.roleId1 = roleId1
    struct_PB.position1 = position1
    struct_PB.roleId2 = roleId2
    struct_PB.position2 = position2
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_LINEUP_SWITCH, struct_PB)
    printf("---------- 发送阵容切换 ----------")
    printf("roleId1 is %d,", roleId1)
    printf("position1 is %d,", position1)
    printf("roleId2 is %d,", roleId2)
    printf("position2 is %d,", position2)
    printf("---------- 发送阵容切换 ----------")
end

-- 角色升级
function MsgSendMgr:sendRoleLevelUp(roleId)
    printf("---------- 发送角色升级 ----------")
    printf("roleId is %d,", roleId)
    printf("---------- 发送角色升级 ----------")
    local struct_PB = GamePB_pb.PBRoleUpParams()
    struct_PB.roleId = roleId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_LEVELUP, struct_PB)
end

-- 角色升阶
function MsgSendMgr:sendRoleRankUp(roleId)
    printf("---------- 发送角色升阶 ----------")
    printf("roleId is %d,", roleId)
    printf("---------- 发送角色升阶 ----------")
    local struct_PB = GamePB_pb.PBRoleUpParams()
    struct_PB.roleId = roleId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_RANKUP, struct_PB)
end

-- 角色碎片转换
function MsgSendMgr:sendRoleChipConvert(roleId, chipNums)
    printf("---------- 发送角色碎片转换 ----------")
    printf("roleId is %d,", roleId)
    printf("chipNums is %d,", chipNums)
    printf("---------- 发送角色碎片转换 ----------")
    local struct_PB = GamePB_pb.PBRoleChipConvertParams()
    struct_PB.roleId = roleId
    struct_PB.chipNums = chipNums
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_CHIP_CONVERT, struct_PB)
end

-- 角色出战
function MsgSendMgr:sendRoleToLineup(roleId, isDispatch)
    printf("---------- 发送角色出战 ----------")
    printf("roleId is %d,", roleId)
    printf("chipNums is %d,", isDispatch)
    printf("---------- 发送角色出战 ----------")
    local struct_PB = GamePB_pb.PBRoleDispatchParams()
    struct_PB.roleId = roleId
    struct_PB.isDispatch = isDispatch
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_LINEUP_DISPATCH, struct_PB)
end

-- 装备合成 只填roleId(其他参数填0)时候表示一键合成
function MsgSendMgr:sendEquipMerge(body)
    printf("---------- 发送装备合成 ----------")
    printf("roleId is %d,", body.roleId)
    printf("userEquipId1 is %d,", body.userEquipId1)
    printf("userEquipId2 is %d,", body.userEquipId2)
    printf("---------- 发送装备合成 ----------")
    local struct_PB = GamePB_pb.PBEquipMergeParams()
    struct_PB.roleId = body.roleId
    struct_PB.userEquipId1 = body.userEquipId1
    struct_PB.userEquipId2 = body.userEquipId2
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_EQUIP_MERGE, struct_PB)
end

-- 装备属性重置
function MsgSendMgr:sendEquipReset(body)
    printf("---------- 发送装备属性重置 ----------")
    printf("roleId is %d,", body.roleId)
    printf("userEquipId is %d,", body.userEquipId)
    printf("equipId is %d,", body.equipId)
    printf("---------- 发送装备属性重置 ----------")
    local struct_PB = GamePB_pb.PBEquipResetParams()
    struct_PB.roleId = body.roleId
    struct_PB.userEquipId = body.userEquipId
    struct_PB.equipId = body.equipId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_EQUIP_RESET, struct_PB)
end

-- 装备转换
function MsgSendMgr:sendEquipConvert(body)
    printf("---------- 发送装备转换 ----------")
    PrintTable(body);
    printf("---------- 发送装备转换 ----------")
    local struct_PB = GamePB_pb.PBEquipConvertParams()
    struct_PB.roleId = body.roleId
    struct_PB.userEquipId = body.userEquipId
    struct_PB.equipId = body.equipId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_EQUIP_CONVERT, struct_PB)
end

--宝箱列表
function MsgSendMgr:sendBoxListReq()
    printf("---------- 发送宝箱列表请求 ----------");
    local struct_PB = GamePB_pb.PBNullable();
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_TREASURE_BOX, struct_PB);
end

-- 开宝箱请求
function MsgSendMgr:sendOpenBox(boxId)
    printf("---------- 发送开宝箱请求 ----------")
    printf("boxId is %d,", boxId)
    printf("---------- 发送开宝箱请求 ----------")
    local struct_PB = GamePB_pb.PBBoxOpenParams()
    struct_PB.boxId = boxId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_TREASURE_BOX_OPEN, struct_PB)
end

-- 宝箱兑换请求
function MsgSendMgr:sendExchangeBox(body)
    printf("---------- 发送宝箱兑换请求 ----------")
    printf("boxId is %d,", body.exBoxId)
    printf("---------- 发送宝箱兑换请求 ----------")
    local struct_PB = GamePB_pb.PBExchangeBoxParams()
    struct_PB.exBoxId = body.exBoxId;
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BOX_EXCHANGE, struct_PB)
end

-- 发送退出游戏
function MsgSendMgr:sendExitGame()
    printf("---------- 发送退出游戏 ----------")
    local struct_PB = ServerStruct_Game_pb.PB_GR_ForceQuit()
    self:SendPb(cmdCode.MDM_MB_FREE_MATCH, cmdCode.SUB_GR_USER_FORCEQUIT, struct_PB)
end

--申请图鉴列表
function MsgSendMgr:sendMonsterBooksReq()
    printf("---------- 发送里图鉴列表请求 ----------")
    local struct_PB = GamePB_pb.PBNullable();
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_MONSTER_BOOKS, struct_PB);
end

-- 图鉴领奖
function MsgSendMgr:sendMonsterBookGetReward(body)
    printf("---------- 发送图鉴领奖请求 ----------")
    local struct_PB = GamePB_pb.PBMonsterBooksRewardParams();
    struct_PB.monsterId = body.monsterId;
    struct_PB.rewardId = body.rewardId;
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_MONSTER_BOOKS_REWARD, struct_PB);
end

--里程碑列表
function MsgSendMgr:sendMileStoneReq(mileId)
    local struct_PB = GamePB_pb.PBMilestoneListParams();
    struct_PB.mileId = mileId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_MILESTONE, struct_PB);
    printf("---------- 发送里程碑进度列表请求 ----------")
    printf("mileId is %d", mileId)
    printf("---------- 发送里程碑进度列表请求 ----------")
end

--里程碑领奖
function MsgSendMgr:sendMileStoneGetReward(body)
    printf("---------- 发送里程碑领奖请求 ----------")
    local struct_PB = GamePB_pb.PBMilestoneRewardParams();
    if struct_PB.mileId == nil then
        struct_PB.mileId = {};
    end
    table.insert(struct_PB.mileId,body.mileId);
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_MILESTONE_REWARD, struct_PB);
end

--签到列表
function MsgSendMgr:sendSignTaskListReq()
    printf("---------- 发送签到列表请求 ----------")
    local struct_PB = GamePB_pb.PBNullable();
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_SIGN_LIST, struct_PB);
end

--用户签到
function MsgSendMgr:sendRoleSignReq(body)
    printf("---------- 发送用户签到请求 ----------")
    local struct_PB = GamePB_pb.PBUserSignParams();
    struct_PB.id = body.id;
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_USER_SIGN, struct_PB);
end

-- 进入关卡请求
function MsgSendMgr:sendStartGame(sceneId)
    printf("---------- 发送进入关卡请求 ----------")
    printf("sceneId is %d", sceneId)
    printf("---------- 发送进入关卡请求 ----------")
    local struct_PB = GamePB_pb.PBBattleStartParams()
    struct_PB.sceneId = sceneId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BATTLE_START, struct_PB)
end

-- 下一关请求
function MsgSendMgr:sendNextLevel()
    printf("---------- 发送下一关请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BATTLE_NEXT, struct_PB)
end

-- 三选二技能请求
function MsgSendMgr:sendThreeTwoGet(roleId, buffId)
    printf("---------- 发送三选二技能请求 ----------")
    printf("roleId is %d, buffId is %d", roleId, buffId)
    printf("---------- 发送三选二技能请求 ----------")
    local struct_PB = GamePB_pb.PBChoiceAblilityParams()
    struct_PB.roleId = roleId
    struct_PB.buffId = buffId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_ABILITY_CHOICE, struct_PB)
end

-- 退出战斗请求（无奖励）
function MsgSendMgr:sendExitBattle()
    printf("---------- 发送退出战斗请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BATTLE_EXIT, struct_PB)
end

-- 游戏结算请求
function MsgSendMgr:sendGameOver()
    printf("---------- 发送游戏结算请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BATTLE_OVER, struct_PB)
end

-- 城墙血量扣除请求
function MsgSendMgr:sendSubWallHp(num)
    printf("---------- 发送城墙血量扣除请求 ----------")
    local struct_PB = GamePB_pb.PBBattleBloodDeduceParams()
    struct_PB.updateBlood = num
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_BATTLE_BLOOD_DEDUCE, struct_PB)
end

--角色数据请求
function MsgSendMgr:sendRoleDataReq(roleId)
    printf("---------- 角色面板数据请求 ----------")
    local struct_PB = GamePB_pb.PBRoleInfoParams()
    struct_PB.roleId = roleId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_INFO, struct_PB)
end

--角色属性数据请求
function MsgSendMgr:sendRoleAttrDataReq(roleId)
    printf("---------- 角色属性数据请求 ----------")
    printf("roleId is %d", roleId)
    printf("---------- 角色属性数据请求 ----------")
    local struct_PB = GamePB_pb.PBRoleInfoParams()
    struct_PB.roleId = roleId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_ATTR_INFO, struct_PB)
end

-- 角色列表请求
function MsgSendMgr:sendRoleInfoList()
    printf("---------- 角色列表请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_LIST, struct_PB)
end

-- 最新通关数据请求
function MsgSendMgr:sendNewSceneInfo()
    printf("---------- 最新通关数据请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_USER_SCENE, struct_PB)
end

-- 角色三选二列表请求
function MsgSendMgr:sendThreeTwoList()
    printf("---------- 角色三选二列表请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ROLE_ABILITY_LIST, struct_PB)
end

-- 三选二技能刷新请求
function MsgSendMgr:sendUpdateThreeTow()
    printf("---------- 三选二技能刷新请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ABILITY_REFRESH, struct_PB)
end

-- 三选二技能槽解锁请求
function MsgSendMgr:sendUnLockSlot()
    printf("---------- 三选二技能槽解锁请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ABILITY_CELL_UNLOCK, struct_PB)
end

-- 处理快照信息请求
function MsgSendMgr:sendUserSnapshot()
    printf("---------- 处理快照信息请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_USER_SNAPSHOT, struct_PB)
end

-- 装备列表请求
function MsgSendMgr:sendReqEquipList(roleId)
    printf("---------- 装备列表请求 ----------")
    local struct_PB = GamePB_pb.PBRoleEquipsParams()
    struct_PB.roleId = roleId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_EQUIP_LIST, struct_PB)
end

-- 装备穿戴请求
function MsgSendMgr:sendEquipWear(body)
    printf("---------- 装备穿戴请求 ----------")
    printf("roleId is %d", body.roleId)
    printf("userEquipId is %d", body.userEquipId)
    printf("equipId is %d", body.equipId)
    printf("---------- 装备穿戴请求 ----------")
    local struct_PB = GamePB_pb.PBEquipWearParams()
    struct_PB.roleId = body.roleId
    struct_PB.userEquipId = body.userEquipId
    struct_PB.equipId = body.equipId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_EQUIP_WEAR, struct_PB)
end

-- 每日任务列表请求
function MsgSendMgr:sendDailyTaskList()
    printf("---------- 每日任务列表请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_DAILY_TASK_LIST, struct_PB)
end

-- 每日任务领取奖励
function MsgSendMgr:sendTaskGetReward(logId, taskId)
    printf("---------- 发送每日任务领取奖励 ----------")
    printf("logId is %d", logId)
    printf("taskId is %d", taskId)
    printf("---------- 发送每日任务领取奖励 ----------")
    local struct_PB = GamePB_pb.PBDailyTaskRewardParams()
    struct_PB.logId = logId
    struct_PB.taskId = taskId
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_DAILY_TASK_REWARD, struct_PB)
end

-- 体力恢复请求
function MsgSendMgr:sendEnergyRecover()
    printf("---------- 体力恢复请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_ENERGY_RECOVERY, struct_PB)
end

-- 请求挂机收益金币
function MsgSendMgr:sendReqHungGold()
    printf("---------- 请求挂机收益金币 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_HANGUP_INFO, struct_PB)
end

-- 领取挂机奖励请求
function MsgSendMgr:sendHangupReward()
    printf("---------- 领取挂机奖励请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_HANGUP_REWARD, struct_PB)
end

-- 发送询问复活请求
function MsgSendMgr:sendIsCanRevive()
    printf("---------- 发送询问复活请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_GAME_REVIVE_TIMES, struct_PB)
end

-- 发送复活请求
function MsgSendMgr:sendGameRevive()
    printf("---------- 发送复活请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_GAME_REVIVE, struct_PB)
end

-- 发送扫荡请求
function MsgSendMgr:sendMopping(sceneId, gameLevel)
    printf("---------- 发送扫荡请求 ----------")
    local struct_PB = GamePB_pb.PBMoppingUpParams()
    struct_PB.sceneId = sceneId
    struct_PB.gameLevel = gameLevel
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_MOPPINGUP_SNAPSHOT, struct_PB)
end

-- 请求用户信息
function MsgSendMgr:sendUserInfo(useridList)
    printf("---------- 请求用户信息 ----------")
    local struct_PB = GamePB_pb.PBUserViewParams()
    --struct_PB.ids = {}
    for _, v in pairs(useridList) do
        table.insert(struct_PB.ids, v)
    end
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_USER_VIEW, struct_PB)
end

-- 发送排行榜活动请求
function MsgSendMgr:sendRankActInfo()
    printf("---------- 发送排行榜活动请求 ----------")
    local struct_PB = GamePB_pb.PBNullable()
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_Rank_Activity, struct_PB)
end

-- 发送排行榜排名请求
function MsgSendMgr:sendRankListInfo(rankType, isNew)
    printf("---------- 发送排行榜排名请求 ----------")
    local struct_PB = GamePB_pb.PBRankListReq()
    struct_PB.type = rankType
    struct_PB.isNew = isNew
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_Rank_List, struct_PB)
end

-- 发送排行榜领取奖励请求
function MsgSendMgr:sendRankRewardInfo(rankType)
    printf("---------- 发送排行榜奖励请求 ----------")
    local struct_PB = GamePB_pb.PBRankAwardReq()
    struct_PB.type = rankType
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_Rank_Award, struct_PB)
end

-- 发送修改昵称、头像
function MsgSendMgr:sendModifyUserInfo(newNick, newIcon)
    printf("---------- 发送修改昵称、头像 ----------")
    local struct_PB = GamePB_pb.PBUserViewModifyParams()
    struct_PB.nick = newNick or ""
    struct_PB.faceid = newIcon or 0
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_USER_VIEW_MODIFY, struct_PB)
end

-- 发送使用道具
function MsgSendMgr:sendUseProp(skill)
    printf("---------- 发送使用道具 ----------")
    local struct_PB = GamePB_pb.PBUseUserSkillReq()
    struct_PB.skill = skill
    self:SendPb(cmdGame.MDM_GF_GAME, cmdGame.SUB_CS_Use_User_Skill, struct_PB)
end

return MsgSendMgr
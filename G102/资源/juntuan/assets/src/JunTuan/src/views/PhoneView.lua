---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/26 15:16
---

-- 手机验证码界面
local PhoneView = class("PhoneView", ViewBase)

function PhoneView:ctor(para)
    self:enableNodeEvents()
    self:initData(para)
end

function PhoneView:onEnter()
    self:initView()
    self:addNotify()
end

function PhoneView:initData(para)
    self.para = para
    self.parent = para.parent
    self.flag = para.flag               -- 操作标识, 1 手机登录注册   2 绑定解绑手机
    self.allTime = 60
    self.curTime = self.allTime
end

function PhoneView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.loadingView.phoneView,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    panel_main:setBackGroundImageScale9Enabled(true)
    panel_main:setBackGroundImageCapInsets(cc.rect(11, 23, 29, 13))

    local panel_title = panel_main:getChildByName("Panel_title")
    local panel_phone = panel_main:getChildByName("Panel_phone")
    local panel_code = panel_main:getChildByName("Panel_code")
    local input_phone = panel_phone:getChildByName("text_input")
    local input_code = panel_code:getChildByName("text_input")
    self:createAni(panel_main)

    self.txt_time = panel_code:getChildByName("Text_time"):hide()
    self.txt_time:setString(self.allTime .. "s")
    self.input_phone = ClippingNodeUtils:resetEditBox(panel_phone, input_phone, { mode = cc.EDITBOX_INPUT_MODE_PHONENUMBER })
    self.input_code = ClippingNodeUtils:resetEditBox(panel_code, input_code, { mode = cc.EDITBOX_INPUT_MODE_NUMERIC })

    local btn_close = panel_main:getChildByName("btn_close")
    local btn_login = panel_main:getChildByName("btn_login")
    local btn_get_code = panel_code:getChildByName("btn_get_code")
    self.btn_get_code = btn_get_code
    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                self:removeFromParent()
            end)
        elseif btn == btn_login then
            if self.flag == 1 then
                self:gotoPhoneLogin()
            else
                self:bindPhone(1)
            end
        elseif btn == btn_get_code then
            self:getCode()
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_login, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_get_code, btnCall)

    if self.para then
        local txt_title = panel_title:getChildByName("Text_title")
        if self.para.title then
            txt_title:setString(self.para.title)
        end
        if self.para.btnStr then
            local txt_btn = btn_login:getChildByName("Text_btn")
            txt_btn:setString(self.para.btnStr)
        end
    end
end

function PhoneView:isPhoneNumber(phoneNumber)
    local len = string.len(phoneNumber)
    if len ~= 11 then
        return false
    end
    if string.match( phoneNumber,"%d+") ==  phoneNumber then
        return true
    end
    return false
end

-- 开始手机号登录
function PhoneView:gotoPhoneLogin()
    local phone = self.input_phone:getText()
    local code = self.input_code:getText()
    if not code or code == "" then
        GameTool:showTxtTip("验证码不能为空")
        return
    end
    if self:isPhoneNumber(phone) then
        local function successCallBack(data)
            local struct_PB = HttpInterfacePB_pb.PBLogonResp()
            struct_PB:ParseFromString(data)
            local result = struct_PB.result
            if not result.noError then
                removeWaiting()
                GameTool:showTxtTip(result.outMsg)
                return
            end
            local userId = struct_PB.userId
            local account = struct_PB.account
            local password = struct_PB.password
            UserData.Shared():setLoginType(LOGIN_TYPE_ACCOUNT)
            UserData.Shared():setUserAccountPassword(account, password)
            AccountDB.SetAccountInfo(userId, account, password, LOGIN_TYPE_ACCOUNT)
            LoginManager.Shared():ConnectServer()
            GameDB.SetValueForKey("isLoginOut", 0)
            print("手机登录：%d, %s, %s", userId, account, password)
        end
        local function failCallBack()
            removeWaiting()
            GameTool:showTxtTip("请求失败")
        end
        local pb = {
            mobile = phone,
            vcode = code,
        }
        showWaiting()
        HttpManager.Shared():sendPhoneLogin(pb, successCallBack, failCallBack)
    else
        GameTool:showTxtTip("请输入正确的手机号")
    end
end

-- 绑定解绑手机
-- flag 1 绑定手机  2 解绑手机
function PhoneView:bindPhone(flag)
    local phone = self.input_phone:getText()
    local code = self.input_code:getText()
    if not code or code == "" then
        GameTool:showTxtTip("验证码不能为空")
        return
    end
    if self:isPhoneNumber(phone) then
        local function successCallBack(data)
            local struct_PB = HttpInterfacePB_pb.PBBindPhoneResp()
            struct_PB:ParseFromString(data)
            local result = struct_PB.result
            if not result.noError then
                GameTool:showTxtTip(result.outMsg)
                return
            end
            removeWaiting()
            GameTool:showTxtTip("绑定成功")
            local userId = struct_PB.userId
            local account = struct_PB.account
            local password = struct_PB.password
            UserData.Shared():setLoginType(LOGIN_TYPE_ACCOUNT)
            UserData.Shared():setUserAccountPassword(account, password)
            AccountDB.SetAccountInfo(userId, account, password, LOGIN_TYPE_ACCOUNT)
            if self.parent then
                self.parent:setBtnShow()
                self:removeFromParent(true)
            end
        end
        local function failCallBack()
            removeWaiting()
            GameTool:showTxtTip("请求失败")
        end
        local userId = UserData.Shared().dwUserID
        local userToken = UserData.Shared().szValidCode
        local opType = flag
        local pb = {
            userId = userId,
            userToken = userToken,
            opType = opType,
            mobile = phone,
            vcode = code,
        }
        showWaiting()
        HttpManager.Shared():sendPhoneBind(pb, successCallBack, failCallBack)
    else
        GameTool:showTxtTip("请输入正确的手机号")
    end
end

-- 获取验证码
function PhoneView:getCode()
    local mobile = self.input_phone:getText()
    if self:isPhoneNumber(mobile) then
        self:sendCode()
        self:startCountDown()
    else
        GameTool:showTxtTip("请输入正确的手机号")
    end
end

-- 验证码请求
function PhoneView:sendCode()
    local function successCallBack(data)
        local struct_PB = HttpInterfacePB_pb.PBLogonResp()
        struct_PB:ParseFromString(data)
        local result = struct_PB.result
        if not result.noError then
            GameTool:showTxtTip(result.outMsg)
            return
        end
        GameTool:showTxtTip("验证码已发送，请注意查收")
    end
    local function failCallBack()
        GameTool:showTxtTip("请求失败")
    end
    local mobile = self.input_phone:getText()
    local pb = {
        mobile = mobile,
        flag = self.flag
    }
    HttpManager.Shared():sendReqVCode(pb, successCallBack, failCallBack)
end

-- 开始倒计时
function PhoneView:startCountDown()
    local function update(dt)
        if self.curTime > 0 then
            self.curTime = self.curTime - dt
            self.txt_time:setString(self.curTime .. "s")
        else
            self.curTime = self.allTime
            self.txt_time:hide()
            self.btn_get_code:show()
            self:stopCountDown()
        end
    end
    self.txt_time:show()
    self.btn_get_code:hide()
    self.txt_time:setString(self.allTime .. "s")
    if not self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.mainScheduler = scheduler:scheduleScriptFunc(update, 1, false)
    end
end

-- 停止倒计时
function PhoneView:stopCountDown()
    if self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.mainScheduler)
        self.mainScheduler = nil
    end
end

function PhoneView:addNotify()

end

function PhoneView:removeNotify()

end

function PhoneView:onExit()
    self:removeNotify()
    self:stopCountDown()
end

return PhoneView
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/9 10:08
---

local GameView = class("GameView", ViewBase)
local zIndex = {
    touchLayer = 9999,
}
local partTime = 27
function GameView:ctor(para)
    UserData.Shared().isInGame = true
    self:enableNodeEvents()
    self:initManager()
    self:initData(para)
    self:addNotify()
end

function GameView:onEnter()
    self:initView()
    self:initTouchEvent()
    self:initActRoleList()
    self:initSkillData()
    self:handleSnapshot()
    self:scheduleUpdate()
    self:refreshBg()
    self:updateWallHp(self.curWallHp)
    self:updateLockSlotData(self.cellNums)
    AudioManager:playSceneMusic(1)

    if self.sceneInfo.sceneID == 3 then
        local guideFlag = GameDB.GetNumForKey("showUseSpeedGuide", 0)
        if guideFlag == 0 then
            GameDB.SetValueForKey("showUseSpeedGuide", 1)
            self:showUseSpeedGuide()
        end
    end
end

function GameView:initData(para)
    local data = para.data
    self.snapshotInfo = para.snapshotInfo
    self.homeView = para.homeView
    self.roleNodes = {}
    self.actRoleList = {}

    -- 场景关卡信息
    self.sceneInfo = {
        sceneID = para.sceneId,     -- 第几个场景
        levelNum = 0,               -- 这个场景有多少关
        partNum = 0,                -- 这关有多少波
    }

    -- 道具掉落列表
    self.dropPropList = {}

    -- 三选二技能列表
    self.selectData = {}

    -- 角色三选二技能数据
    self.skillData = {}

    -- 角色三选二技能详细属性值
    self.skillValue = {}

    local sceneInfo = GameTool:getSceneInfo(self.sceneInfo.sceneID)
    self.sceneInfo.levelName = sceneInfo.Name
    self.curScene = self.sceneInfo.sceneID

    self.curLockIdx = 0     -- 当前要解锁的槽位
    self:initGameLevelData(data)

    self.curRoleIdx = 0     -- 当前已加载的角色数
    self.allRoleNum = 0     -- 总共上阵的角色数量
    self.isWin = false      -- 是否胜利通过

    self.dtNum = 0
    self.dpsTime = 0
    self.dpsTimeTmp = 0
    self.partTime = partTime
    self.curSpeed = 1           -- 当前游戏倍速

    local sceneID = self.sceneInfo.sceneID
    if sceneID < 6 and sceneID >= 3 then
        UserData.Shared().isFreeCard = true
    end
end

-- 初始化出战列表
function GameView:initActRoleList()
    local roleInfoList = UserData.Shared().roleInfoList
    for _, v in pairs(roleInfoList) do
        if v.isDispatch == 1 then
            self.actRoleList[v.position] = v.roleId
            MsgSendMgr:sendRoleAttrDataReq(v.roleId)
            self.allRoleNum = self.allRoleNum + 1
        end
    end
end

-- 初始化三选二技能配置
function GameView:initSkillData()
    local isCardUser = UserData.Shared():isCardUser()
    local isFreeCard = UserData.Shared().isFreeCard
    for i, v in pairs(self.actRoleList) do
        if isCardUser or isFreeCard then
            self.skillData[i] = { roleId = v, skillList = { 0, 0, 0, 0 } }
        else
            self.skillData[i] = { roleId = v, skillList = { 0, 0, -1, -1 } }
        end
        self.skillValue[v] = { {}, {}, {}, {} }
    end
    self:getCurUnLockSlot()
end

-- 初始化关卡信息
function GameView:initGameLevelData(data)
    local monsterList = data.monster        -- 怪物信息列表
    local dropList = data.drop              -- 掉落信息
    local ability = data.ability            -- 三选二信息
    local gameWorld = data.gameWorld        -- 第几个场景
    local levelNums = data.levelNums        -- 总关卡数
    local gameLevel = data.gameLevel        -- 第几关
    local partNums = data.partNums          -- 本关几波怪物
    local gamePart = data.gamePart          -- 当前第几波怪物
    local blood = data.blood                -- 血量信息
    local maxBlood = data.maxBlood          -- 最大血量信息
    local monsterOpen = data.monsterOpen    -- 出现的新怪物
    local partnerEffect = data.partnerEffect-- 是不是宝箱怪关卡
    local cellNums = data.cellNums          -- 技能格子数量

    self.curScene = gameWorld
    --self.dropPropList = {}
    for i, v in ipairs(dropList) do
        local dropData = {
            rewardType = v.rewardType,
            rewardID = v.rewardId,
            rewardNum = v.rewardNums,
            isBoss = v.isBoss,
        }
        table.insert(self.dropPropList, dropData)
    end

    if partnerEffect == 1 then
        -- 初始化三选二技能
        for i, v in ipairs(ability) do
            self.selectData[i] = {
                buffId = v.buffId,
                Icon = v.Icon,
                buffValue = v.buffValue,
                SpecialSkillType = v.SpecialSkillType,
                SpecialSkillValue = v.SpecialSkillValue,
            }
        end
    end
    self.heroMgr:setSkillRecover(partnerEffect == 0)
    self.monsterList = monsterList
    self.curWallHp = GameTool:dataEncrypt(blood)
    self.maxWallHp = GameTool:dataEncrypt(maxBlood)
    self.sceneInfo.levelNum = levelNums
    self.sceneInfo.partNum = partNums
    self.curLevel = gameLevel
    self.curPart = gamePart
    self.monsterOpen = monsterOpen
    self.partnerEffect = partnerEffect
    printf("---------- 初始化关卡信息 ----------")
    printf("总关卡数:%d", levelNums)
    printf("总波数:%d", partNums)
    printf("当前关卡:%d", gameLevel)
    printf("当前波:%d", gamePart)
    printf("宝箱怪:%d", partnerEffect)
    printf("当前城墙血量:%d", blood)
    printf("新怪物解锁:%d", monsterOpen)
    printf("---------- 初始化关卡信息 ----------")

    local totalDps = UserData.Shared().totalDps
    totalDps.heroDpsTmp = 0
    totalDps.sceneDpsTmp = 0
    self.partTime = partTime
    self:stopPartCountdown()
    if partNums > 0 then
        performWithDelay(self, function ()
            self:startPartCountdown()
        end, 1)
    else
        self.partTime = partTime
        self:setTxtPart()
    end
    if blood <= 0 then
        self.state = Define.state.pause
        MsgSendMgr:sendIsCanRevive()
    end
    if gameWorld == 1 then
        Define.skillBallGet = 1
    end
    self.cellNums = cellNums
end

function GameView:initManager()
    GameTool:setGameView(self)
    local enemyManager = require("JunTuan.src.controllers.EnemyManager")
    local heroManager = require("JunTuan.src.controllers.HeroManager")
    local bulletManager = require("JunTuan.src.controllers.BulletManager")
    self.enemyMgr = enemyManager:getInstance()
    self.heroMgr = heroManager:getInstance()
    self.bulletMgr = bulletManager:getInstance()
    self.gameDataMgr = GameDataManager:getInstance()
    self.enemyMgr:setGameView(self)
    self.enemyMgr:addNotify()
end

function GameView:initTouchEvent()
    local function touchBegin(touch, event)
        if self.state ~= Define.state.running then
            self:hideSkillTipArea()
            self.selectRoleNode = nil
            return
        end
        local pos = touch:getLocation()
        if cc.rectContainsPoint(self.panel_player.box, pos) then
            self.selectRoleNode = self:getTouchRoleNode(pos)
        else
            self:hideSkillTipArea()
            self.selectRoleNode = nil
        end
        return true
    end

    local function touchMove(touch, event)
        if self.state ~= Define.state.running then
            self:hideSkillTipArea()
            self.selectRoleNode = nil
            return
        end
        local pos = touch:getLocation()
        if cc.rectContainsPoint(self.panel_player.box, pos) then
            self:hideSkillTipArea(pos)
        else
            self:showSkillTipArea(pos)
        end
    end

    local function touchEnd(touch, event)
        if self.state ~= Define.state.running then
            self:hideSkillTipArea()
            self.selectRoleNode = nil
            return
        end
        local pos = touch:getLocation()
        self:hideSkillTipArea(pos)
        if not cc.rectContainsPoint(self.panel_player.box, pos) then
            self:useSkill()
        end
        self.selectRoleNode = nil
    end
    self.touchBegin = touchBegin
    self.touchMove = touchMove
    self.touchEnd = touchEnd
    self.touchLayer = ExternalTools:addTouchLayer(self.csbNode, zIndex.touchLayer, touchBegin, touchMove, touchEnd)
end

function GameView:refreshBg()
    --local idx = self.gameDataMgr.sceneData.BgIcon % 10
    local idx = 1
    local name = string.format("res/JunTuan/img/bg%d.jpg", idx)
    self.img_bg:loadTexture(name, ccui.TextureResType.localType)
end

function GameView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.GameView.game_view,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self.csbNode = ui
    self:addChild(ui)

    local panel_main = ui:getChildByName("Panel_main")
    local img_bg = panel_main:getChildByName("img_bg")
    img_bg:loadTexture("res/JunTuan/img/bg1.jpg", ccui.TextureResType.localType)
    self.img_bg = img_bg
    local panel_bottom = panel_main:getChildByName("panel_bottom")          -- 底部特效层
    local panel_enemy = panel_main:getChildByName("panel_enemy")            -- 怪物层
    local panel_pet = panel_main:getChildByName("panel_pet")                -- 宠物层
    local panel_player = panel_main:getChildByName("panel_player")          -- 英雄层
    local panel_top = panel_main:getChildByName("panel_top")                -- 顶部特效、ui层
    local panel_pause = panel_main:getChildByName("panel_pause")            -- 暂停界面
    local panel_over = panel_main:getChildByName("panel_over")              -- 结算界面
    self.panel_main = panel_main
    self.panel_enemy = panel_enemy
    self:initPanelPlayer(panel_player)
    self:initPanelTop(panel_top)
    self:initPanelPause(panel_pause)
    self:initPanelOver(panel_over)
end

-- 加速功能提示
function GameView:showUseSpeedGuide()
    local img_hand = cc.Sprite:createWithSpriteFrameName("img_guide_hand_game_jtdzz.png")
    img_hand:setScale(1)
    local p = cc.p(self.btn_speed:getPosition())
    p.y = p.y - 25
    img_hand:setPosition(p)
    local scaleTo1 = cc.ScaleTo:create(0.5, 1.2)
    local scaleTo2 = cc.ScaleTo:create(0.5, 1)
    local seq = cc.Sequence:create(scaleTo1, scaleTo2)
    local act = cc.RepeatForever:create(seq)
    img_hand:runAction(act)
    self.btn_speed:getParent():addChild(img_hand)
    self.guide_hand = img_hand

    local str = "点击可以开启游戏加速功能"
    local delay = 2.5
    self:showTipsPanel(str, _, delay)

    performWithDelay(img_hand, function ()
        img_hand:removeFromParent(true)
        self.guide_hand = nil
    end, 5)
end

function GameView:showUseSkillGuide()
    local sceneID = self.sceneInfo.sceneID
    if sceneID == 1 then
        local str = "滑动角色可释放技能"
        local delay = 5
        self:showTipsPanel(str, _, delay)

        local img_hand = cc.Sprite:createWithSpriteFrameName("img_guide_hand_game_jtdzz.png")
        self.img_hand = img_hand
        self.panel_main:addChild(img_hand, 9999)

        local pos = self.roleNodes[1].pos
        local toPos = cc.p(pos.x + 50, pos.y + 150)
        self.img_hand:stopAllActions()
        self.img_hand:setPosition(pos)
        local moveTo = cc.MoveTo:create(1, cc.p(toPos))
        local seq = cc.Sequence:create(
                moveTo,
                cc.CallFunc:create(function ()
                    self.img_hand:setPosition(pos)
                end)
        )
        self.img_hand:runAction(cc.RepeatForever:create(seq))
    end
end

-- 三选二选择技能指导
function GameView:showSelectSkillGuide(img_hand, pos)
    local sceneID = self.sceneInfo.sceneID
    if sceneID == 3 then
        local key = string.format("isGuide_%d", sceneID)
        local isGuide = GameDB.GetNumForKey(key, 0)
        if isGuide then
            GameDB.SetValueForKey(key, 1)
            local img_hand = img_hand:show()
            local parent = img_hand:getParent()
            pos = parent:convertToNodeSpace(pos)
            local toPos = img_hand.toPos
            img_hand:stopAllActions()
            img_hand:setPosition(pos)
            local moveTo = cc.MoveTo:create(1, cc.p(toPos))
            local seq = cc.Sequence:create(
                    moveTo,
                    cc.CallFunc:create(function()
                        img_hand:setPosition(pos)
                    end)
            )
            img_hand:runAction(cc.RepeatForever:create(seq))
        end
    end
end

function GameView:createHeroNode(data)
    self.curRoleIdx = self.curRoleIdx + 1
    if self.curRoleIdx <= self.allRoleNum then
        local roleType = data.roleId
        local roleInfo = UserData.Shared().roleValueList[roleType]
        local posIdx = UserData.Shared().roleInfoList[roleType].position
        local node = self.panel_player:getChildByName("role_" .. posIdx)
        if node then
            --node:setBackGroundColorType(ccui.LayoutBackGroundColorType.solid) --设置颜色
            --node:setBackGroundColor(cc.c3b(51, 51, 51))
            --node:setBackGroundColorOpacity(255)    --设置透明

            local size = node:getContentSize()
            if roleType ~= 0 then
                local hero = self.heroMgr:createHero(roleInfo, size)
                hero:setGameView(self)
                --hero:setPosition(cc.p(size.width / 2, size.height / 2))
                node.hero = hero
                node:addChild(hero)
            end
            node.size = size
            node.box = node:getBoundingBox()
            node.pos = cc.p(node:getPosition())
            self.roleNodes[roleType] = node
        end
    end
    if self.curRoleIdx == self.allRoleNum then
        -- 所有角色加载完毕，开始生成怪物
        self:createEnemies()
    end
end

function GameView:initPanelPlayer(panel)
    self.panel_player = panel
    self.panel_player.box = panel:getBoundingBox()
end

function GameView:initPanelTop(panel)
    self.panel_top = panel
    local panel_effect = panel:getChildByName("panel_effect")               -- 特效层
    local panel_wall = panel_effect:getChildByName("panel_wall")            -- 城墙
    local panel_boss_new = panel_effect:getChildByName("panel_boss_new")    -- 发现新物种
    local panel_coming = panel_effect:getChildByName("panel_coming")        -- Boss来临
    local panel_level = panel_effect:getChildByName("Panel_level")          -- 关卡信息文本
    local panel_ui = panel:getChildByName("panel_ui")                       -- ui层
    self.panel_wall = panel_wall
    self.panel_boss_new = panel_boss_new:hide()
    self.panel_coming = panel_coming:hide()
    self.panel_level = panel_level
    panel_effect:setLocalZOrder(2)
    panel_ui:setLocalZOrder(1)
    panel_level:setEnabled(false)
    self:initPanelUI(panel_ui)
    self:initPanelProp(panel_ui)
    self:initPanelBossNew()
    self:addCardBtnEffect(panel_ui)
    self:updatePaneLevel(0)
end

function GameView:initPanelPause(panel)
    self.panel_pause = panel:hide()
    local btn_continue = panel:getChildByName("btn_continue")
    local btn_home = panel:getChildByName("btn_home")
    local btn_unlock = panel:getChildByName("btn_unlock")
    btn_unlock:getChildByName("img_video"):hide()
    self.panel_pause.btn_unlock = btn_unlock
    self.panel_pause.txt_slot = btn_unlock:getChildByName("txt_num")
    local function btnCall(btn)
        if btn == btn_continue then
            self.panel_pause:hide()
            self.state = Define.state.running
        elseif btn == btn_home then
            self:sendExitGame()
        elseif btn == btn_unlock then
            self:showUnLockTip()
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_continue, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_home, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_unlock, btnCall)
end

-- 刷新角色技能面板
function GameView:refreshRoleSkill()
    local function initItem(item, data)
        item:show()
        local img_head_bg = item:getChildByName("img_head_bg")
        local img_head = img_head_bg:getChildByName("img_head")
        img_head:ignoreContentAdaptWithSize(true)
        GameTool:setRoleHeadImg(data.roleId, img_head)
        for i = 1, 4 do
            local skillId = data.skillList[i]
            --[[if not item.txt_des and skillId > 0 then
                local cfg = GameTool:getThreeTwoDes(skillId)
                if cfg then
                    local txt_des = ccui.Text:create(str, "res/YOUYUAN.TTF", 22)
                    txt_des:enableOutline(cc.c4b(0, 0, 0, 255), 2)
                    local str
                    if skillId > 3 then
                        local v = self.skillValue[data.roleId][i].buffValue
                        str = string.format("%s+%d%%", cfg.Name, v / 100)
                    else
                        str = string.format("%s", cfg.Name)
                    end
                    local s = item:getContentSize()
                    txt_des:setString(str)
                    txt_des:setPosition(cc.p(s.width / 2, 30))
                    item.txt_des = txt_des
                    item:addChild(txt_des)
                end
            end]]

            local skill = item:getChildByName("img_skill_bg_" ..i):show()
            skill:loadTexture("img_skill_bg_game_jtdzz.png", 1)
            skill:setContentSize(cc.size(110, 110))
            local panel_skill = skill:getChildByName("panel_skill")
            if skillId == -1 then
                panel_skill:ignoreContentAdaptWithSize(true)
                panel_skill:setBackGroundImage("icon_lock_home_jtdzz.png", 1)
                panel_skill:setScale(0.6)
            elseif skillId == 0 then
                panel_skill:hide()
            else
                panel_skill:show()
                panel_skill:setScale(1)
                GameTool:setThreeTwoImg(data.skillList[i], panel_skill, true)
                panel_skill:ignoreContentAdaptWithSize(false)
                panel_skill:setContentSize(cc.size(90, 88))
            end
        end
    end
    if self.curLockIdx <= 4 and self.curLockIdx > 0 then
        self.panel_pause.txt_slot:setString(self.curLockIdx)
    else
        self.panel_pause.btn_unlock:hide()
    end
    for i = 1, 5 do
        local data = self.skillData[i]
        local role_skill = self.panel_pause:getChildByName("role_skill_" .. i):hide()
        if data then
            local roleId = data.roleId
            role_skill:setVisible(roleId ~= 0)
            initItem(role_skill, data)
        end
    end
end

function GameView:initPanelOver(panel)
    self.panel_over = panel:hide()
    local panel_get = panel:getChildByName("panel_get")
    self.listView_get = panel_get:getChildByName("listView_get")
    self.listView_get:setScrollBarEnabled(false)
    self.item_list = panel_get:getChildByName("item_list"):hide()
    self.item_get = self.item_list:getChildByName("panel_item"):hide()
    self.item_get.size = self.item_get:getContentSize()
    self.item_list.size = self.item_list:getContentSize()
    local btn_get = panel:getChildByName("btn_get")
    btn_get:getChildByName("txt_btn"):setString("确  定")
    local function btnCall(btn)
        if btn == btn_get then
            self.homeView.gameView = nil
            --self:removeFromParent()
            local function call()
                if self.sceneInfo.sceneID == 2 then
                    local showFlag = GameDB.GetNumForKey("isFreeCard", 0)
                    if showFlag == 0 then
                        local scene = SceneManager.Shared():GetRunningScene()
                        GameDB.SetValueForKey("isFreeCard", 1)
                        GameTool:showGameTipView(scene, _, 9998)
                    end
                end
            end
            self:showLoading(call)
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_get, btnCall)
end

function GameView:changeGameSpeed(txt)
    if self.curSpeed == 1 then
        local isWeekCard = UserData.Shared():isWeekCardUser()       -- 是否周卡
        local isMonthCard = UserData.Shared():isMonthCardUser()     -- 是否月卡
        local isFreeCard = UserData.Shared().isFreeCard             -- 是否免费体验
        if isWeekCard or isMonthCard or isFreeCard then
            self.curSpeed = 2
        else
            GameTool:showTxtTip("周卡用户可以2倍加速")
            GameTool:showBuyCardView(self, Define.CARDS_CFG.WEEK_ID)
        end
    elseif self.curSpeed == 2 then
        local isMonthCard = UserData.Shared():isMonthCardUser()
        --local isFreeCard = UserData.Shared().isFreeCard             -- 是否免费体验
        if isMonthCard then
            self.curSpeed = 3
        else
            self.curSpeed = 1
            GameTool:showTxtTip("月卡用户可以3倍加速")
            GameTool:showBuyCardView(self, Define.CARDS_CFG.MONTH_ID)
        end
    elseif self.curSpeed == 3 then
        self.curSpeed = 1
    end
    txt:setString("x" .. self.curSpeed)
end

function GameView:initPanelUI(panel)
    local bg_money = panel:getChildByName("bg_money")--:hide()
    local btn_speed = panel:getChildByName("btn_speed")--:hide()
    local btn_pause = panel:getChildByName("btn_pause")
    local panel_soul = panel:getChildByName("Panel_soul")
    panel_soul:getChildByName("btn_add")--:hide()
    panel_soul:getChildByName("btn_add"):setEnabled(false)
    local txt_speed = btn_speed:getChildByName("Text_num")
    txt_speed:setString("x1")
    if self.curScene <= 2 then
        btn_pause:hide()
        btn_speed:hide()
    end
    self.btn_speed = btn_speed
    self.txt_money = bg_money:getChildByName("txt_money")       -- 获得金币数文本
    self.txt_gem = panel_soul:getChildByName("Text_num")          -- 钻石数文本
    self.txt_gem:setString(UserData.Shared():get_lDiamond())
    local function btnCall(btn)
        if btn == btn_speed then
            if self.guide_hand then
                self.guide_hand:removeFromParent()
                self.guide_hand = nil
            end
            self:changeGameSpeed(txt_speed)
        elseif btn == btn_pause then
            self.panel_pause:show()
            self:refreshRoleSkill()
            self.state = Define.state.pause
        elseif btn == panel_soul then
            --if self.homeView and self.homeView.parent then
            --    self.homeView.parent:showBuyGemView()
            --end
            GameTool:showBuyGemView(self)
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_speed, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_pause, btnCall)
    ExternalTools:addBtnTouchEventListener(panel_soul, btnCall)
end

function GameView:setPropBtnStyle(btn)
    local gem_cost = btn.data.gem_cost
    local myHaveNum = 0
    local txt_num = btn:getChildByName("Text_num")
    local img_mask = btn:getChildByName("img_mask")
    if myHaveNum > 0 then
        img_mask:hide()
        txt_num:setString(myHaveNum)
    else
        img_mask:show()
        txt_num:setString("x" .. gem_cost)
        local w = txt_num:getContentSize().width
        local x = txt_num:getPositionX()
        img_mask:setPositionX(x - w - 5)
    end
end

function GameView:showPropSm()
    local para = {
        csb = JunTuanCfg.csbCfg.GameView.prop_sm,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self.csbNode = ui
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)
    local prop_id = {
        Define.PropSkillIdx.crazy,
        Define.PropSkillIdx.frozen,
        Define.PropSkillIdx.missile,
    }
    for i, v in pairs(prop_id) do
        local panel = panel_main:getChildByName("Panel_prop_" .. i)
        local txt_detail = panel:getChildByName("Text_detail")
        local str_des = Define.PropSkillDes[v]
        txt_detail:setString(str_des)
    end
    local btn_close = panel_main:getChildByName("btn_close")
    local function exit()
        self:destroyAni(panel_main, function ()
            ui:removeFromParent()
        end)
    end
    ExternalTools:addBtnTouchEventListener(btn_close, exit)
    ExternalTools:addBtnTouchEventListener(panel_black, exit, true)
end

function GameView:initPanelProp(panel)
    local btn_sm = panel:getChildByName("btn_prop_explain")         -- 道具说明
    local prop_crazy = panel:getChildByName("Panel_prop_1")         -- 狂暴
    local prop_frozen = panel:getChildByName("Panel_prop_2")        -- 冰封
    local prop_missile = panel:getChildByName("Panel_prop_3")       -- 全屏导弹
    local propData = {
        { gem_cost = 50, duration = 5, coolTime = 60 },
        { gem_cost = 50, duration = 3, coolTime = 60 },
        { gem_cost = 200, duration = 0, coolTime = 300 },
    }
    prop_crazy.data = propData[1]
    prop_frozen.data = propData[2]
    prop_missile.data = propData[3]
    local function isCanUse(btn)
        local gem_cost = btn.data.gem_cost
        local myGem = UserData.Shared():get_lDiamond()
        local myHaveNum = 0
        if myHaveNum <= 0 then
            if myGem < gem_cost then
                GameTool:showTxtTip("钻石不足")
                GameTool:showBuyGemView(self)
                return false
            end
        end
        return true
    end

    local function btnCall(btn)
        if btn == btn_sm then
            self:showPropSm()
        else
            if isCanUse(btn) then
                self.curSkillBtn = btn
                if btn == prop_crazy then
                    self.curUsePropID = 1
                    MsgSendMgr:sendUseProp(1)
                    --self:useCrazy(btn)
                elseif btn == prop_frozen then
                    self.curUsePropID = 2
                    MsgSendMgr:sendUseProp(2)
                    --self:useFrozen(btn)
                elseif btn == prop_missile then
                    self.curUsePropID = 3
                    MsgSendMgr:sendUseProp(3)
                    --self:useMissile(btn)
                end
            end
        end
    end
    self:setPropBtnStyle(prop_crazy)
    self:setPropBtnStyle(prop_frozen)
    self:setPropBtnStyle(prop_missile)
    ExternalTools:addBtnTouchEventListener(btn_sm, btnCall)
    ExternalTools:addBtnTouchEventListener(prop_crazy, btnCall)
    ExternalTools:addBtnTouchEventListener(prop_frozen, btnCall)
    ExternalTools:addBtnTouchEventListener(prop_missile, btnCall)
end

-- 使用狂暴
function GameView:useCrazy(btn)
    local duration = btn.data.duration
    local coolTime = btn.data.coolTime
    local info = JunTuanCfg.spineAni.EffectAni.crazy
    local ani_tishi = AnimationMgr:createSpine(info.file)
    ani_tishi:setAnimation(0, info.names[2], false)
    ani_tishi:setPosition(cc.p(display.center.x, display.center.y - 50))
    self:addChild(ani_tishi, zIndex.touchLayer - 1)
    performWithDelay(ani_tishi, function ()
        ani_tishi:removeFromParent()
    end, 1 / self.curSpeed)

    Define.recoveryKill = Define.recoveryKill * Define.CRAZY_UP
    self.heroMgr:allHeroCrazy()
    local name = "img_mask_prop_game_jtdzz.png"
    self:propCooling(name, btn, coolTime)
    performWithDelay(btn, function ()
        self.heroMgr:allHeroUnCrazy()
        Define.recoveryKill = Define.recoveryKill / Define.CRAZY_UP
    end, duration / self.curSpeed)
end

-- 使用冰封
function GameView:useFrozen(btn)
    self.isFrozen = true
    local duration = btn.data.duration
    local coolTime = btn.data.coolTime
    local info = JunTuanCfg.spineAni.EffectAni.frozen
    local ani_tishi = AnimationMgr:createSpine(info.file)
    ani_tishi:setAnimation(0, info.names[1], false)
    ani_tishi:setPosition(cc.p(display.center.x, display.center.y - 100))
    ani_tishi:setScale(1.25)
    self:addChild(ani_tishi, zIndex.touchLayer - 1)

    local ani_frozen = AnimationMgr:createSpine(info.file)
    ani_frozen:setPosition(display.center)
    ani_frozen:setScaleX(1.25)
    self:addChild(ani_frozen, zIndex.touchLayer - 1)
    performWithDelay(ani_tishi, function ()
        ani_tishi:removeFromParent()
        ani_frozen:setAnimation(0, info.names[2], true)
        self.enemyMgr:frozenAllEnemy()
        local name = "img_mask_prop_game_jtdzz.png"
        self:propCooling(name, btn, coolTime)
        performWithDelay(btn, function ()
            self.isFrozen = false
            ani_frozen:removeFromParent()
            self.enemyMgr:unFrozenAllEnemy()
        end, duration / self.curSpeed)
    end, 1 / self.curSpeed)
end

-- 播放一个爆炸特效
function GameView:missileEffect()
    local info = JunTuanCfg.spineAni.EffectAni.missile
    local ani_tishi = AnimationMgr:createSpine(info.file)
    ani_tishi:setAnimation(0, info.names[2], false)
    ani_tishi:setPosition(cc.p(display.center.x, display.center.y - 50))
    self:addChild(ani_tishi, zIndex.touchLayer - 1)
    performWithDelay(ani_tishi, function ()
        ani_tishi:removeFromParent()
    end, 1 / self.curSpeed)

    local ani_missile = AnimationMgr:createSpine(info.file)
    ani_missile:setAnimation(0, info.names[3], true)
    self:addChild(ani_missile, zIndex.touchLayer - 1)
    ani_missile:setPosition(cc.p(display.width / 2, display.height + 50))
    ani_missile:setRotation(180)
    ani_missile:runAction(cc.Sequence:create(
            cc.MoveTo:create(0.3 / self.curSpeed, cc.p(display.center.x, display.center.y + 50)),
            cc.CallFunc:create(function ()
                ani_missile:removeFromParent()
                local ani_bomb = AnimationMgr:createSpine(info.file)
                ani_bomb:setAnimation(0, info.names[1], false)
                ani_bomb:setPosition(display.center)
                self:addChild(ani_bomb, zIndex.touchLayer - 1)
                performWithDelay(ani_bomb, function ()
                    self.enemyMgr:bombAllEnemy()
                    ani_bomb:removeFromParent()
                end, 0.65 / self.curSpeed)
            end)
    ))
end

-- 使用导弹
function GameView:useMissile(btn)
    self:missileEffect()
    local coolTime = btn.data.coolTime
    local name = "img_mask_prop_game_jtdzz.png"
    self:propCooling(name, btn, coolTime)
end

-- 使用的道具进入冷却时间
function GameView:propCooling(name, prop, time, endCall)
    prop:setTouchEnabled(false)
    local s = prop:getContentSize()
    local sprite = cc.Sprite:createWithSpriteFrameName(name)
    sprite:setContentSize(cc.size(s.width - 5, s.height - 5))

    local progressBar = cc.ProgressTimer:create(sprite)
    progressBar:setType(cc.PROGRESS_TIMER_TYPE_RADIAL)
    progressBar:setPercentage(100)
    progressBar:setReverseDirection(true)
    progressBar:setColor(cc.c3b(50, 50, 50))
    progressBar:setPosition(cc.p(s.width / 2, s.height / 2))
    progressBar:addTo(prop)

    local progressTo = cc.ProgressFromTo:create(time, 100, 0)
    progressBar:runAction(cc.Sequence:create(
            progressTo,
            cc.CallFunc:create(function()
                if endCall then
                    endCall()
                end
                prop:setEnabled(true)
                prop:setTouchEnabled(true)
                progressBar:removeFromParent(true)
            end)
    ))
end

function GameView:initPanelBossNew()
    local panel = self.panel_boss_new
    local btn_close = panel:getChildByName("btn_close")
    local btn_confirm = panel:getChildByName("btn_confirm")
    local function btnCall()
        self.state = Define.state.running
        self.panel_boss_new:hide()
        self:guideTip()
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_confirm, btnCall)
end

function GameView:updatePaneLevel(partNum)
    local panel = self.panel_level
    local txt_scene = panel:getChildByName("Text_level_1")
    local txt_part = panel:getChildByName("Text_level_2")
    self.txt_dps = panel:getChildByName("Text_level_3")         -- 伤害统计
    self.txt_dps:hide()
    self.txt_part = txt_part
    local s, n, l = self.curScene, self.sceneInfo.levelName, self.curLevel
    local str1 = string.format("%d.%s 第%d关", s, n, l)
    local str2 = string.format("波数：%d/%d", self.curPart, partNum)
    txt_scene:setString(str1)
    txt_part:setString(str2)
    if self.curPart > partNum or partNum <= 1 then
        txt_part:hide()
    else
        txt_part:show()
    end
end

function GameView:updateDps(dt)
    local totalDps = UserData.Shared().totalDps
    local dps = totalDps.heroDpsTmp + totalDps.sceneDpsTmp
    self.dpsTime = self.dpsTime + dt

    --if self.dpsTimeTmp >= 1 then
    --    dps = dps / self.dpsTime
    --    self.dpsTimeTmp = 0
    --    self.txt_dps:setString("DPS:" .. math.floor(dps))
    --end
    --if dps > 0 then
        --self.dpsTime = self.dpsTime + dt
        --if self.dpsTime >= 5 then
        --    -- 重新统计
        --    self.dpsTime = 0
        --    totalDps.heroDpsTmp = 0
        --    totalDps.sceneDpsTmp = 0
        --end
    --end
    --[[if dps > 0 then
        self.isStartDps = true
        self.txt_dps:setString("DPS:" .. math.floor(dps))

    else
        if self.isStartDps then
            self.dpsTimeTmp = self.dpsTimeTmp + dt
            if self.dpsTimeTmp >= 1 then
                --self.isStartDps = false
                self.dpsTimeTmp = 0
                totalDps.heroDpsTmp = 0
                totalDps.sceneDpsTmp = 0
                --local dps = totalDps.heroDps + totalDps.sceneDps
                --dps = dps / self.dpsTime
                dps = 0
                self.txt_dps:setString("DPS:" .. math.floor(dps))
            end
        end

    end]]
end

function GameView:getTouchRoleNode(pos)
    if self.selectRoleNode then
        self:hideSkillTipArea()
        self.selectRoleNode = nil
    end
    for i, v in pairs(self.roleNodes) do
        local box = v.box
        if cc.rectContainsPoint(box, pos) then
            return v
        end
    end
end

function GameView:showSkillTipArea(pos)
    if self.selectRoleNode then
        local hero = self.selectRoleNode.hero
        hero:showSkillTipArea(pos)
    end
end

function GameView:hideSkillTipArea(pos)
    if self.selectRoleNode then
        local hero = self.selectRoleNode.hero
        hero:hideSkillTipArea(pos)
    end
end

function GameView:useSkill()
    if self.selectRoleNode then
        local hero = self.selectRoleNode.hero
        hero:useSkill()
        if self.img_hand then
            self.img_hand:removeFromParent(true)
            self.img_hand = nil
        end
    end
end

-- 世界文本提示
function GameView:showWorldTxtTip(name, pos)
    local spr_tip = cc.Sprite:createWithSpriteFrameName(name .. ".png")
    if spr_tip then
        spr_tip:setPosition(pos)
        spr_tip:setOpacity(255)
        spr_tip:setScale(0.2)
        self.panel_top:addChild(spr_tip)
        spr_tip:runAction(cc.Sequence:create(
                cc.ScaleTo:create(0.1, 2),
                cc.DelayTime:create(0.4),
                cc.Spawn:create(
                        cc.MoveBy:create(0.2, cc.p(15, 15)),
                        cc.FadeTo:create(0.2, 55)
                ),
                cc.CallFunc:create(function ()
                    spr_tip:removeFromParent(true)
                end)
        ))
    end
end

function GameView:showView(view)
    view:setAnchorPoint(0.5, 0.5)
    view:setPosition(display.center)
    self:addChild(view, 9999)
end

-- 三选二界面
function GameView:showThree_two()
    local para = {
        parent = self
    }
    local view = require("JunTuan.src.views.ThreeTwoView").new(para)
    self:showView(view)
    self.threeTwoView = view
end

-- 显示加载界面
function GameView:showLoading(call)
    local function overCall()
        if call then
            call()
        end
        self:removeFromParent(true)
    end
    local para = {
        overCall = overCall,
        time = 1,
        from = "game"
    }
    local scene = SceneManager.Shared():GetRunningScene()
    local layer = require("JunTuan.src.views.GameLoadingView").new(para)
    ExternalTools:showView(layer, scene, zIndex.touchLayer)
end

function GameView:setEnemyTable(bullet)
    if self.partnerEffect == 1 then
        bullet:setEnemyTable(self.enemyMgr.boxEnemyTable)
    else
        bullet:setEnemyTable(self.enemyMgr.enemyTable)
    end
end

function GameView:addBullet(info)
    local bullet = self.bulletMgr:createBullet(info)
    if info.heroType == 1 then
        bullet:setRotateInfo(info.rotation)
        bullet:setPositionInfo(info.pos)
        bullet:setScale(0.7)
    elseif info.heroType == 2 then
        if info.bulletType == Define.bulletType.ult_2 then
            local rotation = ExternalTools:getAngleByTowPoint(info.toPos, info.pos)
            rotation = 90 - math.deg(rotation)
            bullet:setScale(math.random(80, 110) / 100)
            bullet:setRotateInfo(rotation)
            bullet:setPositionInfo(info.pos)
        end
        if info.bulletType == Define.bulletType.atk_2 then
            bullet:setRotateInfo(info.rotation)
            bullet:setPositionInfo(info.pos)
            bullet:setScale(1.25)
        end
        local hero = self.roleNodes[2].hero
        bullet:setHero(hero)
        self:setEnemyTable(bullet)
    elseif info.heroType == 3 then
        bullet:setRotateInfo(info.rotation)
        bullet:setPositionInfo(info.pos)
    elseif info.heroType == 4 then
        bullet:setRotateInfo(info.rotation)
        bullet:setPositionInfo(info.pos)
    elseif info.heroType == 5 then
        bullet:setRotateInfo(info.rotation)
        bullet:setPositionInfo(info.pos)
        self:setEnemyTable(bullet)
    elseif info.heroType == 6 then
        info.rotation = 0
        bullet:setRotateInfo(info.rotation)
        bullet:setPositionInfo(info.pos)
        local hero = self.roleNodes[6].hero
        bullet:setHero(hero)
        self:setEnemyTable(bullet)
        --bullet:setScale(math.random(1, 1.1))
    end
    self.panel_enemy:addChild(bullet, zIndex.touchLayer)
end

function GameView:addEnemy(enemy)
    if not enemy._isBaby then
        local scale = 1e-4 * enemy.enemyInfo.IconZoom
        local w = display.width
        local s = display.height
        local x = math.random(120, w - 120)
        local y = math.random(s - 300, s - 100)
        local pos = cc.p(x, y)
        enemy:setScaleInfo(scale)
        enemy:setPositionInfo(pos)
        enemy:setOpacityInfo(255)
    end
    local y = enemy.pos.y
    local z = zIndex.touchLayer - y
    enemy.zOrder = z
    --if not enemy.isCache then
        self.panel_enemy:addChild(enemy, z)
    --else
    --    enemy:setLocalZOrder(z)
    --end

    if enemy.isBoss and not enemy._isBaby then
        self:bossComingTip(true)
    end
    if self.isFrozen then
        enemy.state = Define.state.frozen
    end
end

function GameView:addBoxEnemy(enemy)
    self.panel_enemy:addChild(enemy)
end

function GameView:createFunc()
    self.enemyMgr:productEnemiesEx(self.partnerEffect, self.monsterList)
    self:updatePaneLevel(self.sceneInfo.partNum)
    local MonsterOpen = self.monsterOpen
    if MonsterOpen and MonsterOpen ~= 0 then
        self:showNewEnemyPanel(MonsterOpen)
    end
    self:guideTip()
end

function GameView:createEnemies()
    self:createFunc()
end

-- 下一关
function GameView:nextLevel()
    self.curPart = self.curPart + 1
    if self.curPart > self.sceneInfo.partNum then
        self.curPart = 1
        self.curLevel = self.curLevel + 1
        if self.curLevel > self.sceneInfo.levelNum then
            self.curLevel = self.sceneInfo.levelNum
            self.state = Define.state.pause
            self.isWin = true
            MsgSendMgr:sendGameOver()
        else
            self:stopPartCountdown()
            MsgSendMgr:sendNextLevel()
        end
    else
        self:stopPartCountdown()
        MsgSendMgr:sendNextLevel()
    end
end

-- 普通怪检测
function GameView:normalCheck()
    for _, bullet in pairs(self.bulletMgr.bulletTable) do
        local bType = bullet.bulletType
        local flag1 = GameTool:isRoleBullet_1(bType)
        local flag2 = GameTool:isRoleBullet_5(bType)
        local flag3 = flag1 or flag2
        for _, enemy in pairs(self.enemyMgr.enemyTable) do
            if bullet:bulletHitCheck(enemy) then
                if flag3 then
                    if enemy.isWuWeiZhe then
                        -- 无畏者格挡
                        if flag2 then
                            bullet:ejectionOver()
                        else
                            bullet.state = Define.state.die
                        end
                        GameTool:wordTip(enemy, "gedang")
                        break
                    end
                end
                enemy:beHit(bullet)
                bullet:hitEnemy(enemy)
                if flag3 then
                    break
                end
            end
        end
    end
end

-- 宝箱怪碰撞检测
function GameView:boxCheck()
    local enemyTable = self.enemyMgr.boxEnemyTable
    for _, enemy in pairs(enemyTable) do
        if enemy.state and enemy.state ~= "siwang" then
            for _, bullet in pairs(self.bulletMgr.bulletTable) do
                if bullet:bulletHitCheck(enemy) then
                    enemy:beHit()
                    bullet:hitEnemy(enemy)
                    break
                end
            end
        end
    end
end

function GameView:collisionCheck()
    self:normalCheck()
    self:boxCheck()
end

function GameView:updateGame(dt)
    local t = dt * 1e3
    if self.inWater then
        self:updateWater(t)
    end
    if self.inDesert then
        self:updateDesert(t)
    end
    if self.inThunder then
        self:updateThunder(t)
    end
end

function GameView:scheduleUpdate()
    local function update(dt)
        dt = dt * self.curSpeed
        if self.state == Define.state.running then
            --self:updateGame(dt)
            self.enemyMgr:onFrame(dt)
            self.heroMgr:onFrame(dt)
            self.bulletMgr:onFrame(dt)
            self.dtNum = self.dtNum + 1
            if self.dtNum >= 5 then
                self.dtNum = 0
                self:collisionCheck()
            end
            --self:updateDps(dt)
        end
    end

    self:scheduleUpdateWithPriorityLua(function(dt)
        update(dt)
    end, 0)
end

function GameView:initGetItem(item, data)
    item:show()
    local rewardType = data.rewardType
    local rewardID = data.rewardID
    local rewardNum = data.rewardNum
    local panel_equip = item:getChildByName("Panel_equip"):hide()
    local img_prop = item:getChildByName("img_prop"):hide()
    local txt_num = item:getChildByName("txt_num"):hide()
    if rewardType == Define.ENUM_REWARD_TYPE.EQUIPS then
        panel_equip:show()
        panel_equip:setScale(1.3)
        GameTool:setEquipImgById(rewardID, panel_equip)
    elseif rewardType == Define.ENUM_REWARD_TYPE.CHIPS then
        txt_num:show()
        txt_num:setString("x" .. rewardNum)
        local roleID = rewardID
        local node = GameTool:createChipNode(roleID)
        node:setScale(2)
        node:setPosition(cc.p(img_prop:getPosition()))
        item:addChild(node)
    else
        img_prop:show()
        txt_num:show()
        GameTool:setRewardImg(rewardType, rewardID, img_prop)
        txt_num:setString("x" .. rewardNum)
    end
end

function GameView:splitGetList(listData, num)
    local newList = {}
    for i, v in pairs(listData) do
        local row = math.ceil(i / num)
        local col = i % num
        col = col == 0 and num or col
        if not newList[row] then
            newList[row] = {}
        end
        newList[row][col] = v
    end
    return newList
end

function GameView:initItemList(panel, data, num)
    panel:show()
    local s = self.item_list.size
    local posXList = {
        s.width * 0.1172, s.width * 0.3672,
        s.width * 0.6172, s.width * 0.8672,
    }
    for i, v in pairs(data) do
        local x = posXList[i]
        printf("rewardType is %d, rewardID:%d, rewardNum:%d", v.rewardType, v.rewardID, v.rewardNum)
        local item = self.item_get:clone()
        self:initGetItem(item, v)
        item:setAnchorPoint(0.5, 0.5)
        item:setPositionX(x)
        panel:addChild(item)
    end
end

-- 刷新掉落列表
function GameView:refreshGetList(listData)
    --printf("---------- 刷新掉落列表 ----------")
    --for _, v in ipairs(listData) do
    --    local item = self.item_get:clone()
    --    self:initGetItem(item, v)
    --    self.listView_get:pushBackCustomItem(item)
    --    printf("rewardID:%d, rewardNum:%d", v.rewardID, v.rewardNum)
    --end
    --printf("---------- 刷新掉落列表 ----------")

    printf("---------- 刷新掉落列表 ----------")
    local num = 4
    local list = self:splitGetList(listData, num)
    for _, v in pairs(list) do
        local item = self.item_list:clone()
        self:initItemList(item, v, num)
        self.listView_get:pushBackCustomItem(item)
    end
    printf("---------- 刷新掉落列表 ----------")
end

-- 结束动画
function GameView:showOverAni(isWin)
    local panel_ani = self.panel_over:getChildByName("panel_ani")
    local size = panel_ani:getContentSize()
    local aniCfg = JunTuanCfg.spineAni.gameOverAni.lose
    if isWin then
        aniCfg = JunTuanCfg.spineAni.gameOverAni.win
    end
    local s, n, l = self.curScene, self.sceneInfo.levelName, self.curLevel
    local str = string.format("%d.%s 第%d关", s, n, l)
    local txt_tip = ccui.Text:create(str, "res/YOUYUAN.TTF", 35)
    txt_tip:setPosition(cc.p(size.width / 2, size.height / 2 - 68))
    local animation = AnimationMgr:createSpine(aniCfg.file)
    animation:setPosition(cc.p(size.width / 2, size.height / 2 - 100))
    animation:setAnimation(0, aniCfg.names[1], false)
    panel_ani:addChild(animation)
    panel_ani:addChild(txt_tip)
end

-- 询问复活界面
function GameView:showContinueView()
    if not self.gameFailView then
        local para = {
            parent = self,
        }
        local view = require("JunTuan.src.views.GameFailView").new(para)
        self:showView(view)
        self.gameFailView = view
    end
end

function GameView:showOverView(data)
    self.panel_over:show()
    self:showOverAni(data.isWin)
    self:refreshGetList(data.getList)
end

function GameView:continueGame(blood)
    self.state = Define.state.running
    self.gameFailView = nil
    self.curWallHp = blood
    self:updateWallHp(self.curWallHp)
    self.enemyMgr:repelAllEnemy()
end

-- 游戏结束
function GameView:gameOver(data)
    self.state = Define.state.pause
    self.touchLayer:setLocalZOrder(-1)
    self:showOverView(data)
end

function GameView:getPropToPos(data)
    local t = data.rewardType
    local i = data.rewardID
    local pos = cc.p(math.random(0, display.width), -530)
    if t == Define.ENUM_REWARD_TYPE.CHIPS then
        if self.roleNodes[i] then
            pos = self.roleNodes[i].pos
        end
    elseif t == Define.ENUM_REWARD_TYPE.EQUIPS then
        i = math.floor(i / 1000)
        if self.roleNodes[i] then
            pos = self.roleNodes[i].pos
        end
    end
    return pos
end

-- 掉落动画
function GameView:dropPropAni(prop, data)
    local p = data.pos
    local y = 50 * math.random() + 150
    local x = 100 * math.random() - 50
    prop:show()
    prop:setScale(0)
    if p.x + x < 50 then
        p.x = 50 - x
    elseif p.x + x > display.width - 50 then
        p.x = display.width - 50 - x
    end
    prop:setPosition(p)
    local toPos = self:getPropToPos(data)
    local seq = cc.Sequence:create(
            cc.DelayTime:create(math.random() / 5),
            cc.EaseSineOut:create(cc.Spawn:create(
                    cc.MoveBy:create(0.25, cc.p(x, y)),
                    cc.ScaleTo:create(0.25, 0.8)
            )),
            cc.EaseSineIn:create(cc.MoveBy:create(0.25, cc.p(2 * x, -y))),
            cc.DelayTime:create(math.random(20, 30)/ 10),
            cc.CallFunc:create(function ()
                AudioManager:playSoundEffect("huishou")
            end),
            cc.MoveTo:create(0.5, toPos),
            cc.RemoveSelf:create()
    )
    prop:runAction(seq)
end

-- 掉落道具
function GameView:dropProp(data)
    local len = #self.dropPropList
    if len > 0 then
        local isDrop = ExternalTools:isSuccessful(0.5)
        if isDrop then
            local dropData = self.dropPropList[1]
            dropData.pos = data.pos
            table.remove(self.dropPropList, 1)
            local prop = self.item_get:clone()
            self:initGetItem(prop, dropData)
            self:dropPropAni(prop, dropData)
            self.panel_enemy:addChild(prop, zIndex.touchLayer)
        end
    end
end

-- 掉落技能能量球
function GameView:dropSkillBall(data, call)
    local sp = cc.Sprite:createWithSpriteFrameName("exp1.png")
    local animation = cc.AnimationCache:getInstance():getAnimation("exp")
    local animate = cc.RepeatForever:create(cc.Animate:create(animation))
    sp:runAction(animate)

    local heroType = data.heroType
    local curPos = data.dropPos
    local toPos = self.roleNodes[heroType].pos
    sp:setOpacity(0)
    sp:runAction(cc.Sequence:create(
            cc.FadeIn:create(0.5),
            cc.MoveTo:create(0.5, toPos),
            cc.CallFunc:create(function ()
                if call then
                    call()
                end
                sp:removeFromParent(true)
            end)
    ))
    sp:setPosition(curPos)
    self.panel_enemy:addChild(sp, zIndex.touchLayer)
end

-- 掉落金币动画
function GameView:dropCoinAni(pos, money)
    printf("掉落金币动画, money is %d", money)
    local num = math.random(3, 6)
    for i = 1, num do
        local coin = cc.Sprite:createWithSpriteFrameName("money1.png")
        local animation = cc.AnimationCache:getInstance():getAnimation("money")
        local animate = cc.RepeatForever:create(cc.Animate:create(animation))
        coin:runAction(animate)
        coin:setPosition(pos)
        self.panel_enemy:addChild(coin, zIndex.touchLayer)

        local actAry = {}
        local value = 0
        if 1 == i % 3 then
            value = -15
        elseif 2 == i % 3 then
            value = 15
        end
        table.insert(actAry, cc.DelayTime:create(0.1 * (i - 1) / self.curSpeed))
        table.insert(actAry, cc.Show:create())
        local act = cc.MoveBy:create(0.2 / self.curSpeed, cc.p(value, 150))
        table.insert(actAry, act)
        table.insert(actAry, act:reverse())
        table.insert(actAry, act:clone())
        table.insert(actAry, act:reverse())
        table.insert(actAry, cc.MoveTo:create(0.35 / self.curSpeed, cc.p(25, 1370)))
        table.insert(actAry, cc.CallFunc:create(function()
            coin:removeFromParent(true)
            self:moneyAdd(money)
        end))
        coin:runAction(cc.Sequence:create(actAry))
    end
end

-- 获得金币数字滚动
function GameView:moneyAdd(money)
    local curNum = tonumber(self.txt_money:getString())
    ExternalTools:numScrollAni(self.txt_money, curNum, money)
end

-- Boss来袭提示
function GameView:bossComingTip(isShow)
    self.panel_coming:setVisible(isShow)
    local img_boss_coming = self.panel_coming:getChildByName("img_boss_coming")
    local img_red_1 = self.panel_coming:getChildByName("img_red_1")
    local img_red_2 = self.panel_coming:getChildByName("img_red_2")
    img_red_1:stopAllActions()
    img_red_2:stopAllActions()
    img_boss_coming:stopAllActions()
    img_boss_coming:setOpacity(255)
    img_boss_coming:setScale(1)
    if isShow then
        local seq = cc.Sequence:create(
                cc.FadeTo:create(0.2, 40),
                cc.FadeTo:create(0.2, 255)
        )
        local act = cc.RepeatForever:create(seq)
        img_red_1:runAction(act)
        img_red_2:runAction(act:clone())

        local seq = cc.Sequence:create(
                cc.RotateTo:create(0.1, 12),
                cc.RotateTo:create(0.1, -10),
                cc.RotateTo:create(0.1, 8),
                cc.RotateTo:create(0.1, 6),
                cc.RotateTo:create(0.1, -6),
                cc.RotateTo:create(0.1, 4),
                cc.RotateTo:create(0.1, -2),
                cc.RotateTo:create(0.1, 0),
                cc.Spawn:create(
                        cc.ScaleTo:create(0.1, 10),
                        cc.FadeTo:create(0.1, 5)
                ),
                cc.CallFunc:create(function ()
                    self:bossComingTip(false)
                end)
        )
        img_boss_coming:runAction(seq)
    end
end

function GameView:guideTip()
    local cfg = GameTool:getGuideTipCfg(self.curScene, self.curLevel)
    if cfg and self.curPart <= 1 and cfg.Word and not self.isGuiding then
        self.isGuiding = true
        local str = cfg.Word
        local t1 = cfg.Delay / 1e3
        local t2 = cfg.Time / 1e3
        self:showTipsPanel(str, t1, t2)
    end
end

-- 关卡提示
function GameView:showTipsPanel(str, time1, time2)
    local w = display.width - 100
    local node = GameTool:getShowTipNode(str)
    node:setContentSize(cc.size(w, 109))
    node:setPosition(display.center)
    node:setOpacity(0)
    node.txt_tip:setPosition(cc.p(w / 2, 109 / 2))
    self:addChild(node, zIndex.touchLayer)
    ExternalTools:txtAutoWidth(node.txt_tip, w - 60)

    local moveBy = cc.MoveBy:create(0.1, cc.p(0, 100))
    local fadeTo = cc.FadeTo:create(0.1, 255)
    local delay1 = cc.DelayTime:create(0)
    if time1 then
        delay1 = cc.DelayTime:create(time1)
    end
    local spawn = cc.Spawn:create(moveBy, fadeTo)
    local delay2 = cc.DelayTime:create(3)
    if time2 then
        delay2 = cc.DelayTime:create(time2)
    end
    local call = cc.CallFunc:create(function ()
        node:removeFromParent(true)
        self.isGuiding = false
    end)
    node:runAction(cc.Sequence:create(delay1, spawn, delay2, call))
end

-- 显示发现新怪物界面
function GameView:showNewEnemyPanel(enemyID)
    self.state = Define.state.pause
    local panel = self.panel_boss_new:show()
    local sub_list = { 30, 20, 10, 20, 0, 0, 25, 15, 18, 10, 10, 10, 20, 25, 25, 5, 0 }
    local img_bg_yellow = panel:getChildByName("img_bg_yellow")
    img_bg_yellow:loadTexture("res/JunTuan/img/bg_monster2_handbook_jtdzz.png", 0)
    local panel_enemy = img_bg_yellow:getChildByName("Panel_enemy")
    local txt_name = img_bg_yellow:getChildByName("Text_name")
    local txt_info = img_bg_yellow:getChildByName("txt_info")
    local desCfg = GameTool:getEnemyDes(enemyID)
    txt_name:setString(desCfg.Name)
    txt_info:setString(desCfg.Des)

    if panel_enemy.ani then
        panel_enemy.ani:removeFromParent(true)
    end
    local ani = AnimationMgr:createEnemySpine(enemyID)
    local s = panel_enemy:getContentSize()
    ani:setPosition(cc.p(s.width / 2, s.height / 2 - (sub_list[enemyID] or 0)))
    panel_enemy.ani = ani
    panel_enemy:addChild(ani)
end

-- 更新城墙血量
function GameView:updateWallHp(num)
    num = num < 0 and 0 or GameTool:dataDecrypt(num)
    local panel = self.panel_wall
    local txt_hp_num = panel:getChildByName("txt_hp_num")
    txt_hp_num:setString(string.format("城墙血量：%d", num))
    for i = 1, 8 do
        local v = panel:getChildByName("img_hp_" .. i)
        v:setVisible(i <= num)
    end
end

-- 月卡、周卡按钮特效
function GameView:addCardBtnEffect(panel)
    local btn_week = panel:getChildByName("btn_week")
    local btn_month = panel:getChildByName("btn_month")

    local info = JunTuanCfg.spineAni.EffectAni.cardBtn
    local ani_week = AnimationMgr:createSpine(info.file, 0.8)
    ani_week:setAnimation(0, info.names[1], true)
    ani_week:setPosition(cc.p(10, 40))
    local ani_month = AnimationMgr:createSpine(info.file, 0.8)
    ani_month:setAnimation(0, info.names[2], true)
    ani_month:setPosition(cc.p(10, 40))
    btn_week:addChild(ani_week)
    btn_month:addChild(ani_month)

    local function btnCall(btn)
        if btn == btn_week then
            GameTool:showBuyCardView(self, Define.CARDS_CFG.WEEK_ID)
        elseif btn == btn_month then
            GameTool:showBuyCardView(self, Define.CARDS_CFG.MONTH_ID)
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_week, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_month, btnCall)
end

-- 击退怪物
function GameView:repelEnemy(enemy)
    local pos = enemy.pos
    local limit_y = display.height - 300
    if pos.y > limit_y then
        return
    end
    enemy.state = Define.state.stop
    local spr = cc.Sprite:createWithSpriteFrameName("repel2.png")
    local animation = cc.AnimationCache:getInstance():getAnimation("repel")
    local animate = cc.RepeatForever:create(cc.Animate:create(animation))
    spr:runAction(animate)
    spr:setPosition(cc.p(pos.x, pos.y - 25))
    local repel_dis = math.random(300, 500)
    local to_y = pos.y + repel_dis
    if to_y > limit_y then
        repel_dis = limit_y - pos.y
    end
    self.panel_enemy:addChild(spr, zIndex.touchLayer)
    spr:runAction(cc.Sequence:create(
            cc.MoveBy:create(.6, cc.p(0, repel_dis)),
            cc.CallFunc:create(function ()
                spr:removeFromParent(true)
            end)
    ))
    enemy:runAction(cc.Sequence:create(
            cc.MoveBy:create(.6, cc.p(0, repel_dis)),
            cc.CallFunc:create(function ()
                enemy.state = Define.state.move
                enemy.pos.y = enemy.pos.y + repel_dis
                enemy:setPositionInfo(enemy.pos)
            end)
    ))
end

-- 处理怪物碰到城墙
function GameView:handleEnemyToWall(enemy)
    local cur = GameTool:dataDecrypt(self.curWallHp)
    if cur > 0 and self.state == Define.state.running then
        local sub = enemy.isBoss and 4 or 1
        MsgSendMgr:sendSubWallHp(sub)
        self:repelEnemy(enemy)
    end
end

-- 处理城墙扣血
function GameView:handleWallHpSub(data)
    local blood = data.blood
    self.curWallHp = GameTool:dataEncrypt(blood)
    self:updateWallHp(self.curWallHp)
    if blood <= 0 then
        self.state = Define.state.pause
        --self:showContinueView()
        MsgSendMgr:sendIsCanRevive()
    end
end

-- 处理角色信息返回
function GameView:handleRoleInfo(data)
    self:createHeroNode(data)
    local roleID = data.roleId
    local skillValue = self.skillValue[roleID]
    for _, v in pairs(skillValue) do
        if v.buffId then
            MessageManager.Shared():postMsg(MsgKeyData.onRoleUpdate, {
                roleId = data.roleId,
                buff = v
            })
        end
    end
end

-- 处理用户快照
function GameView:handleSnapshot()
    if self.snapshotInfo then
        local data = self.snapshotInfo
        local gameWorld = data.gameWorld
        local gameLevel = data.gameLevel
        local cellNums = data.cellNums
        local blood = data.blood
        local roleAbility = data.roleAbility
        self.curScene = gameWorld
        self.curLevel = gameLevel
        self.curWallHp = GameTool:dataEncrypt(blood)
        self:handleSkillList(roleAbility, cellNums)
        printf("---------- 处理用户快照 ----------")
        printf("gameWorld is %d", gameWorld)
        printf("gameLevel is %d", gameLevel)
        printf("cellNums is %d", cellNums)
        printf("blood is %d", blood)
        printf("---------- 处理用户快照 ----------")
    end
end

-- 处理角色三选二技能列表
function GameView:handleSkillList(ability, cellNums)
    self.curLockIdx = cellNums + 1
    self:updateLockSlotData(cellNums)
    if #ability > 0 then
        for _, v in ipairs(ability) do
            local roleId = v.roleId
            local idx = self:getSkillDataByRoleID(roleId)
            local data = v.ability
            for i, v in ipairs(data) do
                self.skillData[idx].skillList[i] = (v.Icon or 0)
                self.skillValue[roleId][i] = v
            end
        end
        self:getCurUnLockSlot()
    end
    printf("---------- 处理角色三选二技能列表 ----------")
    PrintTable(self.skillData)
    printf("---------- 处理角色三选二技能列表 ----------")
end

-- 处理三选二技能槽解锁
function GameView:handleUnLockSlot(data)
   self:handleLockSkillSlot(data)
end

-- 刷新技能槽数据
function GameView:updateLockSlotData(idx)
    for _, v in pairs(self.skillData) do
        local skillList = v.skillList
        for i, id in pairs(skillList) do
            if i <= idx then
                if id == -1 then
                    skillList[i] = 0
                end
            end
        end
    end
    self:refreshRoleSkill()
end

-- 解锁技能槽提示弹框
function GameView:showUnLockTip()
    local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_UNLOCK)
    local function okCall()
        if UserData.Shared():get_lDiamond() >= gem then
            self:sendLockSkillSlot()
        else
            GameTool:showTxtTip("钻石不足")
            GameTool:showBuyGemView(self)
        end
    end
    local tip = string.format("是否消耗%d钻石解锁第%d技能槽?", gem, self.curLockIdx)
    confirm(tip, okCall)
end

-- 获取当前解锁到了第几行技能槽
function GameView:getCurUnLockSlot()
    for _, v in pairs(self.skillData) do
        local skillList = v.skillList
        for i, num in pairs(skillList) do
            if num == -1 then
                self.curLockIdx = i
                return
            end
        end
    end
end

-- 根据roleID获取三选二技能列表
function GameView:getSkillDataByRoleID(roleId)
    for i, v in pairs(self.skillData) do
        if v.roleId == roleId then
            return i, v
        end
    end
end

function GameView:clearGame()
    self.bulletMgr:removeAllBullet()
end

-- 发送解锁技能槽
function GameView:sendLockSkillSlot()
    MsgSendMgr:sendUnLockSlot()
end

-- 处理解锁技能槽
function GameView:handleLockSkillSlot(data)
    local result = data.result
    local cellNums = data.cellNums      -- 第几技能槽位
    local ret = result.noError
    local outMsg = result.outMsg
    if ret then
        self.curLockIdx = cellNums + 1
        self:updateLockSlotData(cellNums)
    else
        GameTool:showTxtTip(outMsg)
    end
    printf("---------- 处理解锁技能槽 ----------")
    printf("ret is %d", ret and 1 or 0)
    printf("cellNums is %d", cellNums)
    printf("outMsg is %s", outMsg)
    printf("---------- 处理解锁技能槽 ----------")
end

-- 发送退出游戏请求
function GameView:sendExitGame()
    confirm("中途退出将不会获得奖励，确定退出吗？", function ()
        MsgSendMgr:sendExitBattle()
        performWithDelay(self, function ()
            if not tolua.isnull(self) then
                self.homeView.gameView = nil
                --self:removeFromParent(true)
                self:showLoading()
            end
        end, 5)
    end)
end

-- 处理中途退出游戏请求
function GameView:handleExitGame()
    self.homeView.gameView = nil
    --self:removeFromParent(true)
    self:showLoading()
end

-- 开始生成怪物
function GameView:handleStartGame(data)
    local result = data.result             -- 请求结果
    local noError = result.noError
    local outMsg = result.outMsg
    local errType = result.errType
    if not noError then
        local str = string.format("errCode:%d, errStr:%s", errType, outMsg)
        GameTool:showTxtTip(outMsg)
        printf(str)
        return
    end
    self:initGameLevelData(data)
    performWithDelay(self, function ()
        self:createEnemies()
    end, 1)
end

function GameView:handleGameOver(data)
    if self.isGameOver then
        return
    end
    self.isGameOver = true
    local isWin = self.isWin
    local reward = data.reward          -- 奖励列表
    local money = data.money            -- 金币
    local newRoleId = data.newRoleId    -- 获得新英雄

    if newRoleId ~= 0 then
        local roleData = GameTool:getRoleTxtInfo(newRoleId)
        local name = roleData.name
        local job = roleData.job
        local tip = string.format("恭喜解锁新角色[%s]%s, 已自动上阵", job, name)
        if self.allRoleNum >= 5 then
            tip = string.format("恭喜解锁新角色[%s]%s", job, name)
        end
        alert(tip, function()
            -- 重新请求角色相关信息
            if self.allRoleNum < 5 then
                -- 上阵获得的新英雄
                MsgSendMgr:sendRoleToLineup(newRoleId, 1)
            end
            MsgSendMgr:sendRoleInfoList()
            MsgSendMgr:sendRoleDataReq(newRoleId)
            MsgSendMgr:sendReqEquipList(newRoleId)
        end)
    end

    local rewardNew = {}
    if money > 0 then
        rewardNew = {
            { rewardType = Define.ENUM_REWARD_TYPE.COINS, rewardID = PropID.gold, rewardNum = money }
        }
        GameTool:updateGold(money)
        self.txt_money:setString(money)
    end

    for _, v in ipairs(reward) do
        if v.rewardNums > 0 then
            local rewardData = {
                rewardType = v.rewardType,
                rewardID = v.rewardId,
                rewardNum = v.rewardNums,
            }
            table.insert(rewardNew, rewardData)
        end
        if v.userEquip then
            UserData.Shared():updateEquipInfo(v.userEquip)
        end
    end
    self:gameOver({
        isWin = isWin,
        getList = rewardNew
    })
    self:clearGame()

    --[[if DEBUG > 0 then
        local dpsFrom = {
            atk = 0,
            skill = 1,
            buff = 2,
            sceneBuff = 3
        }
        local heroDpsList = UserData.Shared().heroDpsList
        for i, v in pairs(heroDpsList) do
            local atk = v[dpsFrom.atk] and v[dpsFrom.atk].damage or 0
            local skill = v[dpsFrom.skill] and v[dpsFrom.skill].damage or 0
            local buff = v[dpsFrom.buff] and v[dpsFrom.buff].damage or 0
            printf("角色%d伤害统计, 普攻累计伤害:%.2f, 技能累计伤害:%.2f, buff累计伤害:%.2f", i, atk, skill, buff)
        end
    end]]

    if not isWin then
        local sceneID = self.sceneInfo.sceneID
        if sceneID == 6 and sceneID == 7 or sceneID == 8 then
            -- 第7关、第8关没过，弹出新手礼包
            local key = string.format("userGiftBagFlag_%d", sceneID)
            local showFlag = GameDB.GetNumForKey(key, 0)
            if showFlag == 0 then
                GameTool:showNewUserGiftBag(self)
                GameDB.SetValueForKey(key, 1)
            end
        end
    end
end

function GameView:handleReconnect()
    if self.isGameOver then
        printf("游戏结算了, 不处理重连")
        return
    end
    printf("开始处理游戏重连")
    self.state = Define.state.pause
    if self.threeTwoView then
        -- 在三选二界面
        self.threeTwoView.panel_mask:hide()
        self.threeTwoView.touchLayer:setLocalZOrder(999)
        printf("游戏重连, 在三选二界面")
    else
        -- 在游戏界面
        printf("游戏重连, 在游戏界面")
        if #self.enemyMgr.enemyTable == 0 then
            showWaiting()
            printf("游戏重连, sendNextLevel")
            self:stopPartCountdown()
            MsgSendMgr:sendNextLevel()
        end

    end
    self.state = Define.state.running
    removeWaiting()
    printf("游戏重连完毕")
end

-- 处理网络异常
function GameView:handleNetErr()
    self.state = Define.state.pause
    if self.threeTwoView then
        self.threeTwoView.panel_mask:show()
        self.threeTwoView.touchLayer:setLocalZOrder(-1)
    end
end

function GameView:handleCurrencyUpdate()
    local diamond = UserData.Shared():get_lDiamond()
    self.txt_gem:setString(diamond)
    ExternalTools:txtAutoWidth(self.txt_gem, 70)
end

function GameView:handleIsCanRevive(data)
    self.state = Define.state.pause
    local reviveTimes = data.reviveTimes
    local maxReviveTimes = data.maxReviveTimes
    if reviveTimes < maxReviveTimes then
        self:showContinueView()
    else
        MsgSendMgr:sendGameOver()
    end
    printf("已经复活次数：%d", reviveTimes)
    printf("最大复活次数：%d", maxReviveTimes)
end

function GameView:handleUseProp(data)
    local result = data.result
    local consume = data.consume
    printf("处理使用道具, noErr:%s", result.noError and "true" or "false")
    printf("处理使用道具, consume:%d", consume)
    if result.noError then
        if self.curUsePropID == 1 then
            self:useCrazy(self.curSkillBtn)
        elseif self.curUsePropID == 2 then
            self:useFrozen(self.curSkillBtn)
        elseif self.curUsePropID == 3 then
            self:useMissile(self.curSkillBtn)
        end
        GameTool:updateGem(-consume)
    else
        GameTool:showTxtTip(result.outMsg)
    end
end

function GameView:addNotify()
    self.loadingMsg = MessageManager.Shared():addMsg(MsgKeyData.onRemoveLoading, function ()
        if self.curWallHp <= 0 or self.panel_boss_new:isVisible() then
            return
        end
        self.state = Define.state.running
    end)
    self.enemyToWallMsg = MessageManager.Shared():addMsg(MsgKeyData.onEnemyToWall, function (data)
        self:handleEnemyToWall(data)
    end)
    self.desAllMsg = MessageManager.Shared():addMsg(MsgKeyData.onDesAllEnemy, function ()
        self:nextLevel()
    end)
    self.nextLevelMsg = MessageManager.Shared():addMsg(MsgKeyData.onNextLevel, function (data)
        self:handleStartGame(data)
    end)
    self.exitBattleMsg = MessageManager.Shared():addMsg(MsgKeyData.onExitBattle, function (data)
        self:handleExitGame(data)
    end)
    self.gameOverMsg = MessageManager.Shared():addMsg(MsgKeyData.onGameOver, function (data)
        self:handleGameOver(data)
    end)
    self.wallHpSubMsg = MessageManager.Shared():addMsg(MsgKeyData.onWallHpSub, function (data)
        self:handleWallHpSub(data)
    end)
    self.roleInfoRet = MessageManager.Shared():addMsg(MsgKeyData.onRoleInfoRet, function (data)
        self:handleRoleInfo(data)
    end)
    self.threeTwoSlotMsg = MessageManager.Shared():addMsg(MsgKeyData.onThreeTowSlot, function (data)
        self:handleUnLockSlot(data)
    end)
    self.reconnectMsg = MessageManager.Shared():addMsg(MsgKeyData.onInitGame, function ()
        self:handleReconnect()
    end)
    self.onNetErrMsg = MessageManager.Shared():addMsg(MsgKeyData.onNetErr, function()
        self:handleNetErr()
    end)
    self.onCurrencyUpdateMsg = MessageManager.Shared():addMsg(MsgKeyData.onCurrencyUpdate, function ()
        self:handleCurrencyUpdate()
    end)
    self.onIsCanRevive = MessageManager.Shared():addMsg(MsgKeyData.onIsCanRevive, function (data)
        self:handleIsCanRevive(data)
    end)
    self.onUseProp = MessageManager.Shared():addMsg(MsgKeyData.onUseProp, function (data)
        self:handleUseProp(data)
    end)
end

function GameView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onRemoveLoading, self.loadingMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEnemyToWall, self.enemyToWallMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onDesAllEnemy, self.desAllMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onNextLevel, self.nextLevelMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onExitBattle, self.exitBattleMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onGameOver, self.gameOverMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onWallHpSub, self.wallHpSubMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleInfoRet, self.roleInfoRet)
    MessageManager.Shared():removeMsg(MsgKeyData.onThreeTowSlot, self.threeTwoSlotMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onInitGame, self.reconnectMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onNetErr, self.onNetErrMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onCurrencyUpdate, self.onCurrencyUpdateMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onIsCanRevive, self.onIsCanRevive)
    MessageManager.Shared():removeMsg(MsgKeyData.onUseProp, self.onUseProp)
end

function GameView:setTxtPart()
    local partNum = self.sceneInfo.partNum
    local str2 = string.format("波数：%d/%d", self.curPart, partNum)
    self.txt_part:setString(str2)
    self.txt_part:show()
end

-- 波数倒计时
function GameView:startPartCountdown()
    local function update(dt)
        dt = dt * self.curSpeed
        local partNum = self.sceneInfo.partNum
        if self.curPart < partNum then
            self.partTime = self.partTime - dt
            if self.partTime <= 0 then
                self.partTime = partTime
                self:stopPartCountdown()
                MsgSendMgr:sendNextLevel()
            end
            local str2 = string.format("波数：%d/%d", self.curPart, partNum)
            local timeStr = string.format("(下波来临:%.1f)", self.partTime)
            self.txt_part:setString(str2 .. timeStr)
        else
            self:stopPartCountdown()
        end
    end
    --self.txt_part:show()
    if not self.partScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.partScheduler = scheduler:scheduleScriptFunc(update, 0.1, false)
    end
end

function GameView:stopPartCountdown()
    --if self.txt_part then
    --    self.txt_part:hide()
    --end
    if self.partScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.partScheduler)
        self.partScheduler = nil
    end
end

function GameView:onExit()
    UserData.Shared().isInGame = false
    self:removeNotify()
    self:unscheduleUpdate()
    self:stopPartCountdown()
    self.bulletMgr:onExit()
    self.enemyMgr:onExit()
    self.heroMgr:onExit()
    ExternalTools:stopNumScroll(self.txt_money)
    AudioManager:playHomeMusic()
    MsgSendMgr:sendNewSceneInfo()
    MsgSendMgr:sendMonsterBooksReq()
    MsgSendMgr:sendEnergyRecover()
    MsgSendMgr:sendDailyTaskList()

    if self.sceneInfo.sceneID == 5 then
        UserData.Shared().isFreeCard = nil
    end
end

return GameView
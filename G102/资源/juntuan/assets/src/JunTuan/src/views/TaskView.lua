---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by huangkecheng.
--- DateTime: 2021/5/9 10:22
---

-- 任务界面
local TaskView = class("TaskView", ViewBase)

local TASK_TYPE = {
    TASK_TOTAL = 0,         -- 累计任务
    TASK_DAILY = 1,         -- 每日任务
}

function TaskView:ctor(parent)
    self:enableNodeEvents()
    self:initData(parent)
end

function TaskView:onEnter()
    self:initView()
    self:addNotify()
    MsgSendMgr:sendDailyTaskList()
end

function TaskView:initData(parent)
    self.parent = parent

    -- 累计完成每日任务配置
    self.taskListTotal = {
        { rewardID = PropID.gold, num = 1500, need = 3 },
        { rewardID = PropID.gold, num = 2500, need = 5 },
        { rewardID = PropID.soul, num = 50, need = 7 },
        { rewardID = PropID.soul, num = 100, need = 10 },
    }
    -- 每日任务列表
    self.taskListDaily = {
        { taskID = 1, rewardID = PropID.gold, rewardNum = 1000, need = 100, cur = 0, flag = 0 },
        { taskID = 2, rewardID = PropID.gold, rewardNum = 1500, need = 100, cur = 120, flag = 1 },
        { taskID = 3, rewardID = PropID.gold, rewardNum = 2000, need = 100, cur = 0, flag = 0 },
        { taskID = 4, rewardID = PropID.gold, rewardNum = 2500, need = 100, cur = 133, flag = 2 },
        { taskID = 5, rewardID = PropID.gold, rewardNum = 3000, need = 100, cur = 0, flag = 0 },
        { taskID = 6, rewardID = PropID.soul, rewardNum = 20, need = 100, cur = 0, flag = 0 },
        { taskID = 7, rewardID = PropID.soul, rewardNum = 40, need = 100, cur = 0, flag = 0 },
        { taskID = 8, rewardID = PropID.soul, rewardNum = 60, need = 100, cur = 0, flag = 0 },
        { taskID = 9, rewardID = PropID.soul, rewardNum = 80, need = 100, cur = 0, flag = 0 },
        { taskID = 10, rewardID = PropID.soul, rewardNum = 100, need = 100, cur = 0, flag = 0 },
    }

    self.allTaskDataList = {}
    self.taskItemList = {}

    self.okTaskNum = 0
    self.curTotalLogID = 0
    self.curTotalTaskID = 0
    self.curRewardData = nil
end

function TaskView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.homeView.task_daily,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self.panel_main = panel_main
    self:createAni(panel_main)

    local panel_top = panel_main:getChildByName("Panel_top"):hide()
    local listView = panel_main:getChildByName("List_item")
    listView:setScrollBarEnabled(false)
    local taskTotal = panel_main:getChildByName("Panel_item"):hide()       -- 累计完成每日任务领取奖励面板
    local taskItem = panel_main:getChildByName("Panel_item_2"):hide()      -- 每日任务详细item
    self.listView = listView
    self.taskItem = taskItem
    self:initPanelTop(panel_top)
    self:initTaskTotal(taskTotal)
    self:refreshTop()
    local btn_close = panel_main:getChildByName("btn_close")
    ExternalTools:addBtnTouchEventListener(btn_close, function ()
        self:destroyAni(panel_main, function ()
            --self:removeFromParent()
            self:hide()
        end)
    end)
end

function TaskView:showAni()
    self:createAni(self.panel_main)
end

function TaskView:initPanelTop(panel_top)
    self.panel_top = panel_top
    local panel_tip = panel_top:getChildByName("Panel_tip")
    local txt_tip_num = panel_tip:getChildByName("Text_num")
    txt_tip_num:setString(string.format("%d/10", self.okTaskNum))
    local panel_press = panel_top:getChildByName("Panel_press")
    local press_bar = panel_press:getChildByName("press_bar")
    local p = math.min((self.okTaskNum / 10), 1) * 100
    press_bar:setPercent(p)
    local s = panel_press:getContentSize()
    panel_press.size = s
    self.panel_top.panel_press = panel_press
    self.panel_top.press_bar = press_bar
    self.panel_top.txt_tip_num = txt_tip_num
end

function TaskView:initTaskTotal(taskTotal)
    self.taskTotal = taskTotal
    local btn_receive = taskTotal:getChildByName("btn_receive")
    ExternalTools:addBtnTouchEventListener(btn_receive, function ()
        -- 发送完成累计任务数领取奖励请求
        self.curItem = self.taskTotal
        MsgSendMgr:sendTaskGetReward(self.curTotalLogID, self.curTotalTaskID)
    end)
end

-- 检测已完成任务数
function TaskView:checkOkNum()
    self.okTaskNum = 0
    for _, v in pairs(self.taskListDaily) do
        if v.cur >= v.need then
            self.okTaskNum = self.okTaskNum + 1
        end
    end
end

-- 检测红点
function TaskView:checkRedDotShow()
    if not UserData.Shared():isUnlockTask() then
        self.parent.taskRedTis:hide()
        GameTool:pauseRewardAni(self.parent.panel_task)
        return
    end
    for _, v in pairs(self.allTaskDataList) do
        if v.cur >= v.need and v.flag == 1 then
            if self.parent and self.parent.taskRedTis then
                self.parent.taskRedTis:show()
                GameTool:curRewardAni(self.parent.panel_task)
            end
            return
        end
    end
    GameTool:pauseRewardAni(self.parent.panel_task)
    self.parent.taskRedTis:hide()
end

-- 刷新领取累计任务奖励id
function TaskView:refreshTotalID()
    for _, v in pairs(self.taskListTotal) do
        if v.flag == 1 then
            self.curTotalLogID = v.logId
            self.curTotalTaskID = v.taskId
            self.curRewardData = v
            break
        end
    end
    if not self.curRewardData then
        for _, v in pairs(self.taskListTotal) do
            if v.flag == 0 then
                self.curTotalLogID = v.logId
                self.curTotalTaskID = v.taskId
                self.curRewardData = v
                break
            end
        end
    end
end

function TaskView:refreshTop()
    local p = math.min((self.okTaskNum / 10), 1) * 100
    self.panel_top.press_bar:setPercent(p)
    self.panel_top.txt_tip_num:setString(string.format("%d/10", self.okTaskNum))
end

function TaskView:refreshTopReward()
    local panel = self.panel_top.panel_press
    panel:getChildByName("Text_num_10"):hide()
    local w = panel.size.width
    for i = 1, 4 do
        local data = self.taskListTotal[i]
        if data then
            local need = data.need
            local x = (need / 10) * w
            local rewardType = data.rewardType
            local rewardID = data.rewardID
            local num = data.rewardNum
            local item = panel:getChildByName("Panel_prize_" ..i)
            local img_prize = item:getChildByName("img_prize")
            local txt_num = item:getChildByName("Text_num")
            local txt_need = item:getChildByName("Text_need")
            item:setPositionX(x)
            self:setRewardImg(rewardType, rewardID, img_prize)
            txt_num:setString("x" .. num)
            txt_need:setString(need)
            if need == 10 then
                txt_need:hide()
            end
        end
    end
end

-- 每日任务累计item
function TaskView:refreshTaskTotal()
    if #self.taskListTotal <= 0 then
        return
    end
    self.panel_top:show()
    self.taskTotal:show()
    local data = self.curRewardData
    if not data then
        return
    end
    local flag = data.flag
    --local flag = 0
    --if self.okTaskNum >= data.need and data.flag == 0 then
    --    flag = 1
    --else
    --    if data.taskId == 4 and data.flag == 2 then
    --        flag = 2
    --    end
    --end
    local item = self.taskTotal
    local img_prop = item:getChildByName("img_prop")
    local txt_num = item:getChildByName("Text_num")
    self:setRewardImg(data.rewardType, data.rewardID, img_prop)
    txt_num:setString("x" .. data.rewardNum)
    txt_num:setAnchorPoint(0, 0.5)
    local s = img_prop:getScale()
    local x  = img_prop:getPositionX() + img_prop:getContentSize().width / 2 * s + 5
    txt_num:setPositionX(x)
    ExternalTools:txtAutoWidth(txt_num, 90)
    local panel_press = item:getChildByName("Panel_press")
    local press_bar = panel_press:getChildByName("press_bar")
    local txt_press = panel_press:getChildByName("Text_press")
    local p = math.min((self.okTaskNum / data.need), 1) * 100
    press_bar:setPercent(p)
    txt_press:setString(string.format("%d/%d", self.okTaskNum, data.need))
    ExternalTools:txtAutoWidth(txt_press, 90)
    local btn_receive = item:getChildByName("btn_receive")
    local btn_gray = item:getChildByName("btn_receive_gray")
    local btn_going_on = item:getChildByName("btn_going_on")
    btn_receive:setVisible(flag == 1)
    btn_gray:setVisible(flag == 2)
    btn_going_on:setVisible(flag == 0)
end

function TaskView:setRewardImg(rewardType, rewardID, img)
    GameTool:setRewardImg(rewardType, rewardID, img)
    img:setScale(1)
    if rewardType == Define.ENUM_REWARD_TYPE.COINS or rewardID == PropID.gold then
        img:setScale(1.2)
        img:ignoreContentAdaptWithSize(true)
        img:loadTexture("icon_money_home_jtdzz.png", 1)
    elseif rewardType == Define.ENUM_REWARD_TYPE.GEM or rewardID == PropID.soul then
        img:setScale(0.8)
    elseif rewardType == Define.ENUM_REWARD_TYPE.BOX then
        img:setScale(0.5)
    end
end

function TaskView:getItemByTaskID(taskId)
    return self.taskItemList[taskId]
end

function TaskView:refreshItem(data)
    local item = self:getItemByTaskID(data.taskId)
    local info = self:getTaskData(data)
    if item then
        self:initTaskItem(item, info)
    end
end

-- 领取奖励后重置按钮为已领取状态
function TaskView:getRewardInitItem()
    local item = self.curItem
    if item then
        if item == self.taskTotal then
            -- 累计任务
            local taskId = self.curTotalTaskID
            self.taskListTotal[taskId].flag = 2
            self.curRewardData = nil
            self:refreshTotalID()
            self:refreshTaskTotal()
        else
            -- 每日任务
            local taskId = item.taskId
            self.taskListDaily[taskId].flag = 2
            local btn_receive = item:getChildByName("btn_receive")
            local btn_gray = item:getChildByName("btn_receive_gray")
            local btn_going_on = item:getChildByName("btn_going_on")
            btn_receive:setVisible(false)
            btn_gray:setVisible(true)
            btn_going_on:setVisible(false)
        end
    end
end

function TaskView:initTaskItem(item, data)
    item:show()
    item.taskId = data.taskId
    local img_prop = item:getChildByName("img_prop")
    local txt_num = item:getChildByName("Text_num")
    local txt_tip = item:getChildByName("Text_tip")
    self:setRewardImg(data.rewardType, data.rewardID, img_prop)
    txt_num:setAnchorPoint(0, 0.5)
    txt_num:setPositionX(img_prop:getPositionX() + img_prop:getContentSize().width / 2 + 5)
    txt_num:setString("x" .. data.rewardNum)
    ExternalTools:txtAutoWidth(txt_num, 90)
    --txt_tip:setString(TaskCfg.DailyTaskContent[data.taskID + 1])
    txt_tip:setString(data.taskName)
    local panel_press = item:getChildByName("Panel_press")
    local press_bar = panel_press:getChildByName("press_bar")
    local txt_press = panel_press:getChildByName("Text_press")
    local p = math.min((data.cur / data.need), 1) *100
    press_bar:setPercent(p)
    txt_press:setAnchorPoint(0, 0.5)
    txt_press:setString(string.format("%d/%d", data.cur, data.need))
    ExternalTools:txtAutoWidth(txt_press, 90)
    local btn_receive = item:getChildByName("btn_receive")
    local btn_gray = item:getChildByName("btn_receive_gray")
    local btn_going_on = item:getChildByName("btn_going_on")
    btn_receive:setVisible(data.flag == 1)
    btn_gray:setVisible(data.flag == 2)
    btn_going_on:setVisible(data.flag == 0)
    ExternalTools:addBtnTouchEventListener(btn_receive, function ()
        local logId = data.logId
        local taskId = data.taskId
        self.curItem = item
        MsgSendMgr:sendTaskGetReward(logId, taskId)
    end)
end

function TaskView:refreshListView()
    local curIdx = 0
    for i, v in pairs(self.taskListDaily) do
        local item = self.listView:getItem(curIdx)
        if not item then
            item = self.taskItem:clone()
            self.taskItemList[v.taskId] = item
            self.listView:pushBackCustomItem(item)
        end
        self:initTaskItem(item, v)
        curIdx = curIdx + 1
    end
end

function TaskView:getTaskData(v)
    local info = {
        taskID = v.taskId,
        rewardType = v.rewardType,
        rewardID = v.rewardId,
        rewardNum = v.rewardNums,
        need = v.taskValue,
        cur = v.userValue,
        flag = 0,
        logId = v.logId,
        taskId = v.taskId,
        taskName = v.taskName,
        taskType = v.taskType,  -- 0 累计任务,  其他：每日任务
    }
    -- flag 0 进行中 1可领取 2已领取
    local flag = 0
    if v.isReward == 1 then
        flag = 2
    elseif info.cur >= info.need and v.isReward == 0 then
        flag = 1
    end
    info.flag = flag
    return info
end

-- 刷新每日任务数据表, taskList接服务器数据
function TaskView:refreshListData(taskList)
    local taskListDaily = {}
    local taskListTotal = {}
    for _, v in ipairs(taskList) do
        local info = self:getTaskData(v)
        if v.taskType == TASK_TYPE.TASK_TOTAL then
            taskListTotal[v.taskId] = info
        else
            taskListDaily[v.taskId] = info
        end
        self.allTaskDataList[v.taskId] = info
    end
    self.taskListTotal = taskListTotal
    self.taskListDaily = taskListDaily
end

-- 处理每日任务列表
function TaskView:handleTaskList(data)
    local taskList = data.dailyTask
    self:refreshListData(taskList)
    self:refreshTotalID()
    self:refreshListView()
    self:refreshTopReward()
    self:checkOkNum()
    self:checkRedDotShow()
    self:refreshTaskTotal()
    self:refreshTop()
    printf("--------- 处理每日任务列表 ---------")
    printf("累计任务数:%d", ExternalTools:tableLen(self.taskListTotal))
    printf("日常任务数:%d", ExternalTools:tableLen(self.taskListDaily))
    printf("当前完成任务数:%d", self.okTaskNum)
    printf("--------- 处理每日任务列表 ---------")
end

-- 处理每日任务变化
function TaskView:handleTaskChange(data)
    for _, v in ipairs(data) do
        local info = self:getTaskData(v)
        if v.taskType == TASK_TYPE.TASK_TOTAL then
            self.taskListTotal[v.taskId] = info
        else
            self.taskListDaily[v.taskId] = info
        end
        self.allTaskDataList[v.taskId] = info
        self:refreshTotalID()
        self:refreshItem(v)
        self:checkOkNum()
        self:checkRedDotShow()
        self:refreshTop()
        self:refreshTaskTotal()
    end
    printf("---------- 处理每日任务变化 ----------")
    printf("当前完成任务数:%d", self.okTaskNum)
    printf("---------- 处理每日任务变化 ----------")
end

-- 处理每日任务领奖
function TaskView:handleGetReward(data)
    printf("---------- 处理每日任务领奖 ----------")
    local result = data.result
    local ret = result.noError
    local outMsg = result.outMsg
    printf("ret is %d", ret and 1 or 0)
    if ret then
        local reward = data.reward[1]
        if reward then
            GameTool:showGetRewardWin(self, reward)
            if reward.userEquip then
                UserData.Shared():updateEquipInfo(reward.userEquip)
            end
            self:getRewardInitItem()
            self:checkRedDotShow()
            printf("rewardType is %d", reward.rewardType)
            printf("rewardId is %d", reward.rewardId)
            printf("rewardNum is %d", reward.rewardNums)
        end
    else
        GameTool:showTxtTip(outMsg)
    end
    printf("outMsg is %s", outMsg)
    printf("---------- 处理每日任务领奖 ----------")
end

function TaskView:addNotify()
    self.taskListMsg = MessageManager.Shared():addMsg(MsgKeyData.onDailyTaskList, function (data)
        self:handleTaskList(data)
    end)
    self.taskRewardMsg = MessageManager.Shared():addMsg(MsgKeyData.onDailyTaskReward, function (data)
        self:handleGetReward(data)
    end)
end

function TaskView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onDailyTaskList, self.taskListMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onDailyTaskReward, self.taskRewardMsg)
end

function TaskView:onExit()
    self:removeNotify()
end

return TaskView
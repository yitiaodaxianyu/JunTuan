---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/4/29 18:31
---

local HeroView = class("HeroView", ViewBase)

local zIndex = {
    touchLayer = 9999,
}

--装备对比栏
local ENUM_SUB_EQUIPPANEL = {
    LEFT = 0, --左
    RIGHT = 1       --右
}

function HeroView:ctor()
    self:enableNodeEvents()
    self:initData()
end

function HeroView:onEnter()
    self:initView()
    self:addNotify()
    self:initRoleTouchEvent()
    MsgSendMgr:sendRoleDataReq(1)
end

function HeroView:getTestRoleData()
    local roleInfoList = {}
    for i = 1, 6 do
        local dataInfo = {}
        dataInfo.userId = 10500
        dataInfo.roleId = i
        dataInfo.roleRank = math.random(1, 10)
        dataInfo.roleLevel = math.random(1, 25)
        dataInfo.roleChip = math.random(0, 20)
        dataInfo.userEquipId1 = 0
        dataInfo.userEquipId2 = 0
        dataInfo.userEquipId3 = 0
        dataInfo.isDispatch = 1
        dataInfo.position = i
        dataInfo.combat = 685
        if i == 6 then
            dataInfo.isDispatch = 0
            dataInfo.position = 0
        end
        roleInfoList[i] = dataInfo
    end
    return roleInfoList
end

function HeroView:getTestRoleValue()
    local list = {}
    for i = 1, 6 do
        local valueInfo = {}
        valueInfo.roleId = i
        valueInfo.attack = math.random(500, 1000)
        valueInfo.interval = math.random(0.5, 2)
        valueInfo.critRate = math.random(0, 100)
        valueInfo.critMultiples = math.random(200, 300)
        valueInfo.attackPer = math.random(0, 100)
        valueInfo.attackSpeedPer = math.random(0, 100)
        valueInfo.personal1 = math.random(0, 100)
        valueInfo.personal2 = math.random(0, 100)
        valueInfo.skillParam1 = math.random(5, 20)
        valueInfo.skillParam2 = math.random(5, 20)
        valueInfo.canUpInfo = {
            upType = 0,
            coin = 0,
            gem = 0,
            chipNums = 0,
        }
        list[i] = valueInfo
    end
    return list
end

function HeroView:testEquipData()
    local data = {
        roleId = 1,
        userEquipId = 1,
        equipId = 1102,
        equipType = 1,
        equipRank = 1,
        mainType = 1,
        mainValue = 1,
        subType = 9,
        subValue = 1,
        exType1 = 5,
        exValue1 = 1,
        exType2 = 6,
        exValue2 = 1,
        exType3 = 1,
        exValue3 = 1,
        isUsed = true,
    }
    local sub = { 3, 4, 5, 6 }
    local id = { 1102, 1103, 1201, 1206, 1307, 1309 }
    self.equipInfoList = {}
    self.equipInfoList[1] = {}
    for i = 1, 6 do
        local d = clone(data)
        d.userEquipId = i
        d.equipId = id[i]
        d.equipRank = GameTool:getEquipLevel(d.equipId)
        d.exType1 = math.random(3, 6)
        d.exType2 = math.random(3, 6)
        d.exType3 = math.random(3, 6)
        self.equipInfoList[1][i] = d
    end
end

function HeroView:initData()
    self.curRoleID = 1
    self.lastMoveToPos = 1
    self.curSelectRoleNode = nil
    self.curSelectBattleNode = nil
    self.curSelectEquipNode = nil;
    self.curSelctEquipIdx = 1;

    self.curResetDirIdx = ENUM_SUB_EQUIPPANEL.LEFT              -- 当前重置装备在左边还是右边

    self.roleInfoList = UserData.Shared().roleInfoList          -- 上阵英雄数据
    self.equipInfoList = UserData.Shared().equipInfoList        -- 背包装备数据
    self.roleValueList = UserData.Shared().roleValueList        -- 角色属性表

    self.curRoleInfo = self:getRoleInfo(self.curRoleID)         -- 当前角色面板信息
    self.curRoleEquipList = self.equipInfoList[self.curRoleID]  -- 当前角色背包装备列表

    -- 当前身上穿戴装备的userEquipId列表
    self.curEquipList = {}

    -- 出战位置列表(0表示没有角色在此位置，否则对应角色id)
    self.rolePosList = { 0, 0, 0, 0, 0, 0 }
    self.roleRankList = { 0, 0, 0, 0, 0, 0 }

    self.roleNodeList = {}               -- 出战英雄节点列表
    self.panelRoleList = {}              -- 出战席位面板列表
    self.battleIconList = {}             -- 出战标识列表
    self.panelEquipList = {}             -- 装备列表
    self.battlePanelList = {}            -- 中间出战英雄面板列表
    self.equipItemList = {}              -- 穿戴装备item
end

function HeroView:initRoleTouchEvent()
    local function touchBegin(touch, event)
        if not self:isVisible() then
            return
        end
        local pos = touch:getLocation()
        self.curSelectRoleNode = self:checkCurSelRole(pos)
        self.curSelectBattleNode = self:checkCurSelBattle(pos)
        return true
    end

    local function touchMove(touch, event)
        if not self:isVisible() then
            return
        end
        local pos = touch:getLocation()
        self:onMoveRoleNode(pos)
        self:onMoveBattleNode(pos)
    end

    local function touchEnd(touch, event)
        if not self:isVisible() then
            return
        end
        local pos = touch:getLocation()
        self:onMoveEndRoleNode(pos)
        self:onMoveEndBattleNode(pos)
    end
    self.touchLayer = ExternalTools:addTouchLayer(self.csbNode, zIndex.touchLayer, touchBegin, touchMove, touchEnd)
end

-- 角色骨骼动画
function HeroView:checkCurSelRole(pos)
    if self.curSelectRoleNode then
        local r = self.curSelectRoleNode.roleID
        self:setRolePosition(r, self.lastMoveToPos)
    end
    pos = self.csbNode.panel_main:convertToNodeSpace(pos)
    for i, v in pairs(self.panelRoleList) do
        if v.roleNode then
            local box = v.box
            if cc.rectContainsPoint(box, pos) then
                self.lastMoveToPos = i
                local roleId = v.roleNode.roleID
                self:refreshCurRoleInfo(roleId)
                return v.roleNode
            end
        end
    end
end

-- 上阵按钮图标
function HeroView:checkCurSelBattle(pos)
    if self.curSelectBattleNode then
        --return self.curSelectBattleNode
        local node = self.curSelectBattleNode
        node:setLocalZOrder(node.idx)
        node:setPosition(node.offPos)
        node:setAnchorPoint(0, 0)
    end
    pos = self.csbNode.panel_gunner:convertToNodeSpace(pos)
    for i, v in pairs(self.battlePanelList) do
        local data = self.roleInfoList[v.idx]
        if data then
            local box = v.box
            if cc.rectContainsPoint(box, pos) then
                v:setLocalZOrder(zIndex.touchLayer)
                return v
            end
        end
    end
end

function HeroView:onMoveRoleNode(pos)
    if self.curSelectRoleNode then
        self.curSelectRoleNode:setPosition(pos)
    end
end

function HeroView:onMoveBattleNode(pos)
    if self.curSelectBattleNode then
        pos = self.csbNode.panel_gunner:convertToNodeSpace(pos)
        self.curSelectBattleNode:setPosition(pos)
        self.curSelectBattleNode:setAnchorPoint(0.5, 0.5)
    end
end

function HeroView:onMoveEndRoleNode(pos)
    local node = self.curSelectRoleNode
    if node then
        local lastPos = self.lastMoveToPos
        pos = self.csbNode.panel_main:convertToNodeSpace(pos)
        if not cc.rectContainsPoint(self.panelHero.box, pos) then
            -- 英雄下阵
            local len = self:getHeroActiveNum()
            if len > 1 then
                self.curSelectRoleNode:hide()
                self.curSelectRoleNode = nil
                self.curRoleInfo.isDispatch = 0
                self.battleIconList[self.curRoleID]:hide()
                self.roleNodeList[self.curRoleID]:hide()
                self.rolePosList[lastPos] = 0
                local panel = self.panelRoleList[lastPos]
                if panel then
                    panel.roleNode = nil
                end
                MsgSendMgr:sendRoleToLineup(self.curRoleID, 0)
                return
            else
                GameTool:showTxtTip("至少上阵一人")
            end
        end
        for i, v in pairs(self.panelRoleList) do
            local box = v.box
            if cc.rectContainsPoint(box, pos) then
                self.lastMoveToPos = i
                break
            end
        end
        if lastPos ~= self.lastMoveToPos then
            local r1 = self.curSelectRoleNode.roleID
            local p1 = self.lastMoveToPos
            local r2 = self:getRoleIDByPosIdx(self.lastMoveToPos)
            local p2 = lastPos
            MsgSendMgr:sendRoleSwitch(r1, p1, r2, p2)
            self:setRolePosition(node.roleID, self.lastMoveToPos)
            self:setRolePosition(r2, p2)
        else
            self:setRolePosition(node.roleID, self.lastMoveToPos)
        end
    end
    self.curSelectRoleNode = nil
end

function HeroView:onMoveEndBattleNode(pos)
    local node = self.curSelectBattleNode
    if node then
        node:setLocalZOrder(node.idx)
        node:setPosition(node.offPos)
        node:setAnchorPoint(0, 0)
        pos = self.csbNode.panel_main:convertToNodeSpace(pos)
        if cc.rectContainsPoint(self.panelHero.box, pos) then
            local toIdx
            for i, v in pairs(self.panelRoleList) do
                local box = v.box
                if cc.rectContainsPoint(box, pos) then
                    toIdx = i
                    break
                end
            end
            if toIdx then
                local data = self.roleInfoList[node.idx]
                local flag = self.rolePosList[toIdx]
                if data and data.isDispatch == 1 and data.position ~= 0 then
                    GameTool:showTxtTip("该英雄已上阵！")
                elseif flag ~= 0 then
                    --GameTool:showTxtTip("该位置被占用！")
                    MsgSendMgr:sendRoleToLineup(flag, 0)
                    self:setRolePosition(node.roleId, toIdx)
                    MsgSendMgr:sendRoleToLineup(node.roleId, 1)
                    MsgSendMgr:sendRoleSwitch(node.roleId, toIdx, 0, 0)
                else
                    self:setRolePosition(node.roleId, toIdx)
                    MsgSendMgr:sendRoleToLineup(node.roleId, 1)
                    MsgSendMgr:sendRoleSwitch(node.roleId, toIdx, 0, 0)
                end
            end
        end
    end
    self.curSelectBattleNode = nil
end

function HeroView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.heroView.hero_main,
        setSize = true
    }
    local ui = self:createCSB(para)
    ui:setAnchorPoint(0.5, 0.5)
    ui:setPosition(display.center)
    self.csbNode = ui
    self:addChild(ui)

    local panel_main = ui:getChildByName("Panel_main")
    local panel_combat = panel_main:getChildByName("Panel_combat")
    local panel_gunner = panel_main:getChildByName("Panel_gunner")
    local panel_hero = panel_main:getChildByName("Panel_hero")
    panel_combat:setLocalZOrder(3)
    panel_gunner:setLocalZOrder(2)
    panel_hero:setLocalZOrder(1)
    self.csbNode.panel_main = panel_main
    self.csbNode.panel_gunner = panel_gunner
    self:initPanelCombat(panel_combat)
    self:initPanelGunner(panel_gunner)
    self:initPanelHero(panel_hero)
    self:updateRoleNode()
end

function HeroView:initPanelCombat(panel)
    self.panel_combat = panel
    self.panel_combat.roleSpAni = {}
    local panel_soldier = panel:getChildByName("Panel_soldier")
    local panel_combat = panel:getChildByName("Panel_combat")
    local panel_equip = panel:getChildByName("Panel_equip")
    local function showEquipView(btn)
        local idx = btn.idx
        local userEquipId = btn.userEquipId
        MsgSendMgr:sendReqEquipList(self.curRoleID)
        self:showEquipView(idx, userEquipId)
    end

    local p
    for i = 1, 3 do
        local item = panel_equip:getChildByName("img_equip_" .. i)
        ExternalTools:addBtnTouchEventListener(item, showEquipView, true)
        if i == 2 then
            p = cc.p(item:getPosition())
        end

        local equipItem = panel_equip:getChildByName("Panel_equip_" .. i)
        equipItem.redDot = equipItem:getChildByName("icon_red"):hide()
        self.equipItemList[i] = equipItem
    end

    local panel_fragment = panel_equip:getChildByName("Panel_fragment")
    local btn_merge_once = panel_equip:getChildByName("btn_merge_once")
    local btn_level_up = panel:getChildByName("btn_level_up")               -- 英雄升级
    local btn_promotion = panel:getChildByName("btn_promotion")             -- 英雄晋升
    local btn_detail_rank = panel_soldier:getChildByName("btn_detail")      -- 英雄阶级图鉴
    local btn_detail_combat = panel_combat:getChildByName("btn_detail")     -- 英雄战力详情
    local btn_detail_sp = panel_fragment:getChildByName("btn_detail")       -- 碎片详情
    local panel_money = btn_level_up:getChildByName("Panel_money")
    btn_level_up.txt_atk_num = btn_level_up:getChildByName("Text_num")      -- 升级加多少攻击力
    local txt_num = panel_money:getChildByName("Text_num")
    txt_num:setAnchorPoint(0, 0.5)
    txt_num:setPositionX(29)
    btn_merge_once:setScale(0.8)
    btn_merge_once:setAnchorPoint(0.5, 0.5)
    btn_merge_once:setPositionX(p.x)
    btn_level_up.txt_money = txt_num
    btn_level_up.redDot = btn_level_up:getChildByName("icon_red"):hide()
    btn_promotion.redDot = btn_promotion:getChildByName("icon_red"):hide()
    self.btn_merge_once = btn_merge_once
    self.btn_level_up = btn_level_up
    self.btn_promotion = btn_promotion
    local function btnCall(btn)
        if btn == btn_level_up then
            self:sendRoleLevelUp()
        elseif btn == btn_promotion then
            local roleRank = self.curRoleInfo.roleRank
            self:showHeroRankUp(self.curRoleID, roleRank)
        elseif btn == btn_detail_rank then
            self:showRankDetail()
        elseif btn == btn_detail_combat then
            self:showCombatDetail(self.curRoleID)
        elseif btn == btn_detail_sp then
            self:showHeroSpDetail(self.curRoleID)
        elseif btn == btn_merge_once then
            btn:hide()
            MsgSendMgr:sendEquipMerge({ roleId = self.curRoleID, userEquipId1 = 0, userEquipId2 = 0 })
            MsgSendMgr:sendRoleDataReq(self.curRoleID)
            self.isSendMerge = true
            self.equipInfoList[self.curRoleID] = {}
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_level_up, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_promotion, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_detail_rank, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_detail_combat, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_detail_sp, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_merge_once, btnCall)

    local data = self.curRoleInfo
    self:refreshPanelCombat(data)
    --self:refreshBtnAtkNum()
end

-- 刷新升级按钮加攻击力提升
function HeroView:refreshBtnAtkNum()
    local upAtk = self.curRoleInfo.canUpInfo.upAtk
    self.btn_level_up.txt_atk_num:setString("+" .. upAtk)
end

-- 判断是否可以一键合成
function HeroView:checkIsCanMerge(roleId, equipInfoList)
    local r = roleId or self.curRoleID
    local equipList = equipInfoList or UserData.Shared().equipInfoList[r]
    if equipList then
        for _, v in pairs(equipList) do
            for _, tmp in pairs(equipList) do
                if v ~= tmp then
                    if v.equipType == tmp.equipType and v.equipRank == tmp.equipRank then
                        if v.equipRank < 10 then
                            return true
                        end
                    end
                end
            end
        end
    end
    return false
end

function HeroView:showBtnMerge()
    local flag = self:checkIsCanMerge()
    self.isEquipMerge = flag
    self.btn_merge_once:setVisible(flag)
end

function HeroView:setPanelCombatRoleShow(roleId)
    for i, v in pairs(self.panel_combat.roleSpAni) do
        v:setVisible(i == roleId)
    end
end

function HeroView:getWearList(roleId)
    local equipList = UserData.Shared().equipInfoList[roleId]
    local wearList = {}
    if equipList then
        for _, v in pairs(equipList) do
            if v.isUsed == 1 then
                wearList[v.equipType] = v
            end
        end
    end
    return wearList
end

-- 角色面板数据装备穿戴显示
function HeroView:setEquipWearShow(roleId)
    local wearList = self:getWearList(roleId)
    local panel = self.panel_combat
    local panel_equip = panel:getChildByName("Panel_equip")

    for i = 1, 3 do
        local data = wearList[i]
        local equipItem = panel_equip:getChildByName("Panel_equip_" .. i):hide()
        local item = panel_equip:getChildByName("img_equip_" .. i)

        item.roleID = roleId
        item.idx = i
        item.equipId = 0
        item.userEquipId = 0

        if data then
            --装备位点击
            item.equipId = data.equipId
            item.userEquipId = data.userEquipId

            --穿戴装备设置
            if data.equipId and data.equipId ~= 0 then
                equipItem:show()
                local level = data.equipRank
                GameTool:setEquipImg(roleId, i, level, equipItem)
            end
        end
    end
    self.curEquipList = wearList
end

-- 是否能升阶
function HeroView:isRoleCanRankUp(roleId, roleRank, canUpInfo)
    local isCanRankUp = false                               -- 能否进阶
    if canUpInfo.upType == 2 then
        local roleInfo = UserData.Shared().roleInfoList[roleId]
        local needGem = canUpInfo.gem                           -- 晋升所需钻石数
        local needChip = canUpInfo.chipNums                     -- 晋升所需碎片数
        local myHaveChip = roleInfo.roleChip                    -- 当前拥有的碎片数
        local myHaveGem = UserData.Shared():get_lDiamond()            -- 当前拥有的钻石数
        local isEquip = self:isEquipCanRankUp(roleId, roleRank + 1)
        if isEquip and myHaveChip >= needChip and myHaveGem >= needGem then
            isCanRankUp = true
        end
    end
    return isCanRankUp
end

function HeroView:checkHeroRedDotShow()
    if #self.battlePanelList > 0 then
        local roleInfoList = UserData.Shared().roleInfoList
        local showHeroRedDot = false
        for _, v in pairs(roleInfoList) do
            local roleId = v.roleId
            local roleRank = v.roleRank
            local canUpInfo = v.canUpInfo
            local isCanRankUp = self:isRoleCanRankUp(roleId, roleRank, canUpInfo)
            local isCanLevelUp = canUpInfo.upType == 1 and (UserData.Shared():get_lGoldBean() >= canUpInfo.coin)
            local checkIsCanMerge = self:checkIsCanMerge(roleId)
            self:checkNewEquipRedDotShow(roleId)
            local isHaveNewEquip = self.isHaveNewEquip[roleId]
            local isShow = isCanRankUp or isCanLevelUp or checkIsCanMerge or (isHaveNewEquip == 1)
            self.battlePanelList[roleId].icon_red:setVisible(isShow)
            --self.btn_level_up.redDot:setVisible(isCanLevelUp)
            --self.btn_promotion.redDot:setVisible(isCanRankUp)
            if isShow then
                showHeroRedDot = true
            end
        end
        if showHeroRedDot then
            MessageManager.Shared():postMsg(MsgKeyData.onHeroRedDot, true)
        else
            MessageManager.Shared():postMsg(MsgKeyData.onHeroRedDot, false)
        end
    end
end

-- 新的更好的装备红点提示
function HeroView:checkNewEquipRedDotShow(roleId)
    local r = roleId or self.curRoleID
    local equipInfoList = UserData.Shared().equipInfoList[r]
    self.showRedDotEquip = {}
    self.isHaveNewEquip = {}
    if equipInfoList then
        local isShow = { false, false, false }
        local wearList = self:getWearList(r)
        for _, v in pairs(equipInfoList) do
            if v.isUsed == 0 then
                for equipType, data in pairs(wearList) do
                    if equipType == v.equipType and v.equipRank > data.equipRank then
                        isShow[equipType] = true
                        self.showRedDotEquip[v.userEquipId] = v.userEquipId
                        self.isHaveNewEquip[r] = 1
                    end
                end
            end
        end
        if roleId == self.curRoleID then
            for equipType, v in pairs(isShow) do
                self.equipItemList[equipType].redDot:setVisible(v)
            end
        end
    end
end

function HeroView:handleCombatPush(data)
    local roleId = data.roleId
    local combat = data.combat
    if UserData.Shared().roleInfoList[roleId] then
        UserData.Shared().roleInfoList[roleId].combat = combat
        self:updateLineUpCombat()
    end
end

-- 属性上部角色面板数据显示
function HeroView:refreshPanelCombat(data)
    local panel = self.panel_combat
    local icon_ground = panel:getChildByName("icon_ground")
    local icon_underground = panel:getChildByName("icon_underground")
    icon_ground:ignoreContentAdaptWithSize(true)
    icon_underground:ignoreContentAdaptWithSize(true)
    local panel_gunner = panel:getChildByName("Panel_gunner")
    local txt_role = panel_gunner:getChildByName("Text_gunner")
    local txt_role_nick = panel_gunner:getChildByName("Text_name")
    local txt_level = panel_gunner:getChildByName("Text_level")
    local panel_soldier = panel:getChildByName("Panel_soldier")
    local img_level = panel_soldier:getChildByName("img_level")
    img_level:ignoreContentAdaptWithSize(true)
    local txt_rank = panel_soldier:getChildByName("Text_level")
    local panel_combat = panel:getChildByName("Panel_combat")
    local txt_fight = panel_combat:getChildByName("Text_fight")
    local panel_equip = panel:getChildByName("Panel_equip")
    local panel_fragment = panel_equip:getChildByName("Panel_fragment")
    local img_head = panel_fragment:getChildByName("img_gunner")                    -- 英雄碎片icon
    local txt_num_sp = panel_fragment:getChildByName("Text_num")                    -- 碎片数量
    img_head:ignoreContentAdaptWithSize(true)
    local panel_role = panel:getChildByName("Panel_role")
    local img_skill = panel_role:getChildByName("img_role")
    local txt_tip_1 = panel_role:getChildByName("Text_tip_1")
    local txt_tip_2 = panel_role:getChildByName("Text_tip_2")

    local roleId = data.roleId
    local roleLevel = data.roleLevel
    local roleRank = data.roleRank
    local roleTxtInfo = self:getRoleTxtInfo(roleId)
    self.txt_role_combat = txt_fight
    self:setEquipWearShow(roleId)
    self:setAtkTypeImg(icon_ground, icon_underground, roleTxtInfo.canTarget)
    txt_role:setString(roleTxtInfo.job)
    txt_role_nick:setString(roleTxtInfo.name)
    txt_level:setString(string.format("lv.%d", roleLevel))
    local name = string.format("img_level%d_hero_jtdzz.png", roleRank)
    img_level:loadTexture(name, 1)
    txt_rank:setString(GameTool:getRankString(roleRank))
    txt_fight:setString("战斗力:" .. data.combat)
    txt_num_sp:setString(data.roleChip)
    GameTool:setRoleHeadImg(roleId, img_head)
    GameTool:setSkillImg(roleId, img_skill)
    img_skill:show()
    local v1, v2 = data.skillParam1, data.skillParam2
    txt_tip_1:setScale(1)
    GameTool:setTxtSkillTip(roleId, txt_tip_1, txt_tip_2, v1, v2)
    ExternalTools:txtAutoWidth(txt_tip_1, 600)

    if not panel.roleSpAni[roleId] then
        local yList = { 50, 50, 50, 50, 35, 30 }
        local roleSpAni = AnimationMgr:createHeroSpine(roleId, roleRank)
        local roleParent = panel_equip:getChildByName("Panel_role")
        local s = roleParent:getContentSize()
        local pos = cc.p(s.width / 2, s.height / 2)
        pos.x = pos.x - 15
        pos.y = pos.y - yList[data.roleId]
        roleSpAni:setPosition(pos)
        roleSpAni:setScale(0.85)
        roleSpAni:setAnimation(0, "cemian_daiji", true)
        roleParent:addChild(roleSpAni, 0)
        panel.roleSpAni[roleId] = roleSpAni
    else
        panel.roleSpAni[roleId]:setSkin("stage" .. roleRank + 1)
    end
    self:setPanelCombatRoleShow(roleId)

    local btn_level_up = panel:getChildByName("btn_level_up")               -- 英雄升级
    local btn_promotion = panel:getChildByName("btn_promotion")             -- 英雄晋升
    local canUpInfo = data.canUpInfo

    local txt_level_up = btn_level_up:getChildByName("Text_level_up")
    btn_level_up.txt_atk_num:show()
    btn_level_up:getChildByName("Text_attack"):show()
    btn_level_up:getChildByName("Panel_money"):show()
    btn_level_up:getChildByName("icon_red"):show()
    txt_level_up:setString("升   级")
    txt_level_up:setPositionY(btn_level_up:getContentSize().height * 0.688)

    if canUpInfo.upType == 1 then
        btn_level_up:show()
        btn_promotion:hide()
        btn_level_up.txt_money:setString(canUpInfo.coin)
        btn_level_up.txt_atk_num:setString(" +" .. (canUpInfo.upAtk or 6))
        local isShowRed = UserData.Shared():get_lGoldBean() >= canUpInfo.coin
        btn_level_up.redDot:setVisible(isShowRed)
        self.isCanLevelUp = isShowRed
    elseif canUpInfo.upType == 2 then
        btn_level_up:hide()
        btn_promotion:show()
        local isCanRankUp = self:isRoleCanRankUp(roleId, roleRank, canUpInfo)
        btn_promotion.redDot:setVisible(isCanRankUp)
    else
        btn_level_up:show()
        btn_promotion:hide()
        btn_level_up.redDot:hide()
        btn_promotion.redDot:hide()
        btn_level_up.txt_atk_num:hide()
        btn_level_up:getChildByName("Text_attack"):hide()

        btn_level_up:getChildByName("Panel_money"):hide()
        btn_level_up:getChildByName("icon_red"):hide()

        txt_level_up:setString("已满级")
        txt_level_up:setPositionY(btn_level_up:getContentSize().height * 0.55)
    end
    self:showBtnMerge()
    self:checkHeroRedDotShow()
end

-- 刷新选中亮光显示
function HeroView:refreshSelImg(roleId)
    for i, v in pairs(self.imgSelectList) do
        v:setVisible(i == roleId)
    end
end

function HeroView:initPanelGunner(panel)
    local imgSelect = {}
    local itemList = {}
    local function btnCall(btn)
        local idx = btn.idx
        if self.roleInfoList[idx] then
            if idx ~= self.curRoleID then
                self:refreshCurRoleInfo(idx)
            end
        else
            local cfg = GameTool:getRoleCfg(idx)
            local level = cfg.OpenValue[1]
            local tip = string.format("通关世界%d解锁", level)
            GameTool:showTxtTip(tip)
        end
    end
    local roleInfoList = self.roleInfoList
    for i = 1, 6 do
        local item = panel:getChildByName("Panel_" .. i)
        item.idx = i
        item.roleId = i
        item.box = item:getBoundingBox()
        item.offPos = cc.p(item:getPosition())
        item:setLocalZOrder(i)
        itemList[i] = item
        local icon_red = item:getChildByName("icon_red"):hide()
        item.icon_red = icon_red
        imgSelect[i] = item:getChildByName("img_select"):hide()
        ExternalTools:addBtnTouchEventListener(item, btnCall, true)
        self:initHeroItem(item, roleInfoList[i])
        self.battlePanelList[i] = item
    end
    self.imgSelectList = imgSelect
    self:refreshCurRoleInfo(1)
    self:refreshSelImg(1)
end

-- 初始化英雄图标按钮
function HeroView:initHeroItem(item, data)
    local img_gunner = item:getChildByName("img_gunner")            -- 角色头像
    img_gunner:setColor(cc.BLACK)
    GameTool:setRoleHeadImg(item.idx, img_gunner)
    local fnt_battle = item:getChildByName("fnt_battle"):hide()     -- 出战图标
    table.insert(self.battleIconList, fnt_battle)
    local img_level = item:getChildByName("img_level")              -- 军衔图标
    img_level:ignoreContentAdaptWithSize(true)
    local panel_level = item:getChildByName("Panel_level")
    local txt_level = panel_level:getChildByName("Text_level")      -- 角色等级
    if data then
        item.isDispatch = data.isDispatch
        if data.isDispatch == 1 then
            fnt_battle:show()
        end
        img_gunner:setColor(cc.WHITE)
        local rank = data.roleRank
        local level = data.roleLevel
        local name = string.format("img_level%d_hero_jtdzz.png", rank)
        img_level:loadTexture(name, 1)
        txt_level:setString(string.format("lv.%d", level))
        img_level:show()
        img_level:setLocalZOrder(99)
        panel_level:setLocalZOrder(98)
    else
        img_level:hide()
        --img_level:loadTexture("img_level0_hero_jtdzz.png", 1)
        local idx = item.idx
        local cfg = GameTool:getRoleCfg(idx)
        local level = cfg.OpenValue[1]
        local tip = string.format("通关世界%d解锁", level)
        txt_level:setString(tip)
        panel_level:setLocalZOrder(99)
    end
end

-- 更新整容战力
function HeroView:updateLineUpCombat()
    local combat, allCombat = GameTool:getLineUpCombat(self.roleInfoList)
    self.txt_lineup:setString("战力: " .. combat)
    UserData.Shared():set_dwCombat(allCombat)
    --刷新里程碑红点
    MessageManager.Shared():postMsg(MsgKeyData.onRedTisRefresh, { Define.ENUM_REDTIS_TYPE.MILESTONE });
    MessageManager.Shared():postMsg(MsgKeyData.onCombatUpdate)

    MsgSendMgr:sendMileStoneReq(0)
end

function HeroView:initPanelHero(panel_hero)
    panel_hero.box = panel_hero:getBoundingBox()
    self.panelHero = panel_hero
    local combat = GameTool:getLineUpCombat(self.roleInfoList)
    local panel_lineup = panel_hero:getChildByName("Panel_lineup")
    self.txt_lineup = panel_lineup:getChildByName("Text_combat")
    self.txt_lineup:setString("战力: " .. combat)
    for i = 1, 5 do
        local panel = panel_hero:getChildByName("Panel_position_" .. i)
        panel.parent = panel_hero
        panel.box = panel:getBoundingBox()
        self.panelRoleList[i] = panel
    end
end

-- 更新中部的角色按钮
function HeroView:updateRoleBattle()
    local roleInfoList = self.roleInfoList
    for i, v in pairs(self.battlePanelList) do
        self:initHeroItem(v, roleInfoList[i])
    end
end

-- 更新下面的角色骨骼动画
function HeroView:updateRoleNode()
    local roleInfoList = self.roleInfoList
    for _, v in pairs(roleInfoList) do
        local roleId = v.roleId
        local curRoleNode = self.roleNodeList[roleId]
        local position = v.position
        if v.isDispatch == 1 then
            local roleRank = v.roleRank
            if not curRoleNode then
                local roleNode = AnimationMgr:createHeroSpine(roleId, roleRank)
                roleNode:setScale(0.85)
                self.roleNodeList[roleId] = roleNode
                self.csbNode:addChild(roleNode)
            else
                curRoleNode:show()
                if self.roleRankList[roleId] ~= roleRank then
                    self.roleRankList[roleId] = roleRank
                    curRoleNode:setSkin("stage" .. roleRank + 1)
                end
            end
            self:setRolePosition(roleId, position)
        else
            if curRoleNode then
                curRoleNode.roleID = 0
                curRoleNode:hide()
            end
        end
    end
end

function HeroView:setRolePosition(roleID, posIdx)
    local subYList = { 50, 50, 45, 40, 30, 40 }
    local roleNode = self.roleNodeList[roleID]
    local panelRole = self.panelRoleList[posIdx]
    if roleNode and panelRole then
        local pos = cc.p(panelRole:getPosition())
        pos.y = pos.y - subYList[roleID]
        pos = panelRole.parent:convertToWorldSpace(pos)
        roleNode:setPosition(pos)
        panelRole.roleNode = roleNode
        roleNode.offPos = pos
        roleNode.roleID = roleID
        self.panelRoleList[posIdx] = panelRole
    else
        if panelRole then
            panelRole.roleNode = nil
        end
    end
    if self.rolePosList[posIdx] then
        self.rolePosList[posIdx] = roleID
    end
end

-- 英雄阶级图鉴界面
function HeroView:showRankDetail()
    local para = {
        csb = JunTuanCfg.csbCfg.heroView.hero_rank_detail,
        setSize = true
    }
    local ui = self:createCSB(para)
    ui:setAnchorPoint(0.5, 0.5)
    ui:setPosition(display.center)
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)

    local btn_close = panel_main:getChildByName("btn_close")
    local btn_check = panel_main:getChildByName("btn_check"):hide()
    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent(true)
            end)
        elseif btn == btn_check then

        end
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_check, btnCall)

    local panel_list = panel_main:getChildByName("Panel_list")
    local listView = panel_list:getChildByName("List_item")
    listView:setScrollBarEnabled(false)
    for i = 1, 10 do
        local rank = i
        local item = listView:getItem(rank - 1)
        local panel_level = item:getChildByName("Panel_level")
        local panel_mask = item:getChildByName("Panel_mask")
        local curRank = self.curRoleInfo.roleRank
        panel_mask:setVisible(rank > curRank)
        local img_level = panel_level:getChildByName("img_level")
        img_level:ignoreContentAdaptWithSize(true)
        local name = string.format("img_level%d_hero_jtdzz.png", rank)
        img_level:loadTexture(name, 1)
        local txt_level = panel_level:getChildByName("Text_level")
        local txt_skill = item:getChildByName("Text_skill")
        local txt_attack = item:getChildByName("Text_attack")
        txt_level:setString(GameTool:getRankString(rank))
        txt_skill:setString("超级技能:lv" .. rank)
        local curData = GameTool:getRankData(self.curRoleID, rank)
        txt_attack:setString(string.format("%s+%.2f%%", curData.valueStr3, curData.Value / 100))
        ExternalTools:txtAutoWidth(txt_attack, 196)
    end
end

-- 英雄详细属性界面
function HeroView:showCombatDetail(roleID)
    if not self.combatDetailNode then
        local para = {
            csb = JunTuanCfg.csbCfg.heroView.hero_combat,
            setSize = true
        }
        local ui = self:createCSB(para)
        ui:setAnchorPoint(0.5, 0.5)
        ui:setPosition(display.center)
        self:addChild(ui)
        MsgSendMgr:sendRoleAttrDataReq(roleID)
        self.combatDetailNode = ui
        self:createAni(ui)
    end

    local ui = self.combatDetailNode
    local roleInfo = self:getRoleInfo(roleID)
    local roleValueInfo = self:getRoleValueInfo(roleID)

    local roleTxtInfo = self:getRoleTxtInfo(roleID)
    local sex = roleTxtInfo.sex
    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")

    local panel_toggle = panel_main:getChildByName("Panel_toggle")
    local panel_combat = panel_main:getChildByName("Panel_combat")
    local panel_gunner = panel_main:getChildByName("Panel_gunner")
    local panel_combat_g = panel_gunner:getChildByName("Panel_combat")
    local panel_combatInfo = panel_combat:getChildByName("Panel_combat")
    local panel_skill = panel_combat:getChildByName("Panel_role")
    local panel_hero_intro = panel_main:getChildByName("Panel_hero_intro"):hide()
    local panel_intro_1 = panel_hero_intro:getChildByName("Panel_intro_1")              -- 普攻介绍
    local panel_intro_2 = panel_hero_intro:getChildByName("Panel_intro_2")              -- 技能介绍
    local panel_intro_3 = panel_hero_intro:getChildByName("Panel_intro_3")              -- 英雄介绍

    local img_combat = panel_gunner:getChildByName("img_combat"):hide()
    local img_gunner = panel_gunner:getChildByName("img_gunner")
    local img_skill = panel_skill:getChildByName("img_role")
    local icon_sex = panel_gunner:getChildByName("icon_sex"):hide()
    local icon_ground = panel_gunner:getChildByName("icon_ground"):hide()
    local icon_underground = panel_gunner:getChildByName("icon_underground")
    self:setAtkTypeImg(icon_ground, icon_underground, roleTxtInfo.canTarget)
    GameTool:setRoleHeadImg(roleID, img_gunner)
    GameTool:setSkillImg(roleID, img_skill)
    GameTool:setSexImg(sex, icon_sex)
    GameTool:setRoleFiveImg(roleID, img_combat)

    local txt_name = panel_gunner:getChildByName("Text_name")
    local txt_age = panel_gunner:getChildByName("Text_age")
    local txt_combat = panel_gunner:getChildByName("Panel_combat"):getChildByName("Text_num")
    local txt_atk_info = panel_intro_1:getChildByName("Text_intro")
    local txt_skill_info = panel_intro_2:getChildByName("Text_intro")
    local txt_role_info = panel_intro_3:getChildByName("Text_intro")
    local txt_tip_1 = panel_skill:getChildByName("Text_tip_1")                      -- 技能描述
    local txt_tip_2 = panel_skill:getChildByName("Text_tip_2")                      -- 技能属性
    local txt_value_1 = panel_combatInfo:getChildByName("Text_value_1")             -- 攻击力文本
    local txt_value_2 = panel_combatInfo:getChildByName("Text_value_2")             -- 攻速文本
    local txt_value_3 = panel_combatInfo:getChildByName("Text_value_3")             -- 暴击率文本
    local txt_value_4 = panel_combatInfo:getChildByName("Text_value_4")             -- 暴击伤害文本
    local txt_value_5 = panel_combatInfo:getChildByName("Text_value_5")             -- 攻击力加成文本
    local txt_value_6 = panel_combatInfo:getChildByName("Text_value_6")             -- 攻速加成文本
    local txt_value_7 = panel_combatInfo:getChildByName("Text_value_7")             -- 特效属性1
    local txt_value_8 = panel_combatInfo:getChildByName("Text_value_8")             -- 特殊属性2
    local txt_special_1 = panel_combatInfo:getChildByName("Text_1_0_4")             -- 特殊属性1
    local txt_special_2 = panel_combatInfo:getChildByName("Text_1_0_5")             -- 特殊属性2
    txt_name:setString(roleTxtInfo.name)
    txt_age:setString(roleTxtInfo.age)
    txt_combat:setString(roleInfo.combat)

    GameTool:setAtkTxtInfo(roleID, txt_atk_info)
    GameTool:setSkillTxtInfo(roleID, txt_skill_info)
    GameTool:setRoleTxtInfo(roleID, txt_role_info)

    local btn_close = panel_main:getChildByName("btn_close")
    local btn_toggle_1 = panel_toggle:getChildByName("btn_toggle_1")
    local btn_toggle_2 = panel_toggle:getChildByName("btn_toggle_2")
    local btnList = { btn_toggle_1, btn_toggle_2 }
    local function updateCheckBtn(btn)
        local normal = "btn_toggle_1_hero_jtdzz.png"
        local select = "btn_toggle_2_hero_jtdzz.png"
        for _, v in pairs(btnList) do
            if v == btn then
                v:loadTextures(select, select, select, 1)
            else
                v:loadTextures(normal, normal, normal, 1)
            end
        end
    end

    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent()
                self.combatDetailNode = nil
            end)
        elseif btn == btn_toggle_1 then
            updateCheckBtn(btn)
            panel_combat:show()
            panel_combat_g:show()
            panel_hero_intro:hide()
            img_combat:hide()
        elseif btn == btn_toggle_2 then
            updateCheckBtn(btn)
            panel_combat:hide()
            panel_combat_g:hide()
            panel_hero_intro:show()
            img_combat:show()
        end
    end
    updateCheckBtn(btn_toggle_1)
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_toggle_1, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_toggle_2, btnCall)

    if roleValueInfo == nil then
        --GameTool:showTxtTip("获取不到角色属性数据");
        return ;
    end

    local speed = roleValueInfo.interval
    local up = roleValueInfo.attackSpeedPer
    speed = (1 + up) * speed
    speed = GameTool:setAutoDotNum(speed)

    txt_value_1:setString(roleValueInfo.attack)
    txt_value_2:setString(speed .. "次/每秒")
    txt_value_3:setString(roleValueInfo.critRate * 100 .. "%")
    txt_value_4:setString(roleValueInfo.critMultiples * 100 .. "%")
    txt_value_5:setString(roleValueInfo.attackPer * 100 .. "%")
    txt_value_6:setString(roleValueInfo.attackSpeedPer * 100 .. "%")

    local s1, s2 = roleValueInfo.personal1, roleValueInfo.personal2
    local v1, v2 = roleValueInfo.skillParam1, roleValueInfo.skillParam2
    GameTool:setTxtSkillTip(roleID, txt_tip_1, txt_tip_2, v1, v2)
    GameTool:setSpecialValue(roleID, s1, s2, txt_special_1, txt_special_2, txt_value_7, txt_value_8)

    for i = 1, 8 do
        local btn = panel_combatInfo:getChildByName("btn_value_" ..i)
        ExternalTools:addBtnTouchEventListener(btn, function ()
            if i <= 6 then
                local des = GameTool:getValueDes(i)
                GameTool:showTxtTip(des)
            else
                local spDes = GameTool:getSpValueDes(roleID)
                local str = i == 7 and spDes.des_1 or spDes.des_2
                GameTool:showTxtTip(str)
            end
        end)
    end
end

-- 英雄碎片界面
function HeroView:showHeroSpDetail(roleID)
    local para = {
        csb = JunTuanCfg.csbCfg.heroView.hero_pieces,
        setSize = true,
    }
    local ui = ViewBase:createCSB(para)
    ui:setAnchorPoint(0.5, 0.5)
    ui:setPosition(display.center)
    self.heroSpDetailView = ui
    self:addChild(ui)

    local roleInfo = self:getRoleInfo(roleID)
    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)

    local panel_num = panel_main:getChildByName("Panel_num")
    local panel_pieces = panel_main:getChildByName("Panel_pieces")
    local panel_fragment = panel_pieces:getChildByName("Panel_fragment")
    local img_gunner = panel_fragment:getChildByName("img_gunner")
    local txt_ex_num = panel_num:getChildByName("Text_num")             -- 要转换的数量
    local txt_sp_num = panel_fragment:getChildByName("Text_num")        -- 拥有的碎片数量
    txt_ex_num:setString(1)
    txt_sp_num:setString(roleInfo.roleChip)
    GameTool:setRoleHeadImg(roleID, img_gunner)

    local curNum = 1
    local allNum = roleInfo.roleChip
    local btn_plus = panel_num:getChildByName("btn_plus")
    local btn_minus = panel_num:getChildByName("btn_minus")
    local function chaneCall(btn)
        if btn == btn_minus then
            if curNum > 1 then
                curNum = curNum - 1
            end
        else
            if curNum < allNum then
                curNum = curNum + 1
            end
        end
        txt_ex_num:setString(curNum)
    end
    local function touchCall(btn, event)
        if event == ccui.TouchEventType.began then
            chaneCall(btn)
            self:startLongKeep(chaneCall, btn)
        elseif event == ccui.TouchEventType.canceled or event == ccui.TouchEventType.ended then
            self:stopLongKeep()
        end
    end
    btn_plus:addTouchEventListener(touchCall)
    btn_minus:addTouchEventListener(touchCall)

    local btn_close = panel_main:getChildByName("btn_close")
    local btn_switch = panel_main:getChildByName("btn_switch")
    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent(true)
                self.heroSpDetailView = nil
            end)
        elseif btn == btn_switch then
            if roleInfo.roleChip > 0 and curNum <= roleInfo.roleChip then
                local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.CHIP_CHANGE)
                if UserData.Shared():get_lDiamond() >= gem then
                    local tip = string.format("是否使用%d钻石进行碎片转换（可获得相同数量的随机碎片）?", gem)
                    confirm(tip, function()
                        -- 发送碎片转换请求
                        MsgSendMgr:sendRoleChipConvert(roleID, curNum)
                        MsgSendMgr:sendRoleDataReq(roleID)
                    end)
                else
                    GameTool:showTxtTip("钻石不足")
                    GameTool:showBuyGemView(self)
                end
            else
                GameTool:showTxtTip("碎片不足,开启碎片宝箱可获得英雄碎片")
                --GameTool:showBuyGemView(self)
            end
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_switch, btnCall)
end

-- 发送角色升级请求
function HeroView:sendRoleLevelUp()
    local roleInfo = UserData.Shared().roleInfoList[self.curRoleID]
    if roleInfo then
        local canUpInfo = roleInfo.canUpInfo
        if UserData.Shared():get_lGoldBean() >= canUpInfo.coin then
            MsgSendMgr:sendRoleLevelUp(self.curRoleID)
        else
            GameTool:showTxtTip("金币不足")
            GameTool:showBuyGoldView(self)
        end
    end
end

-- 装备是否满足升阶条件
function HeroView:isEquipCanRankUp(roleID, nextRank)
    local myEquipInfo = self:getCurRoleEquipID(roleID)
    local isEquip = 0       -- 装备是否满足升阶
    for i = 1, 3 do
        local data = self:getEquipDataByEquipId(myEquipInfo[i], roleID)
        if data and data.equipId >= GameTool:getEquipLevelID(nextRank, i, roleID) then
            isEquip = isEquip + 1
        end
    end
    return isEquip >= 3
end

-- 英雄晋升界面
function HeroView:showHeroRankUp(roleID, roleRank)
    local para = {
        csb = JunTuanCfg.csbCfg.heroView.hero_rank_up,
        setSize = true
    }
    local ui = self:createCSB(para)
    ui:setAnchorPoint(0.5, 0.5)
    ui:setPosition(display.center)
    self.heroRankView = ui
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)

    local btn_close = panel_main:getChildByName("btn_close")
    local btn_promotion = panel_main:getChildByName("btn_promotion")

    local nextRank = roleRank + 1
    local panel_level_1 = panel_main:getChildByName("Panel_level_1")
    local panel_level_2 = panel_main:getChildByName("Panel_level_2")
    local img_level_1 = panel_level_1:getChildByName("img_level")
    local txt_level_1 = panel_level_1:getChildByName("Text_num")
    local img_level_2 = panel_level_2:getChildByName("img_level")
    local txt_level_2 = panel_level_2:getChildByName("Text_num")
    local name1 = string.format("img_level%d_hero_jtdzz.png", roleRank)
    local name2 = string.format("img_level%d_hero_jtdzz.png", nextRank)
    img_level_1:ignoreContentAdaptWithSize(true)
    img_level_2:ignoreContentAdaptWithSize(true)
    img_level_1:loadTexture(name1, 1)
    img_level_2:loadTexture(name2, 1)
    txt_level_1:setString(GameTool:getRankString(roleRank))
    txt_level_2:setString(GameTool:getRankString(nextRank))

    local roleSpAni_cur = AnimationMgr:createHeroSpine(roleID, roleRank)
    local roleSpAni_next = AnimationMgr:createHeroSpine(roleID, nextRank)
    roleSpAni_cur:setAnimation(0, "cemian_daiji", true)
    roleSpAni_next:setAnimation(0, "cemian_daiji", true)
    roleSpAni_cur:setPosition(cc.p(126.5, 75))
    roleSpAni_next:setPosition(cc.p(126.5, 75))
    panel_level_1:addChild(roleSpAni_cur)
    panel_level_2:addChild(roleSpAni_next)

    local panel_role = panel_main:getChildByName("Panel_role")
    local panel_equip = panel_main:getChildByName("Panel_equip")
    local panel_fragment = panel_main:getChildByName("Panel_fragment")
    local panel_soul = panel_main:getChildByName("Panel_soul")

    local img_role = panel_role:getChildByName("img_role")
    local img_gunner = panel_fragment:getChildByName("img_gunner")
    GameTool:setSkillImg(roleID, img_role)
    GameTool:setRoleHeadImg(roleID, img_gunner)
    local myEquipInfo = self:getCurRoleEquipID(roleID)
    local isEquip = 0       -- 装备是否满足升阶
    for i = 1, 3 do
        local item_equip = panel_equip:getChildByName("Panel_equip_" .. i)
        local item_mark = panel_equip:getChildByName("Panel_mark_" .. i)
        local img_mark = item_mark:getChildByName("img_mark")
        GameTool:setEquipImg(roleID, i, nextRank, item_equip)
        local data = self:getEquipDataByEquipId(myEquipInfo[i])
        if data and data.equipId >= GameTool:getEquipLevelID(nextRank, i, roleID) then
            img_mark:loadTexture("img_mark_right_hero_jtdzz.png", 1)
            isEquip = isEquip + 1
        else
            img_mark:loadTexture("img_mark_wrong_hero_jtdzz.png", 1)
        end
    end

    local txt_skill = panel_role:getChildByName("Text_skill")
    local txt_sp_num = panel_fragment:getChildByName("Text_num")            -- 碎片数
    local txt_soul_num = panel_soul:getChildByName("Text_num")          -- 钻石数
    local txt_a1 = panel_role:getChildByName("Text_a1")                 -- 特殊属性1当前数据
    local txt_a2 = panel_role:getChildByName("Text_a2")                 -- 特殊属性1升级后数据
    local txt_b1 = panel_role:getChildByName("Text_b1")                 -- 特殊属性2当前数据
    local txt_b2 = panel_role:getChildByName("Text_b2")                 -- 特殊属性2升级后数据
    local txt_c1 = panel_role:getChildByName("Text_c1")                 -- 攻击力
    local txt_c2 = panel_role:getChildByName("Text_c2")                 -- 攻击力数值
    local txt_d1 = panel_role:getChildByName("Text_d1")                 -- 需要达成
    local txt_d2 = panel_role:getChildByName("Text_d2")                 -- 达成条件

    local curData = GameTool:getRankData(roleID, roleRank)          -- 当前等级数据
    local nextData = GameTool:getRankData(roleID, nextRank)         -- 下级数据
    local skillName = GameTool:getSkillName(roleID)                 -- 技能名称
    local valueStr1, valueStr2, valueStr3 = nextData.valueStr1, nextData.valueStr2, nextData.valueStr3
    local cur_v1, next_v1 = curData.value1, nextData.value1
    local cur_v2, next_v2 = curData.value2, nextData.value2
    local str1 = GameTool:getEquipColorStr(nextRank)
    local str2 = GameTool:getEquipLevelStr(nextRank)

    local needSoul = nextData.Gem                       -- 晋升所需钻石数
    local myHaveChip = self.curRoleInfo.roleChip        -- 当前拥有的碎片数
    local needChip = nextData.ItemNum                   -- 晋升所需碎片数
    local canUpInfo = self.curRoleInfo.canUpInfo
    needSoul = canUpInfo.gem
    needChip = canUpInfo.chipNums

    txt_skill:setString(string.format("超级技能：%s", skillName))
    txt_sp_num:setString(string.format("%d/%d", myHaveChip, needChip))
    txt_soul_num:setString(needSoul)
    txt_a1:setString(string.format("%s%d%% → ", valueStr1, cur_v1))
    txt_a2:setString(string.format("%d%%", next_v1))
    txt_b1:setString(string.format("%s%s →", valueStr2, cur_v2))
    txt_b2:setString(string.format("%s", next_v2))
    txt_c1:setString(valueStr3)
    txt_c2:setString(string.format("+%.2f%%", nextData.Value / 100))
    txt_d2:setString(string.format("装备%s%s", str1, str2))

    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent(true)
                self.heroRankView = nil
            end)
        elseif btn == btn_promotion then
            local roleData = UserData.Shared().roleInfoList[roleID]
            if roleData.roleChip < needChip then
                GameTool:showTxtTip("碎片不足,开启碎片宝箱可获得英雄碎片")
            elseif UserData.Shared():get_lDiamond() < needSoul then
                GameTool:showTxtTip("钻石不足")
                GameTool:showBuyGemView(self)
            elseif isEquip ~= 3 then
                GameTool:showTxtTip("装备未达条件")
            else
                MsgSendMgr:sendRoleRankUp(self.curRoleID)
                return
            end
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_promotion, btnCall)
end

-- 显示英雄装备界面
function HeroView:showEquipView(idx, userEquipId)
    local para = {
        csb = JunTuanCfg.csbCfg.heroView.hero_equip,
        setSize = true
    }
    self.equipView = self:createCSB(para)
    self.equipView:setAnchorPoint(0.5, 0.5)
    self.equipView:setPosition(display.center)
    self:addChild(self.equipView)

    local panel_black = self.equipView:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    local panel_mask = panel_black:getChildByName("Panel_mask")
    self.equipView.panel_mask = panel_mask
    self.equipView.idx = idx
    self.equipView.userEquipId = userEquipId
    self:createAni(panel_main)

    local panel_equip = panel_main:getChildByName("Panel_equip")
    local panel_toggle = panel_main:getChildByName("Panel_toggle")
    local btn_toggle = {
        panel_toggle:getChildByName("btn_toggle_1"),
        panel_toggle:getChildByName("btn_toggle_2"),
        panel_toggle:getChildByName("btn_toggle_3")
    }
    self.btnToggleList = btn_toggle
    self.panel_equip = panel_equip
    panel_equip:getChildByName("Panel_equip_2"):hide()
    self.item_equip = panel_equip:getChildByName("Panel_equip_1")
    self.item_equip.redDot = self.item_equip:getChildByName("icon_red"):hide()
    self.item_equip:setVisible(false);
    local btn_close = panel_main:getChildByName("btn_close")
    local btn_handbook = panel_main:getChildByName("btn_handbook"):hide()

    for i, btn in ipairs(btn_toggle) do
        btn.click_idx = i;
        btn.redDot = btn:getChildByName("icon_red"):hide()
        GameTool:setToggleEnable(btn, idx == i);
    end
    self.curSelctEquipIdx = idx;

    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                self.equipView:removeFromParent(true)
                self.equipView = nil
            end)
        elseif btn == btn_handbook then

        elseif btn == self.item_equip then
            local equipId = btn.equipId;
            local idx = btn.btn_idx;
            self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, equipId, idx);
        elseif btn == btn_toggle[1] or btn == btn_toggle[2] or btn == btn_toggle[3] then
            local idx = btn.click_idx;
            if idx == nil or idx == self.curSelctEquipIdx then
                return
            end
            self.curSelctEquipIdx = idx;
            local roleId = self.curRoleID;
            local equipList = self:getCurRoleEquipID(roleId)
            local equipId = equipList[idx];
            for i, btn in ipairs(btn_toggle) do
                GameTool:setToggleEnable(btn, i == idx);
            end
            self:refreshEquipList(idx)
            self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.LEFT, equipId, idx);
            self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, nil, nil);
        end
    end
    self:showEquipSelectImg(userEquipId)
    self:setBtnToggleRedDot()
    ExternalTools:addBtnTouchEventListener(self.item_equip, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_toggle[1], btnCall)
    ExternalTools:addBtnTouchEventListener(btn_toggle[2], btnCall)
    ExternalTools:addBtnTouchEventListener(btn_toggle[3], btnCall)
    ExternalTools:addBtnTouchEventListener(btn_handbook, btnCall)
end

-- 显示装备合成
function HeroView:showMergeView(curData, nextData)
    local para = {
        curData = curData,
        nextData = nextData,
    }
    local view = require("JunTuan.src.views.MergeEquipView").new(para)
    ExternalTools:showView(view, self)
end

-- 显示军衔进阶成功界面
function HeroView:showRankUpView(roleId, roleRank)
    local para = {
        roleId = roleId,
        roleRank = roleRank,
    }
    local scene = SceneManager.Shared():GetRunningScene()
    local view = require("JunTuan.src.views.RoleRankUpView").new(para)
    ExternalTools:showView(view, scene)
end

-- 设置装备分类按钮红点
function HeroView:setBtnToggleRedDot()
    local equipInfoList = UserData.Shared().equipInfoList[self.curRoleID]
    for i = 1, 3 do
        -- 红点显示
        local listData = self:getEquipTypeListData(equipInfoList, i)
        if listData then
            local isShow = self:checkIsCanMerge(self.curRoleID, listData)
            self.btnToggleList[i].redDot:setVisible(isShow)
        end
    end
end

function HeroView:updateEquipView()
    if self.equipView then
        if self.equipView.panel_mask then
            self.equipView.panel_mask:hide()
        end
        local idx = self.equipView.idx
        local userEquipId = self.equipView.userEquipId
        self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.LEFT, userEquipId, idx);
        self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, nil, nil);
        self:initEquipTouchEvent()
    end
end

-- 刷新装备比较界面
function HeroView:refreshEquipView(panel, data, isFirst)
    local panel_title = panel:getChildByName("Panel_title")
    local img_tip = panel:getChildByName("img_tip")
    local panel_equip = panel:getChildByName("Panel_equip")
    local panel_detail = panel:getChildByName("Panel_detail")
    local panel_detail_1 = panel:getChildByName("Panel_detail_1")
    local panel_detail_2 = panel:getChildByName("Panel_detail_2")
    local panel_detail_3 = panel:getChildByName("Panel_detail_3")

    local txt_name = panel_title:getChildByName("Text_title")                   -- 装备名称
    local txt_tip = img_tip:getChildByName("Text_tip")                          -- 已装备、已选择、未选择
    local txt_type = panel_detail:getChildByName("Text_detail_1")               -- 装备类型
    local txt_role = panel_detail:getChildByName("Text_detail_2")               -- 英雄职业
    local txt_title_1 = panel_detail_1:getChildByName("Text_title")             -- 基础属性
    local txt_title_2 = panel_detail_2:getChildByName("Text_title")             -- 类型属性
    local txt_value_1 = panel_detail_1:getChildByName("Text_detail")            -- 基础属性
    local txt_value_2 = panel_detail_2:getChildByName("Text_detail")            -- 类型属性
    local txt_titleEx_1 = panel_detail_3:getChildByName("Text_title_1")         -- 附加属性1
    local txt_titleEx_2 = panel_detail_3:getChildByName("Text_title_2")         -- 附加属性2
    local txt_titleEx_3 = panel_detail_3:getChildByName("Text_title_3")         -- 附加属性3
    local txt_valueEx_1 = panel_detail_3:getChildByName("Text_detail_1")        -- 附加属性1
    local txt_valueEx_2 = panel_detail_3:getChildByName("Text_detail_2")        -- 附加属性2
    local txt_valueEx_3 = panel_detail_3:getChildByName("Text_detail_3")        -- 附加属性3
    local btn_switch = panel:getChildByName("btn_switch")
    local btn_reset = panel_detail_3:getChildByName("btn_reset")
    local btn_replace = panel_detail_3:getChildByName("btn_replace")
    local panel_soul = panel_detail_3:getChildByName("Panel_soul");
    local txt_reset_cost = panel_soul:getChildByName("Text_num");
    local gem_reset_cost = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.EQUIP_RESET)
    txt_reset_cost:setString("x" .. gem_reset_cost)

    --无装备状态
    if data == nil then
        txt_name:setVisible(false);
        local tipStr = panel:getName() == "Panel_left" and "未装备" or "未选择"
        txt_tip:setString(tipStr);
        txt_type:setString("");
        txt_role:setString("");
        txt_title_1:setString("");
        txt_value_1:setString("");
        txt_title_2:setString("");
        txt_value_2:setString("");
        txt_titleEx_1:setString("");
        txt_titleEx_2:setString("");
        txt_titleEx_3:setString("");
        txt_valueEx_1:setString("");
        txt_valueEx_2:setString("");
        txt_valueEx_3:setString("");
        panel_equip:setVisible(false);
        panel_soul:setVisible(false);

        if btn_switch then
            btn_switch:setVisible(false);
        end
        if btn_reset then
            btn_reset:setVisible(false);
        end
        if btn_replace then
            btn_replace:setVisible(false);
        end
        return ;
    end

    if isFirst then
        local function btnCall(btn)
            local body = {
                roleId = btn.roleId,
                userEquipId = btn.userEquipId,
                equipId = btn.equipId
            }
            if btn == btn_switch then
                --转换
                local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.EQUIP_CHANGE)
                if UserData.Shared():get_lDiamond() >= gem then
                    local tip = string.format("是否使用%d钻石进行装备转换（可获得一个同级的随机装备）?", gem)
                    confirm(tip, function()
                        self.curConvertEquip = body
                        MsgSendMgr:sendEquipConvert(body);
                    end)
                else
                    GameTool:showTxtTip("钻石不足")
                    GameTool:showBuyGemView(self)
                end
            elseif btn == btn_reset then
                --重置
                local gem = gem_reset_cost
                if UserData.Shared():get_lDiamond() >= gem then
                    if panel:getName() == "Panel_left" then
                        self.curResetDirIdx = ENUM_SUB_EQUIPPANEL.LEFT
                    else
                        self.curResetDirIdx = ENUM_SUB_EQUIPPANEL.RIGHT
                    end
                    local tip = string.format("是否使用%d钻石进行装备附加属性重置?", gem)
                    confirm(tip, function()
                        MsgSendMgr:sendEquipReset(body);
                    end)
                else
                    GameTool:showTxtTip("钻石不足")
                    GameTool:showBuyGemView(self)
                end
                txt_reset_cost:setString("x" .. gem)
            elseif btn == btn_replace then
                --替换
                if body.roleId ~= self.curRoleID then
                    GameTool:showTxtTip("不是此角色的装备")
                    return
                end
                if self:isMyWearEquip(body.roleId, body.userEquipId) then
                    GameTool:showTxtTip("已穿戴该装备")
                    return
                end
                MsgSendMgr:sendEquipWear(body);
            end
        end
        -- 初始化按钮点击事件
        local btn_switch = panel:getChildByName("btn_switch")
        local btn_reset = panel_detail_3:getChildByName("btn_reset")
        local btn_replace = panel_detail_3:getChildByName("btn_replace")
        if btn_switch ~= nil then
            btn_switch.roleId = data.roleID;
            btn_switch.userEquipId = data.equipData.userEquipId;
            btn_switch.equipId = data.equipData.equipId;
            ExternalTools:addBtnTouchEventListener(btn_switch, btnCall)
        end
        if btn_reset ~= nil then
            btn_reset.roleId = data.roleID;
            btn_reset.userEquipId = data.equipData.userEquipId;
            btn_reset.equipId = data.equipData.equipId;
            ExternalTools:addBtnTouchEventListener(btn_reset, btnCall)
        end
        if btn_replace ~= nil then
            btn_replace.roleId = data.roleID;
            btn_replace.userEquipId = data.equipData.userEquipId;
            btn_replace.equipId = data.equipData.equipId;
            ExternalTools:addBtnTouchEventListener(btn_replace, btnCall)
        end
    end

    local roleId = data.roleID;
    local equipIdx = data.equipIdx;
    local equipData = data.equipData
    local equipRank = data.equipData.equipRank
    local equipStrData = data.equipStrData
    GameTool:setEquipImg(roleId, equipIdx, equipRank, panel_equip)
    local str = GameTool:getSpecialDesStr(equipData.subType)
    txt_name:setString(data[roleId][equipIdx])
    txt_name:setVisible(true);
    local tipStr = panel:getName() == "Panel_left" and "已装备" or "已选择"
    txt_tip:setString(tipStr)
    txt_type:setString(data.typeStr)
    txt_role:setString(data.roleStr)
    txt_title_1:setString(equipStrData.mainTypeStr)
    txt_value_1:setString("+" .. equipData.mainValue)
    txt_title_2:setString(equipStrData.subTypeStr)
    local subNum = equipData.subValue * 100
    if (self.curRoleID == 2 and equipIdx == 3) or (self.curRoleID == 4 and equipIdx == 1)
            or (self.curRoleID == 6 and equipIdx == 1) then
        subNum = equipData.subValue
    end
    txt_value_2:setString("+" .. GameTool:setAutoDotNum(subNum) .. str)
    txt_titleEx_1:setString(equipStrData.exValueStr1)
    txt_titleEx_2:setString(equipStrData.exValueStr2)
    txt_titleEx_3:setString(equipStrData.exValueStr3)
    if equipData.exValue1 > 0 then
        txt_valueEx_1:setString("+" .. GameTool:setAutoDotNum(equipData.exValue1 * 100) .. "%")
    else
        txt_valueEx_1:setString("未激活")
    end
    if equipData.exValue2 > 0 then
        txt_valueEx_2:setString("+" .. GameTool:setAutoDotNum(equipData.exValue2 * 100) .. "%")
    else
        txt_valueEx_2:setString("未激活")
    end
    if equipData.exValue3 > 0 then
        txt_valueEx_3:setString("+" .. GameTool:setAutoDotNum(equipData.exValue3 * 100) .. "%")
    else
        txt_valueEx_3:setString("未激活")
    end
    panel_equip:setVisible(true);
    panel_soul:setVisible(true);

    if btn_switch then
        btn_switch:setVisible(true);
    end
    if btn_reset then
        btn_reset:setVisible(true);
    end
    if btn_replace then
        btn_replace:setVisible(true);
    end
end

-- 显示装备穿戴图标
function HeroView:showEquipSelectImg(userEquipId)
    local removeT = {}
    for _, v in pairs(self.panelEquipList) do
        if tolua.isnull(v) then
            table.insert(removeT, v)
        else
            v:getChildByName("icon_select"):setVisible(v.userEquipId == userEquipId)
        end
    end
    for _, v in pairs(removeT) do
        table.removebyvalue(self.panelEquipList, v)
    end
end

function HeroView:removePanelEquipItem(userEquipId)
    for i, v in pairs(self.panelEquipList) do
        if v.userEquipId == userEquipId then
            self.panelEquipList[i] = nil
        end
    end
end

function HeroView:getEquipItemById(userEquipId)
    for _, v in pairs(self.panelEquipList) do
        if v.userEquipId == userEquipId then
            return v
        end
    end
end

-- 获取类型装备列表(武器、装备、配件)
function HeroView:getEquipTypeListData(equipInfoList, idx)
    if equipInfoList then
        local listData = {}
        for _, v in pairs(equipInfoList) do
            if v.equipType == idx then
                table.insert(listData, v)
            end
        end
        table.sort(listData, function(a, b)
            if a.equipRank and b.equipRank then
                return a.equipRank > b.equipRank
            end
            return false
        end)
        return listData
    end
end

-- 刷新装备列表
function HeroView:refreshEquipList(idx)
    if idx == nil then
        return
    end
    if tolua.isnull(self.panel_equip) then
        return
    end
    local equipInfoList = UserData.Shared().equipInfoList[self.curRoleID]
    if equipInfoList == nil then
        return
    end

    if self.panel_equip and self.item_equip then
        -- self.panel_equip:removeAllChildren()
        self.item_equip = nil;
        for _, node in ipairs(self.panel_equip:getChildren()) do
            local img = node:getChildByName("img_equip");
            if img ~= nil then
                if self.item_equip == nil then
                    self.item_equip = node;
                    node:setVisible(false);
                else
                    node:removeFromParent(true);
                end
            end
        end

        local listData = {}
        local myWearEquip
        for _, v in pairs(equipInfoList) do
            if v.equipType == idx then
                if v.isUsed == 1 then
                    myWearEquip = v
                else
                    table.insert(listData, v)
                end
            end
        end
        table.sort(listData, function(a, b)
            if a.equipRank and b.equipRank then
                return a.equipRank > b.equipRank
            end
            return false
        end)
        if myWearEquip then
            table.insert(listData, 1, myWearEquip)
        end

        local isShow = self:checkIsCanMerge(self.curRoleID, listData)
        self.btnToggleList[idx].redDot:setVisible(isShow)

        local function initItem(item, data)
            GameTool:setEquipImg(self.curRoleID, idx, data.equipRank, item)
            local icon_select = item:getChildByName("icon_select"):hide()
            if data.isUsed == 1 then
                icon_select:show()
            else
                item:setEnabled(true)
            end
        end

        self.panelEquipList = {}
        for i, v in pairs(listData) do
            local item = self.item_equip:clone();
            self.panel_equip:addChild(item);

            item.equipId = v.equipId;
            item.btn_idx = idx;
            item.userEquipId = v.userEquipId;
            item.roleId = v.roleId;

            initItem(item, v)
            item:setAnchorPoint(0.5, 0.5)
            local col = i % 6
            col = col == 0 and 6 or col
            local x = 60 + (col - 1) * 100
            local y = 320 - (math.ceil(i / 6) - 1) * 100
            local p = cc.p(x, y)
            item:setPosition(p)
            item.oldPos = cc.p(p);
            item:setVisible(true);
            item.box = item:getBoundingBox();
            self.panelEquipList[v.userEquipId] = item;

            item.redDot = item:getChildByName("icon_red"):hide()
            if item.redDot then
                if self.showRedDotEquip[v.userEquipId] then
                    item.redDot:show()
                else
                    item.redDot:hide()
                end
            end
        end
    end
end

-- 判断是否是穿戴的装备
function HeroView:isMyWearEquip(roleId, userEquipId)
    local equipInfo = UserData.Shared().equipInfoList[roleId][userEquipId]
    if equipInfo.isUsed == 1 then
        return true
    end
    return false
end

--装备合成
function HeroView:initEquipTouchEvent()
    local function touchBegin(touch, event)
        local pos = touch:getLocation()
        self.curSelectEquipNode = self:checkCurSelEquip(pos)
        if self.curSelectEquipNode then
            self.curSelectEquipNode:setLocalZOrder(zIndex.touchLayer);
            local userEquipId = self.curSelectEquipNode.userEquipId;
            local idx = self.curSelectEquipNode.btn_idx;
            if not self:isMyWearEquip(self.curRoleID, userEquipId) then
                self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, userEquipId, idx);
            end
        end
        return true
    end

    local function touchMove(touch, event)
        local pos = touch:getLocation()
        self:onMoveEquipNode(pos)
    end

    local function touchEnd(touch, event)
        local pos = touch:getLocation()
        self:onMoveEndEquipNode(pos)
        self.curSelectEquipNode = nil
    end
    self.touchLayer_equip = ExternalTools:addTouchLayer(self.panel_equip, zIndex.touchLayer + 1, touchBegin, touchMove, touchEnd)
end

function HeroView:checkCurSelEquip(pos)
    if self.curSelectEquipNode then
        return self.curSelectEquipNode
    end
    pos = self.panel_equip:convertToNodeSpace(pos)
    for i, v in pairs(self.panelEquipList) do
        local box = v.box
        if box and cc.rectContainsPoint(box, pos) then
            self.lastMoveToPos = i
            return v
        end
    end
    return nil;
end

function HeroView:onMoveEquipNode(pos)
    if self.curSelectEquipNode then
        pos = self.panel_equip:convertToNodeSpace(pos)
        self.curSelectEquipNode:setPosition(pos)
    end
end

function HeroView:onMoveEndEquipNode(pos)
    local node = self.curSelectEquipNode;
    if node == nil then
        return
    end
    local lastPos = self.lastMoveToPos;
    pos = self.panel_equip:convertToNodeSpace(pos)
    for i, v in pairs(self.panelEquipList) do
        local box = v.box
        if cc.rectContainsPoint(box, pos) then
            self.lastMoveToPos = i
            break
        end
    end

    if lastPos ~= self.lastMoveToPos then
        local lastEquip = self.panelEquipList[lastPos];             -- 上次选择的装备
        local curEquip = self.panelEquipList[self.lastMoveToPos];   -- 当前选择的装备
        if lastEquip.equipId == curEquip.equipId then
            if curEquip.equipRank == 10 then
                GameTool:showTxtTip("当前装备已达最高等级")
                return
            end
            local body = {
                roleId = self.curRoleID,
                userEquipId1 = lastEquip.userEquipId;
                userEquipId2 = curEquip.userEquipId;
            }
            MsgSendMgr:sendEquipMerge(body)
            self.equipMergeInfo = body
            local item1 = self:getEquipItemById(body.userEquipId1)
            local item2 = self:getEquipItemById(body.userEquipId2)
            self:resetCompareItem(item1)
            self:resetCompareItem(item2)
            local f1 = self:isMyWearEquip(self.curRoleID, lastEquip.userEquipId)
            local f2 = self:isMyWearEquip(self.curRoleID, curEquip.userEquipId)
            if f1 or f2 then
                -- 合成装备中有我穿戴的装备
                self.isMergeWear = true
                --GameTool:showTxtTip("不能合成已穿戴装备")
            end
        end
    end
    self:setEquipPosition(lastPos)
    self.curSelectEquipNode = nil
end

--装备拖动复位
function HeroView:setEquipPosition(posIdx)
    if posIdx == 0 then
        return nil
    end
    local equipNode = self.panelEquipList[posIdx];
    local pos = equipNode.oldPos;
    equipNode:setLocalZOrder(1);
    equipNode:setPosition(pos)
end

-- 设置装备比较信息
function HeroView:setItemCompareInfo(userEquipId, leftOrRight, idx, roleId)
    local item = self:getEquipItemById(userEquipId)
    if item then
        item.userEquipId = userEquipId      -- 装备自增长id
        item.isCompare = true               -- 正在比较状态
        item.compareIdx = leftOrRight       -- 左边还是右边
        item.idx = idx                      -- 装备类型
        item.roleId = roleId                -- 角色id
    end
end

-- 重置比较装备
function HeroView:resetCompareItem(item)
    if item.isCompare then
        item.isCompare = false
        local userEquipId = item.userEquipId
        local idx = item.idx
        local compareIdx = item.compareIdx
        local roleId = item.roleId
        self:refreshSubEquipPanel(compareIdx, nil, nil, nil)
    end
end

--点击刷新对比装备
-- leftOrRight 0-左，1-右
-- userEquipId userEquipId自增长装备id
-- idx 装备类型(1武器2肩甲3配件)
function HeroView:refreshSubEquipPanel(leftOrRight, userEquipId, idx, roleID)
    local roleId = self.curRoleID;
    if roleId == 0 or self.equipView == nil then
        return
    end
    if roleID then
        roleId = roleID
    end
    if userEquipId == 0 then
        userEquipId = nil
    end
    local roleTxtInfo = GameTool:getEquipTxtInfo(roleId, idx)
    local equipData = self:getEquipDataByEquipId(userEquipId, roleId)
    local equipStrData = GameTool:getEquipDataInfo(equipData)

    local panel_black = self.equipView:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    local panelName = leftOrRight == ENUM_SUB_EQUIPPANEL.LEFT and "Panel_left" or "Panel_right";
    local panel_sub = panel_main:getChildByName(panelName);

    if userEquipId ~= nil then
        roleTxtInfo.roleID = roleId;
        roleTxtInfo.equipData = equipData;
        roleTxtInfo.equipStrData = equipStrData;
    else
        roleTxtInfo = nil;
    end
    self:setItemCompareInfo(userEquipId, leftOrRight, idx, roleId)
    self:refreshEquipView(panel_sub, roleTxtInfo, true);
end

-- 角色是否出战
function HeroView:isRoleActivity(roleId)
    for _, v in pairs(self.rolePosList) do
        if v == roleId then
            return true
        end
    end
    return false
end

function HeroView:refreshCurRoleInfo(roleId)
    self.curRoleID = roleId
    self.curRoleInfo = self:getRoleInfo(self.curRoleID)

    self:refreshSelImg(roleId)
    self:refreshPanelCombat(self.curRoleInfo)
    self:updateRoleBattle()
    self:updateRoleNode()
end

-- 长按加减按钮定时器
function HeroView:startLongKeep(call, btn)
    local function update()
        if call then
            call(btn)
        end
    end
    if not self.longKeepScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.longKeepScheduler = scheduler:scheduleScriptFunc(update, 0.1, false)
    end
end

-- 关闭定时器
function HeroView:stopLongKeep()
    if self.longKeepScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.longKeepScheduler)
        self.longKeepScheduler = nil
    end
end

-- 设置攻击类型icon
function HeroView:setAtkTypeImg(icon_ground, icon_underground, canTarget)
    local curAtkIdx = 1
    local iconAtkList = { icon_ground, icon_underground }
    for i, v in pairs(canTarget) do
        if v ~= 0 then
            local img = iconAtkList[curAtkIdx]
            if img then
                GameTool:setAtkTypeImg(i, img)
                curAtkIdx = curAtkIdx + 1
            end
        end
    end
end

-- 通过位置索引获取roleID
function HeroView:getRoleIDByPosIdx(posIdx)
    local panel = self.panelRoleList[posIdx]
    local roleNode = panel.roleNode
    if roleNode then
        return roleNode.roleID
    end
    return 0
end

-- 获取英雄信息
function HeroView:getRoleInfo(roleID)
    for _, v in pairs(self.roleInfoList) do
        if roleID == v.roleId then
            return v
        end
    end
end

-- 获取英雄属性数值信息
function HeroView:getRoleValueInfo(roleID)
    if self.roleValueList == nil then
        return nil
    end

    for _, v in pairs(self.roleValueList) do
        if roleID == v.roleId then
            return v
        end
    end
end

-- 获取英雄文本信息
function HeroView:getRoleTxtInfo(roleID)
    return GameTool:getRoleTxtInfo(roleID)
end

-- 获取装备数据用userEquipId来取装备
function HeroView:getEquipDataByEquipId(id, roleId)
    local r = roleId or self.curRoleID
    local equipList = UserData.Shared().equipInfoList[r]
    if equipList == nil then
        return nil;
    end
    return equipList[id];
end

function HeroView:getEquipDataByUserEquipId(id)
    if self.curRoleEquipList == nil then
        return nil;
    end

    if self.curRoleEquipList then
        for _, v in pairs(self.curRoleEquipList) do
            if v.userEquipId == id and id ~= 0 then
                return v
            end
        end
    end
end

-- 获取当前角色的装备列表
function HeroView:getCurRoleEquipList(roleID)
    return UserData.Shared().equipInfoList[roleID]
end

-- 获取当前角色装备序号(userEquipId)
function HeroView:getCurRoleEquipID(roleID)
    local equipList = UserData.Shared().equipInfoList[roleID]
    local curRoleEquipInfo = {}
    if equipList then
        for _, v in pairs(equipList) do
            if v.isUsed == 1 then
                curRoleEquipInfo[v.equipType] = v.userEquipId
            end
        end
    end
    return curRoleEquipInfo
end

-- 获取当前角色装备id
function HeroView:getEquipIDList(roleID)
    local curRoleEquipInfo = self:getCurRoleEquipID(roleID)

    local idList = {}
    for i, v in pairs(curRoleEquipInfo) do
        if v ~= 0 then
            local data = self:getEquipDataByEquipId(v, roleID)
            if data then
                idList[i] = data.equipId
            end
        end
    end
    return idList
end

-- 获取上阵英雄数量
function HeroView:getHeroActiveNum()
    local num = 0
    for _, v in pairs(self.roleInfoList) do
        if v.isDispatch == 1 then
            num = num + 1
        end
    end
    return num
end

-- 英雄是否上阵
function HeroView:isHeroActive(roleID)
    for _, v in pairs(self.roleInfoList) do
        if v.roleID == roleID then
            return v.isDispatch == 1
        end
    end
    return false
end

-- 处理角色升级
function HeroView:handleRoleLevelUp(data)
    local result = data.result
    local noError = result.noError
    local outMsg = result.outMsg
    local needCoin = self.curRoleInfo.canUpInfo.coin
    local needGem = self.curRoleInfo.canUpInfo.gem
    GameTool:showTxtTip(outMsg)
    if noError then
        GameTool:updateGold(-needCoin)
        GameTool:updateGem(-needGem)
        local canUpInfo = data.canUpInfo
        UserData.Shared():updateRoleCanUpInfo(canUpInfo)
        if needGem and needGem > 0 then
            local roleId = self.curRoleInfo.roleId
            local roleRank = self.curRoleInfo.roleRank + 1
            self:showRankUpView(roleId, roleRank)
        end
        if self.heroRankView then
            self.heroRankView:removeFromParent()
            self.heroRankView = nil
        end
        MsgSendMgr:sendRoleDataReq(self.curRoleID)
    end
    printf("---------- 处理角色升级 ----------")
    printf("noError is %d", noError and 1 or 0)
    printf("outMsg is %s", outMsg)
    printf("needCoin is %d", needCoin)
    printf("needGem is %d", needGem)
    printf("---------- 处理角色升级 ----------")
end

-- 处理装备合并
function HeroView:handleEquipMerge(data)
    local newUserEquipId = data.newUserEquipId
    self.equipInfoList = UserData.Shared().equipInfoList
    self.curRoleEquipList = self.equipInfoList[self.curRoleID]

    local body = self.equipMergeInfo
    if body then
        -- 手动合成装备成功,清掉合成所消耗的装备数据
        self.panelEquipList = {}
        local equipInfo = UserData.Shared().equipInfoList[body.roleId][body.userEquipId1]
        local newEquipInfo = UserData.Shared().equipInfoList[body.roleId][newUserEquipId]
        UserData.Shared().equipInfoList[body.roleId][body.userEquipId1] = nil
        UserData.Shared().equipInfoList[body.roleId][body.userEquipId2] = nil
        self.equipMergeInfo = nil
        self:removePanelEquipItem(body.userEquipId1)
        self:removePanelEquipItem(body.userEquipId2)
        self:showMergeView(equipInfo, newEquipInfo)
        local f1, f2 = ENUM_SUB_EQUIPPANEL.RIGHT, ENUM_SUB_EQUIPPANEL.LEFT
        if self.isMergeWear then
            f1, f2 = ENUM_SUB_EQUIPPANEL.LEFT, ENUM_SUB_EQUIPPANEL.RIGHT
            self:refreshSubEquipPanel(f2, nil, nil, nil)
        end
        self:refreshSubEquipPanel(f1, newUserEquipId, self.curSelctEquipIdx, body.roleId)
    end

    self:refreshEquipList(self.curSelctEquipIdx)
    self:setEquipWearShow(self.curRoleID)
    self:showBtnMerge()
    self:checkHeroRedDotShow()
end

-- 处理背包装备附加属性重置
function HeroView:handleEquipReset(data)
    local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.EQUIP_RESET)
    GameTool:updateGem(-gem)
    self.equipInfoList = UserData.Shared().equipInfoList;
    self.curRoleEquipList = self.equipInfoList[self.curRoleID]
    local equipId = data.userEquipId;
    self:refreshSubEquipPanel(self.curResetDirIdx, equipId, self.curSelctEquipIdx);
    local combat = UserData.Shared().roleInfoList[self.curRoleID].combat
    self.txt_role_combat:setString("战斗力:" .. combat)
    self:updateLineUpCombat()
end

-- 处理背包装备转换
function HeroView:handleEquipConvert(data)
    if self.curConvertEquip then
        -- 转换成功, 清除上次转换的装备
        local roleId = self.curConvertEquip.roleId
        local userEquipId = self.curConvertEquip.userEquipId
        UserData.Shared().equipInfoList[roleId][userEquipId] = nil
    end
    local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.EQUIP_CHANGE)
    GameTool:updateGem(-gem)
    self.equipInfoList = UserData.Shared().equipInfoList;
    self.curRoleEquipList = self.equipInfoList[data.roleId]
    self:refreshEquipList(self.curSelctEquipIdx);
    self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, data.userEquipId, self.curSelctEquipIdx, data.roleId)
    self:showBtnMerge()
    self:checkHeroRedDotShow()
end

-- 处理角色列表返回
function HeroView:handleRoleList(data)
    UserData.Shared():setRoleInfo(data.userRole)
    self.roleInfoList = UserData.Shared().roleInfoList
    self:updateRoleNode()
    self:updateRoleBattle()
    self:updateLineUpCombat()
end

-- 处理角色上下阵返回
function HeroView:handleRoleToLineup(data)
    local noError = data.noError
    local outMsg = data.outMsg
    if noError then
        -- 请求角色列表重新刷新视图
        MsgSendMgr:sendRoleInfoList()
    else
        GameTool:showTxtTip(outMsg)
    end
end

-- 处理阵容位置变化
function HeroView:handleLineUpChange(data)
    local noError = data.noError
    if noError then
        -- 请求角色列表重新刷新视图
        MsgSendMgr:sendRoleInfoList()
    end
end

function HeroView:handleRoleData(data)
    local roleId = data.roleId
    local roleInfoList = self.roleInfoList
    local data = roleInfoList[roleId]
    if data then
        self:refreshCurRoleInfo(roleId)
        self:updateLineUpCombat()
        self:checkHeroRedDotShow()
    end
end

function HeroView:handleRoleValue(data)
    if UserData.Shared().isInGame then
        -- 游戏中不处理
        return
    end
    self:showCombatDetail(data.roleId)
end

function HeroView:handleEquipWear(data)
    local roleId = data.roleId
    local userEquipId = data.userEquipId
    local equipId = data.equipId
    local combat = data.combat
    local result = data.result
    printf("roleId is %d", roleId)
    printf("equipId is %d", equipId)
    printf("userEquipId is %d", userEquipId)
    printf("combat is %d", combat)
    printf("result is %d", result.noError and 1 or 0)
    printf("outMsg is %s", result.outMsg)
    printf("---------- 装备穿戴返回 ----------")
    if result.noError then
        local lastUserEquipId = 0
        local info = self.curEquipList[self.curSelctEquipIdx]
        if info then
            lastUserEquipId = info.userEquipId
        end
        UserData.Shared().roleInfoList[roleId].combat = combat
        UserData.Shared():setEquipWearInfo(roleId, lastUserEquipId, 0)
        UserData.Shared():setEquipWearInfo(roleId, userEquipId, 1)
        self:showEquipSelectImg(userEquipId)
        --MsgSendMgr:sendRoleDataReq(roleId)
        self.txt_role_combat:setString("战斗力:" .. combat)
        self:updateLineUpCombat()
        self:setEquipWearShow(roleId)
        self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.LEFT, userEquipId, self.curSelctEquipIdx)
        self:refreshSubEquipPanel(ENUM_SUB_EQUIPPANEL.RIGHT, nil, nil)
        if self.panelEquipList[userEquipId] then
            local redDot = self.panelEquipList[userEquipId].redDot
            if redDot then
                redDot:hide()
            end
        end
    else
        GameTool:showTxtTip(result.outMsg)
    end
    self:checkHeroRedDotShow()
end

-- 处理装备列表返回
function HeroView:handleEquipList(data)
    local roleEquip = data.roleEquip
    UserData.Shared():setEquipInfo(roleEquip)
    self:updateEquipView()
    self:refreshEquipList(self.curSelctEquipIdx)
    self:setEquipWearShow(self.curRoleID)
    self:showBtnMerge()
    self:checkHeroRedDotShow()
    printf("---------- 处理装备列表返回 ----------")
    printf("装备数：%d", #roleEquip)
    printf("---------- 处理装备列表返回 ----------")
end

-- 角色碎片转换
function HeroView:handleRoleChipEx(data)
    local result = data.result
    local noError = result.noError
    local outMsg = result.outMsg
    local roleId = data.roleId
    local chipNums = data.chipNums
    if noError then
        if self.heroSpDetailView then
            self.heroSpDetailView:removeFromParent()
            self.heroSpDetailView = nil
        end
        GameTool:showGetRewardWin(self, {
            rewardId = roleId,
            rewardNums = chipNums,
            rewardType = Define.ENUM_REWARD_TYPE.CHIPS
        })
        self:refreshPanelCombat(self.curRoleInfo)
        local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.CHIP_CHANGE)
        GameTool:updateGem(-gem)
    else
        GameTool:showTxtTip(outMsg)
    end
    printf("---------- 角色碎片转换返回 ----------")
    printf("noError is %d", noError and 1 or 0)
    printf("outMsg is %s", outMsg)
    printf("roleId is %d", roleId)
    printf("chipNums is %d", chipNums)
    printf("---------- 角色碎片转换返回 ----------")
end

function HeroView:addNotify()
    self.roleLevelUpMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleLevelUp, function(data)
        self:handleRoleLevelUp(data)
    end)
    self.equipMergeMsg = MessageManager.Shared():addMsg(MsgKeyData.onEquipMerge, function(data)
        self:handleEquipMerge(data)
    end)
    self.equipResetMsg = MessageManager.Shared():addMsg(MsgKeyData.onEquipReset, function(data)
        self:handleEquipReset(data)
    end)
    self.equipConvertMsg = MessageManager.Shared():addMsg(MsgKeyData.onEquipConvert, function(data)
        self:handleEquipConvert(data)
    end)
    self.roleInfoListMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleListRet, function(data)
        self:handleRoleList(data)
    end)
    self.roleToLineupMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleToLineup, function(data)
        self:handleRoleToLineup(data)
    end)
    self.lineUpChangeMsg = MessageManager.Shared():addMsg(MsgKeyData.onLineUpChange, function(data)
        self:handleLineUpChange(data)
    end)
    self.roleDataMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleDataReturn, function(data)
        self:handleRoleData(data)
    end)
    self.roleValueMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleInfoRet, function(data)
        self:handleRoleValue(data)
    end)
    self.equipWearMsg = MessageManager.Shared():addMsg(MsgKeyData.onEquipWearRet, function(data)
        self:handleEquipWear(data)
    end)
    self.equipListMsg = MessageManager.Shared():addMsg(MsgKeyData.onEquipListRet, function(data)
        self:handleEquipList(data)
    end)
    self.roleChipExMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleChipChange, function(data)
        self:handleRoleChipEx(data)
    end)
    self.heroRedCheckMsg = MessageManager.Shared():addMsg(MsgKeyData.onHeroRedDotCheck, function(data)
        self:checkHeroRedDotShow(data)
    end)
    self.newEquipDotCheck = MessageManager.Shared():addMsg(MsgKeyData.onNewEquipDotCheck, function(data)
        self:checkNewEquipRedDotShow()
    end)
    self.combatPushMsg = MessageManager.Shared():addMsg(MsgKeyData.onHeroCombatPush, function(data)
        self:handleCombatPush(data)
    end)
end

function HeroView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleLevelUp, self.roleLevelUpMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEquipMerge, self.equipMergeMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEquipReset, self.equipResetMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEquipConvert, self.equipConvertMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleListRet, self.roleInfoListMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleToLineup, self.roleToLineupMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.lineUpChangeMsg, self.lineUpChangeMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleDataReturn, self.roleDataMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleInfoRet, self.roleValueMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEquipWearRet, self.equipWearMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEquipListRet, self.equipListMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onHeroRedDotCheck, self.heroRedCheckMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onNewEquipDotCheck, self.newEquipDotCheck)
    MessageManager.Shared():removeMsg(MsgKeyData.onHeroCombatPush, self.combatPushMsg)
end

function HeroView:onExit()
    self:removeNotify()
end

return HeroView
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/10 9:58
---

-- 离线收益界面
local OfflineView = class("OfflineView", ViewBase)

function OfflineView:ctor()
    self:enableNodeEvents()
    self:initData()
end

function OfflineView:onEnter()
    self:initView()
    self:addNotify()
    self:startMainSchedule()
end

function OfflineView:initData()

end

function OfflineView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.homeView.offline,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self.panel_main = panel_main
    local img_count_down = panel_main:getChildByName("img_count_down")
    local btn_close = panel_main:getChildByName("btn_close")
    local btn_coins_1 = panel_main:getChildByName("btn_coins_1")        -- 钻石领取
    local btn_coins_2 = panel_main:getChildByName("btn_coins_2")        -- 免费领取
    self:refreshView()
    local function btnCall(btn)
        if btn == btn_coins_1 then
            self:sendGetReward()
        elseif btn == btn_coins_2 then
            if UserData.Shared().offlineGold and UserData.Shared().offlineGold > 0 then
                self:sendGetReward()
            else
                GameTool:showTxtTip("没有奖励领取")
            end
        elseif btn == btn_close then
            self:destroyAni(panel_main, function ()
                self:removeFromParent()
            end)
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_coins_1, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_coins_2, btnCall)
end

function OfflineView:refreshView()
    local panel_main = self.panel_main
    local btn_coins_1 = panel_main:getChildByName("btn_coins_1")        -- 钻石领取
    local btn_coins_2 = panel_main:getChildByName("btn_coins_2")        -- 免费领取
    local img_count_down = panel_main:getChildByName("img_count_down")
    local icon_money1 = btn_coins_1:getChildByName("icon_money")
    local txt_money_num1 = btn_coins_1:getChildByName("Text_money_num")
    local txt_coin_1 = icon_money1:getChildByName("Text_money_num")
    local txt_time = img_count_down:getChildByName("Text_time")
    local icon_money2 = btn_coins_2:getChildByName("icon_money")
    local txt_money_num2 = btn_coins_2:getChildByName("Text_money_num")
    local txt_coin_2 = icon_money2:getChildByName("Text_money_num")
    self.txt_time = txt_time
    local num = UserData.Shared().offlineGold
    if UserData.Shared():isCardUser() then
        num = num / 2
        txt_coin_2:setString(num .. " (x2)")
    else
        txt_coin_2:setString(num)
    end
    local maxCoin = UserData.Shared().maxCoin
    local timeCountdown = UserData.Shared().countDown
    self.timeCountDown = timeCountdown
    maxCoin = GameTool:thousandFormat(maxCoin)
    txt_coin_1:setString(maxCoin)

    txt_money_num1:setString(string.format("(          +%s)", num))
    txt_money_num2:setString(string.format("(          +%s)", maxCoin))
    txt_time:setString(timeStr2(timeCountdown))
end

function OfflineView:startMainSchedule()
    local function update(dt)
        if self.timeCountDown > 0 then
            self.timeCountDown = self.timeCountDown - dt
            if self.timeCountDown <= 0 then
                self:stopMainSchedule()
            end
            self.txt_time:setString(timeStr2(self.timeCountDown))
        end
    end
    if not self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.mainScheduler = scheduler:scheduleScriptFunc(update, 1, false)
    end
end

function OfflineView:stopMainSchedule()
    if self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.mainScheduler)
        self.mainScheduler = nil
    end
end
function OfflineView:sendGetReward()
    MsgSendMgr:sendHangupReward()
end

function OfflineView:handleGetReward(data)
    local coin = data.coin
    local newData = {
        rewardType = Define.ENUM_REWARD_TYPE.COINS,
        rewardId = 503,
        rewardNums = coin,
    }
    local rewardView = require("JunTuan.src.views.GetRewardView").new(newData)
    rewardView:setAnchorPoint(0.5, 0.5)
    rewardView:setPosition(display.center)
    self:getParent():addChild(rewardView, 999)
    self:removeFromParent()
    MsgSendMgr:sendReqHungGold()
end

function OfflineView:handleHungInfo(data)
    local result = data.result
    local coin = data.coin
    local cardId = data.cardId
    local maxCoin = data.maxCoin
    local countDown = data.countDown
    if not result.noError then
        coin = 0
    end
    UserData.Shared().offlineGold = coin
    UserData.Shared().cardId = cardId
    UserData.Shared().maxCoin = maxCoin
    UserData.Shared().countDown = countDown
    self:refreshView()
end

function OfflineView:addNotify()
    self.onHungRewardInfo = MessageManager.Shared():addMsg(MsgKeyData.onHungRewardInfo, function(data)
        self:handleHungInfo(data)
    end)
    self.getRewardMsg = MessageManager.Shared():addMsg(MsgKeyData.onHungRewardGet, function (data)
        self:handleGetReward(data)
    end)
end

function OfflineView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onHungRewardGet, self.getRewardMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onHungRewardInfo, self.onHungRewardInfo)
end

function OfflineView:onExit()
    self:removeNotify()
    self:stopMainSchedule()
end

return OfflineView
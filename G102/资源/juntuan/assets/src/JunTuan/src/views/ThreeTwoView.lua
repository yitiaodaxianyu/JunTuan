---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/12 16:06
---

-- 三选二界面
local ThreeTwoView = class("ThreeTwoView", ViewBase)
local num_refresh = 999       -- 可刷新技能次数
function ThreeTwoView:ctor(para)
    self.parent = para.parent
    self:enableNodeEvents()
    self:initData()
end

function ThreeTwoView:onEnter()
    self:initView()
    self:initTouchEvent()
    self:addNotify()
    self:checkIsHaveSlot()
    AudioManager:playSoundEffect("openskill")

    if self.isGuide and self.isGuide == 0 then
        self:guideSelectSkill()
    end
end

function ThreeTwoView:initData()
    self.selectData = self.parent.selectData
    self.skillData = self.parent.skillData
    self.skillValue = self.parent.skillValue
    self.selectNodeList = {}
    --self.selectSkillList = {}           -- 已选技能列表
    self.roleSkillNodeList = {}
    self.selectSkillNode = nil

    self.toRoleIdx = 0      -- 选技能给哪个角色
    self.selectIdx = 0      -- 选了哪个技能
    self.curSelectNum = 0   -- 选了几个技能了
    self.curLockIdx = 3     -- 当前要解锁的槽位

    self.nodeSkillTip = cc.Node:create()
    self.nodeSkillTip:setAnchorPoint(0.5, 0)
    self:addChild(self.nodeSkillTip, 9999)
    self:getCurUnLockSlot()

    if self.parent.sceneInfo.sceneID == 3 then
        -- isGuide 0 表示需要指引 1已经指引完毕
        self.isGuide = GameDB.GetNumForKey("isGuide", 0)
    end
end

function ThreeTwoView:initTouchEvent()
    local function touchBegin(touch, event)
        local pos = touch:getLocation()
        self:handleTouchBegin(pos)
        return true
    end

    local function touchMove(touch, event)
        local pos = touch:getLocation()
        self:handleTouchMove(pos)
    end

    local function touchEnd(touch, event)
        local pos = touch:getLocation()
        self:handleTouchEnd(pos)
    end
    self.touchLayer = ExternalTools:addTouchLayer(self.csbNode, 999, touchBegin, touchMove, touchEnd)
end

function ThreeTwoView:getSelectSkillNode(pos)
    for _, v in pairs(self.selectNodeList) do
        if not v.isBeSel then
            if cc.rectContainsPoint(v.box, pos) then
                self.selectIdx = v.skillId
                return v
            end
        end
    end
end

-- 提示线条
function ThreeTwoView:createTipLine(pos)
    local p1 = self.selectSkillNode.pos
    local p2 = pos
    local angle = ExternalTools:getAngleByTowPoint(p2, p1)
    local r = 90 - math.deg(angle)
    local len = cc.pGetDistance(p1, p2)
    self.nodeSkillTip:removeAllChildren()
    local node = self.nodeSkillTip
    local img_arrow = ccui.ImageView:create()
    img_arrow:loadTexture("jiantou.png", 1)
    local num = math.floor(len / 40)
    local y = 0
    for i = 1, num do
        local dis = i == 1 and 5 or 0
        y = y + dis + 30
        local img_line = ccui.ImageView:create()
        img_line:loadTexture("jiantou2.png", 1)
        img_line.pos = cc.p(0, y)
        img_line:setPosition(img_line.pos)
        node:addChild(img_line)
    end
    img_arrow.pos = cc.p(0, y + 45)
    img_arrow:setPosition(img_arrow.pos)
    node:setRotation(r)
    node:addChild(img_arrow)
    self.nodeSkillTip:setPosition(p1)
end

-- 判断是否有空闲的技能槽
function ThreeTwoView:isCanAddSkill(roleId)
    local skillList = {}
    for _, v in pairs(self.skillData) do
        if v.roleId == roleId then
            skillList = v.skillList
            break
        end
    end
    for _, v in pairs(skillList) do
        if v == 0 then
            return true
        end
    end
    return false
end

function ThreeTwoView:getSkillDataById(roleId)
    for _, v in pairs(self.skillData) do
        if v.roleId == roleId then
            return v
        end
    end
end

-- 解锁技能槽提示弹框
function ThreeTwoView:showUnLockTip()
    local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_UNLOCK)
    local function okCall()
        if UserData.Shared():get_lDiamond() >= gem then
            self:sendLockSkillSlot()
        else
            GameTool:showTxtTip("钻石不足")
            GameTool:showBuyGemView(self)
        end
    end
    local tip = string.format("是否消耗%d钻石解锁第%d技能槽?", gem, self.curLockIdx)
    confirm(tip, okCall)
end

-- 获取当前解锁到了第几行技能槽
function ThreeTwoView:getCurUnLockSlot()
    for _, v in pairs(self.skillData) do
        local skillList = v.skillList
        for i, num in pairs(skillList) do
            if num == -1 then
                self.curLockIdx = i
                self.parent.curLockIdx = i
                return
            end
        end
    end
end

function ThreeTwoView:handleTouchBegin(pos)
    if not self.selectSkillNode then
        self.selectSkillNode = self:getSelectSkillNode(pos)
    end
end

function ThreeTwoView:handleTouchMove(pos)
    if self.selectSkillNode then
        self:createTipLine(pos)
        for _, v in pairs(self.roleSkillNodeList) do
            if cc.rectContainsPoint(v.box, pos) then
                v:setColor(cc.RED)
            else
                v:setColor(cc.WHITE)
            end
        end
    end
end

function ThreeTwoView:handleTouchEnd(pos)
    if self.selectSkillNode then
        for _, v in pairs(self.roleSkillNodeList) do
            v:setColor(cc.WHITE)
            if self.selectSkillNode then
                if cc.rectContainsPoint(v.box, pos) then
                    local roleId = v.roleId
                    if self:isCanAddSkill(roleId) then
                        self.toRoleIdx = roleId
                        self:sendSelectSkill()
                        self.nodeSkillTip:removeAllChildren()
                        return
                    else
                        if self.curLockIdx == 5 then
                            GameTool:showTxtTip("技能槽已满!")
                        else
                            self:showUnLockTip()
                        end
                    end
                end
            end
        end
        self.selectSkillNode = nil
        self.nodeSkillTip:removeAllChildren()
    end
end

function ThreeTwoView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.GameView.three_two,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self.csbNode = ui
    self:addChild(ui)

    local panel_skill = ui:getChildByName("Panel_skill")
    self.panel_skill = panel_skill
    self.panel_mask = ui:getChildByName("Panel_mask"):hide()
    local panel_tip = panel_skill:getChildByName("Panel_tip")
    self.txt_tip = panel_tip:getChildByName("Text_tip")
    self:refreshSelectSkill()
    self:refreshRoleSkill()
    local btn_refresh = panel_skill:getChildByName("btn_refresh")
    btn_refresh.num = 0
    btn_refresh.size = btn_refresh:getContentSize()
    self.btn_refresh = btn_refresh
    self:refreshBtn()
    ExternalTools:addBtnTouchEventListener(btn_refresh, function ()
        if self.isGuide and self.isGuide == 0 then
            return
        end
        local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_RESET)
        if UserData.Shared():get_lDiamond() < gem then
            GameTool:showTxtTip("钻石不足")
            GameTool:showBuyGemView(self)
            return
        end
        self:sendChangeSkill()
        btn_refresh.num = btn_refresh.num + 1
        if btn_refresh.num == num_refresh then
            btn_refresh:hide()
        end
    end)

    local btn_close = ui:getChildByName("btn_close")
    self.btn_close = btn_close
    ExternalTools:addBtnTouchEventListener(btn_close, function ()
        if self.isGuide and self.isGuide == 0 then
            return
        end
        self.parent:nextLevel()
        self.parent.threeTwoView = nil
        self:removeFromParent()
    end)
end

-- 指引刷新技能
function ThreeTwoView:guideRefreshSkill()
    if self.guideView then
        return
    end
    local p = cc.p(self.btn_refresh:getPosition())
    p.y = p.y - 25
    local box = self.btn_refresh:getBoundingBox()
    box.x = box.x - 25
    box.y = box.y - 15
    box.width = box.width + 50
    box.height = box.height + 30
    local function call()
        self:sendChangeSkill()
        self.btn_refresh:setEnabled(false)
        self.guideView:removeFromParent()
        self.guideView = nil
        self:guideSelectSkill()
    end
    local function handActCall(img_hand)
        img_hand:setScale(1)
        local scaleTo1 = cc.ScaleTo:create(0.5, 1.2)
        local scaleTo2 = cc.ScaleTo:create(0.5, 1)
        local seq = cc.Sequence:create(scaleTo1, scaleTo2)
        local act = cc.RepeatForever:create(seq)
        img_hand:runAction(act)
    end
    local para = {
        box = box,
        pos = p,
        guideTip = "点击此处可以刷新技能",
        handActCall = handActCall,
        touchEnd = call,
    }
    self.guideView = GameTool:showGuideView(self, para)
end

-- 指引解锁技能槽
function ThreeTwoView:guideUnLockSlot()
    if self.guideView then
        return
    end

    if self.curLockIdx > 4 then
        self:guideRefreshSkill()
        return
    end

    local img = self.guide_panel:getChildByName("img_bg_" .. self.curLockIdx)
    if not img then
        return
    end
    img:setEnabled(false)
    local p = cc.p(img:getPosition())
    p = self.guide_panel:convertToWorldSpace(p)
    p.y = p.y - 25
    local box = img:getBoundingBox()
    local p_box = cc.p(box.x, box.y)
    p_box = self.guide_panel:convertToWorldSpace(p_box)
    box.x = p_box.x - 25
    box.y = p_box.y - 15
    box.width = box.width + 50
    box.height = box.height + 30
    local function call()
        self:sendLockSkillSlot()
        self.guideView:removeFromParent()
        self.guideView = nil
    end
    local function handActCall(img_hand)
        img_hand:setScale(1)
        local scaleTo1 = cc.ScaleTo:create(0.5, 1.2)
        local scaleTo2 = cc.ScaleTo:create(0.5, 1)
        local seq = cc.Sequence:create(scaleTo1, scaleTo2)
        local act = cc.RepeatForever:create(seq)
        img_hand:runAction(act)
    end
    local para = {
        box = box,
        pos = p,
        guideTip = "点击此处可以解锁技能槽, 周卡、月卡用户免费解锁所有技能槽!",
        handActCall = handActCall,
        touchEnd = call,
    }
    self.guideView = GameTool:showGuideView(self, para)
end

function ThreeTwoView:getBestSkill()
    local icon = { 2, 1, 3, 8, 4, 5, 6, 7, 14, 15, 16, 17 }
    local sort = {}
    local best = 99
    for i, v in pairs(self.selectData) do
        printf("技能%d, icon is %d", i, v.Icon)
        if not self.selectNodeList[i].isBeSel then
            for idx, iconIdx in pairs(icon) do
                if v.Icon == iconIdx then
                    if idx < best then
                        best = idx
                    end
                    sort[idx] = i
                end
            end
        end
    end
    printf("最好的技能是%d", best)
    return sort[best]
end

-- 指引选择技能
function ThreeTwoView:guideSelectSkill()
    local idx = self:getBestSkill()
    --for i, v in pairs(self.selectNodeList) do
    --    if i ~= idx then
    --        v.isBeSel = true
    --    end
    --end
    local item = self.selectNodeList[idx]
    item.isBeSel = false
    self.guidePos = item.pos
    self.parent:showSelectSkillGuide(self.img_guide_hand, self.guidePos)
end

function ThreeTwoView:refreshBtn()
    local btn_refresh = self.btn_refresh
    local s = btn_refresh.size
    local icon_video = btn_refresh:getChildByName("icon_video")
    local txt_cost = icon_video:getChildByName("Text_num")
    local txt_refresh = btn_refresh:getChildByName("Text_refresh")
    local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_RESET)
    txt_cost:setString("x" .. gem)
    local flag = (UserData.Shared():isCardUser() or UserData.Shared().isFreeCard)
    if flag and btn_refresh.num == 0 then
        self.isFreeRefresh = true
        icon_video:hide()
        txt_refresh:setString("免费刷新")
        txt_refresh:setPosition(cc.p(s.width / 2, s.height / 2))
    else
        self.isFreeRefresh = false
        icon_video:show()
        txt_refresh:setString("刷新技能")
        txt_refresh:setPosition(cc.p(s.width * 0.638, s.height / 2))
    end
end

function ThreeTwoView:checkIsHaveSlot()
    local isHaveSlot = false
    for i = 1, 6 do
        if self:isCanAddSkill(i) then
            isHaveSlot = true
            break
        end
    end
    if not isHaveSlot then
        self.btn_close:show()
    end
end

function ThreeTwoView:refreshSelect(item, data)
    local skillId = data.Icon
    local img_skill = item:getChildByName("img_skill")
    GameTool:setThreeTwoImg(skillId, img_skill)
    local cfg = GameTool:getThreeTwoDes(skillId)
    local txt_num = item:getChildByName("Text_num")
    local str
    if skillId > 3 then
        str = string.format("%s+%d%%", cfg.Name, data.buffValue / 100)
    else
        str = string.format("%s", cfg.Name)
    end
    txt_num:setString(str)
end

-- 刷新可选技能面板
function ThreeTwoView:refreshSelectSkill()
    local panel = self.panel_skill
    for i = 1, 3 do
        local item = panel:getChildByName("panel_skill_" .. i)
        local data = self.selectData[i]
        self.selectNodeList[i] = item
        item.pos = cc.p(item:getPosition())
        item.box = item:getBoundingBox()
        item.skillId = data.buffId
        item.isBeSel = false
        item:setColor(cc.c3b(255, 255, 255))
        self:refreshSelect(item, data)

        if i == 1 then
            self.guidePos = item.pos
        --else
        --    if self.isGuide and self.isGuide == 0 then
        --        item.isBeSel = true
        --    end
        end
    end
end

function ThreeTwoView:refreshSkill(panel, data)
    panel:getChildByName("img_guide_hand"):hide()
    local img_head = panel:getChildByName("img_gunner_hero")
    GameTool:setRoleHeadImg(data.roleId, img_head)
    local function initSkill(item, i)
        local icon_skill = item:getChildByName("icon_video")
        local skillId = data.skillList[i]
        if skillId then
            if skillId == -1 then
                icon_skill:show()
                icon_skill:loadTexture("icon_lock_home_jtdzz.png", 1)
                icon_skill:ignoreContentAdaptWithSize(true)
                icon_skill:setScale(0.6)
            elseif skillId == 0 then
                icon_skill:hide()
            elseif skillId ~= 0 then
                icon_skill:show()
                icon_skill:setScale(1)
                GameTool:setThreeTwoImg(skillId, icon_skill)
                icon_skill:ignoreContentAdaptWithSize(false)
                icon_skill:setContentSize(cc.size(56, 55))
            end
        end
        if i >= 3 then
            item:setEnabled(true)
            item:setTouchEnabled(true)
            ExternalTools:addBtnTouchEventListener(item, function ()
                if self.isGuide and self.isGuide == 0 then
                    return
                end
                if self.curLockIdx <= 4 then
                    if i >= self.curLockIdx then
                        self:showUnLockTip()
                    end
                end
            end, true)
        end
    end
    for i = 1, 4 do
        local item = panel:getChildByName("img_bg_" .. i)
        initSkill(item, i)
    end
end

-- 刷新角色技能面板
function ThreeTwoView:refreshRoleSkill()
    local panel = self.panel_skill
    for i = 1, 5 do
        local data = self.skillData[i]
        local panel_guide = panel:getChildByName("Panel_guide_" .. i):hide()
        panel_guide:setLocalZOrder(6 - i)
        if data then
            panel_guide:show()
            local roleId = data.roleId
            self:refreshSkill(panel_guide, data)
            panel_guide.box = panel_guide:getBoundingBox()
            panel_guide.roleId = roleId
            self.roleSkillNodeList[roleId] = panel_guide
            if not self.img_guide_hand then
                self.img_guide_hand = panel_guide:getChildByName("img_guide_hand")
                self.img_guide_hand.toPos = cc.p(self.img_guide_hand:getPosition())
                self.guide_panel = panel_guide
            end
        end
    end
end

-- 刷新技能槽数据
function ThreeTwoView:updateLockSlotData(idx)
    for _, v in pairs(self.skillData) do
        local skillList = v.skillList
        if skillList[idx] then
            skillList[idx] = 0
        end
    end
    self:refreshRoleSkill()
end

-- 根据id获取三选二技能数据
function ThreeTwoView:getBuffDataByID(buffId)
    for _, v in pairs(self.selectData) do
        if v.buffId == buffId then
            return v
        end
    end
end

function ThreeTwoView:updateSkillList(roleId, buffId)
    local buff = self:getBuffDataByID(buffId)
    for _, v in pairs(self.skillData) do
        if v.roleId == roleId then
            for i, num in pairs(v.skillList) do
                if num == 0 then
                    v.skillList[i] = buff.Icon
                    self.skillValue[roleId][i] = buff
                    return v, buff
                end
            end
        end
    end
end

-- 发送解锁技能槽
function ThreeTwoView:sendLockSkillSlot()
    MsgSendMgr:sendUnLockSlot()
end

-- 处理解锁技能槽
function ThreeTwoView:handleLockSkillSlot(data)
    local result = data.result
    local cellNums = data.cellNums      -- 第几技能槽位
    local ret = result.noError
    local outMsg = result.outMsg
    if ret then
        self.curLockIdx = cellNums + 1
        self:updateLockSlotData(cellNums)
        if self.isGuide and self.isGuide == 0 then
            if self.curLockIdx <= 4 then
                self:guideUnLockSlot()
            else
                self:guideRefreshSkill()
            end
        else
            local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_UNLOCK)
            GameTool:updateGem(-gem)
        end
    else
        GameTool:showTxtTip(outMsg)
    end
    printf("---------- 处理解锁技能槽 ----------")
    printf("ret is %d", ret and 1 or 0)
    printf("cellNums is %d", cellNums)
    printf("outMsg is %s", outMsg)
    printf("---------- 处理解锁技能槽 ----------")
end

-- 发送更换技能请求
function ThreeTwoView:sendChangeSkill()
    MsgSendMgr:sendUpdateThreeTow()
end

-- 处理更换技能请求
function ThreeTwoView:handleChangeSkill(data)
    local result = data.result
    if result.noError then
        for i, v in ipairs(data.ability) do
            self.selectData[i] = {
                buffId = v.buffId,
                Icon = v.Icon,
                buffValue = v.buffValue,
                SpecialSkillType = v.SpecialSkillType,
                SpecialSkillValue = v.SpecialSkillValue,
            }
        end
        self:refreshSelectSkill()
        if not self.isFreeRefresh then
            local gem = UserData.Shared():getGemCost(Define.ENUM_GEM_COST.SKILL_RESET)
            GameTool:updateGem(-gem)
        end
        self:refreshBtn()
    else
        GameTool:showTxtTip(result.outMsg)
    end
end

function ThreeTwoView:isSpecialSkill(id)
    return (id == 1) or (id == 2) or (id == 3)
end

-- 技能限制
function ThreeTwoView:checkSkillLimit()
    if self:isSpecialSkill(self.selectIdx) then
        local info = self:getSkillDataById(self.toRoleIdx)
        local skillList = info.skillList
        for _, v in pairs(skillList) do
            if v == self.selectIdx then
                -- 未通过检测，特殊技能不能重复
                return false
            end
        end
    end
    -- 通过检测，可以选择技能
    return true
end

-- 发送选择技能请求
function ThreeTwoView:sendSelectSkill()
    AudioManager:playSoundEffect("putdown")
    if self:checkSkillLimit() then
        MsgSendMgr:sendThreeTwoGet(self.toRoleIdx, self.selectIdx)
    else
        GameTool:showTxtTip("此类型技能不能重复")
    end
end

-- 处理选择技能请求
function ThreeTwoView:handleSelectSkill(data)
    local ret = data.result
    local roleId = data.roleId
    local buffId = data.buffId
    if self.selectSkillNode then
        self.selectSkillNode.isBeSel = true
        self.selectSkillNode:setColor(cc.c3b(125, 125, 125))
        self.selectSkillNode = nil
    end
    if ret.noError then
        --self.selectSkillList[buffId] = buffId
        --for _, v in pairs(self.selectNodeList) do
        --    if not self.selectSkillList[v.skillId] then
        --        v.isBeSel = false
        --    end
        --end
        local newData, buff = self:updateSkillList(roleId, buffId)
        local panel = self.roleSkillNodeList[roleId]
        self:refreshSkill(panel, newData)
        self.curSelectNum = self.curSelectNum + 1
        if self.curSelectNum == 2 then
            self.panel_mask:show()
            self.touchLayer:setLocalZOrder(-1)
            performWithDelay(self, function ()
                self.parent:nextLevel()
                self.parent.threeTwoView = nil
                self:removeFromParent()
            end, 1)
        else
            if self.isGuide and self.isGuide == 0 then
                self.img_guide_hand:hide()
                self.img_guide_hand:stopAllActions()
                self:guideUnLockSlot()
            end
        end
        self.parent:refreshRoleSkill()
        self.txt_tip:setString(string.format("拖动技能到英雄身上(%d/2)", self.curSelectNum))
        MessageManager.Shared():postMsg(MsgKeyData.onRoleUpdate, {
            roleId = roleId,
            buff = buff
        })
    else
        GameTool:showTxtTip(ret.outMsg)
    end
    printf("---------- 处理选择技能请求 ----------")
    printf("ret is %d", ret.noError and 1 or 0)
    printf("roleId is %d", roleId)
    printf("buffId is %d", buffId)
    printf("---------- 处理选择技能请求 ----------")
end

function ThreeTwoView:addNotify()
    self.selectSkillMsg = MessageManager.Shared():addMsg(MsgKeyData.onThreeTowGet, function (data)
        self:handleSelectSkill(data)
    end)
    self.updateSkillMsg = MessageManager.Shared():addMsg(MsgKeyData.onUpdateThreeTwo, function (data)
        self:handleChangeSkill(data)
    end)
    self.threeTwoSlotMsg = MessageManager.Shared():addMsg(MsgKeyData.onThreeTowSlot, function (data)
        self:handleLockSkillSlot(data)
    end)
end

function ThreeTwoView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onThreeTowGet, self.selectSkillMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onUpdateThreeTwo, self.updateSkillMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onThreeTowSlot, self.threeTwoSlotMsg)
end

function ThreeTwoView:onExit()
    if self.isGuide and self.isGuide == 0 then
        GameDB.SetValueForKey("isGuide", 1)
    end
    self:removeNotify()
    self.parent.threeTwoView = nil
end

return ThreeTwoView
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/7 15:56
---

local MainView = class("MainView", ViewBase)

function MainView:ctor()
    self:enableNodeEvents()
    self:initData()
end

function MainView:onEnter()
    self:initView()
    self:addNotify()
    AudioManager:playHomeMusic()
end

function MainView:initData()
    self.userInfo = {
        dwUserID = 1,
        szNickName = "",
        lGoldBean = 1,
        lDiamond = 1,
        lCurEnergy = 1,
        lMaxEnergy = 1,
        combat = 0,
    }
    self.userSceneInfo = {
        sceneId = 1,
        checkpoint = 1,
    }
    self.curEnergyTime = 0          -- 当前体力倒计时（用于计算体力恢复）
    self.lEnergyTime = 0            -- 每隔多久恢复一点体力(单位秒)
    self.curOfflineTime = 0         -- 当前离线收益倒计时
    self.lOfflineTime = 10          -- 每隔多久刷新一次离线收益(单位秒)
end

function MainView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.mainView.main,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self.csbNode = ui
    self:addChild(ui)

    local img_bg = ui:getChildByName("img_bg")
    img_bg:loadTexture("res/JunTuan/img/bg_home_jtdzz.jpg", ccui.TextureResType.localType)

    local panel_root = ui:getChildByName("Panel_root")
    local panel_top = panel_root:getChildByName("Panel_top")
    local panel_top_btn = panel_root:getChildByName("Panel_top_btn")
    local panel_content = panel_root:getChildByName("Panel_content")
    local panel_navigation = panel_root:getChildByName("Panel_navigation2")
    local panel_player_1 = panel_top:getChildByName("Panel_player")             -- user显示面板
    local panel_player_2 = panel_top_btn:getChildByName("Panel_player")         -- user操作面板
    self.panel_role = panel_root:getChildByName("Panel_role")
    self.maskLayout = ui:getChildByName("Panel_mask")
    self.panel_content = panel_content
    self.panel_player = panel_player_2
    self.panel_player_show = panel_player_1
    self:initPanelTop(panel_top, panel_top_btn)
    self:initPanelBottom(panel_navigation)
    self:initPanelPlayer()
    self:showLoading()
end

function MainView:initPanelTop(panel, panel_top_btn)
    local panel_energy = panel:getChildByName("Panel_energy")
    local panel_money = panel:getChildByName("Panel_money")
    local panel_soul = panel:getChildByName("Panel_soul")
    local panel_combat = panel:getChildByName("Panel_combat")
    local btn_energy = panel_top_btn:getChildByName("Panel_energy")
    local btn_money = panel_top_btn:getChildByName("Panel_money")
    local btn_soul = panel_top_btn:getChildByName("Panel_soul")

    local function btnCall(btn)
        if btn == btn_soul then
            self:showBuyGemView()
        elseif btn == btn_money then
            --self.lastClick = self.bottomBtnList[1]
            --self:showView(self.shopView)
            self:showBuyGoldView()
        elseif btn == btn_energy then
            --self.lastClick = self.bottomBtnList[1]
            --self:showView(self.shopView)
            self:showBuyEnergyView()
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_soul, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_money, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_energy, btnCall)

    self.txt_energy = panel_energy:getChildByName("Text_num")
    self.txt_time_energy = panel_energy:getChildByName("Text_time"):hide()
    self.txt_gold = panel_money:getChildByName("Text_num")
    self.txt_diamond = panel_soul:getChildByName("Text_num")
    self.txt_combat = panel_combat:getChildByName("Text_num")
    self.txt_energy:setString(string.format("1/20"))
    self.txt_gold:setString(0)
    self.txt_diamond:setString(0)
    self.txt_combat:setString(0)
    ExternalTools:txtAutoWidth(self.txt_energy, 70)
    ExternalTools:txtAutoWidth(self.txt_gold, 70)
    ExternalTools:txtAutoWidth(self.txt_diamond, 70)
    ExternalTools:txtAutoWidth(self.txt_combat, 70)
end

function MainView:initPanelContent()
    if not self.isInitPanelContent then
        self.isInitPanelContent = true
        local panel = self.panel_content
        panel.size = panel:getContentSize()
        local shopView = require("JunTuan.src.views.ShopView").new()
        local heroView = require("JunTuan.src.views.HeroView").new()
        local homeView = require("JunTuan.src.views.HomeView").new(self.userSceneInfo, self)
        self:addContentView(shopView, panel)
        self:addContentView(heroView, panel)
        self:addContentView(homeView, panel)
        self.shopView = shopView
        self.heroView = heroView
        self.homeView = homeView
        self.viewList = { shopView, heroView, homeView }
        for i, v in pairs(self.viewList) do
            local icon = self.bottomIconList[i]
            local btn = self.bottomBtnList[i]
            self:initViewData(v, icon, btn)
        end
        self:showView(self.homeView)
    else
        self.homeView:initData(self.userSceneInfo)
    end
end

function MainView:initBottomBtn(btn)
    local img_select = btn:getChildByName("img_select")--:hide()
    btn.img_select = img_select
end

function MainView:initViewData(view, icon, btn)
    view.icon = icon
    view.btn = btn
end

function MainView:initPanelBottom(panel)
    local btn_shop = panel:getChildByName("Panel_store")            -- 商城
    local btn_hero = panel:getChildByName("Panel_hero")             -- 英雄
    local btn_fight = panel:getChildByName("Panel_fight")           -- 战斗
    local btn_dungeon = panel:getChildByName("Panel_dungeon")       -- 副本
    local icon_store = btn_shop:getChildByName("icon_store")
    local icon_hero = btn_hero:getChildByName("icon_hero")
    local icon_fight = btn_fight:getChildByName("icon_fight")
    local icon_dungeon = btn_dungeon:getChildByName("icon_dungeon")
    self.bottomBtnList = { btn_shop, btn_hero, btn_fight, btn_dungeon }
    self.bottomSelectList = {}
    self.heroRedDot = icon_hero:getChildByName("icon_red"):hide()
    for i, v in pairs(self.bottomBtnList) do
        self:initBottomBtn(v)
        self.bottomSelectList[i] = v.img_select
    end
    self.bottomIconList = { icon_store, icon_hero, icon_fight, icon_dungeon }
    self.lastClick = nil
    local function btnCall(btn)
        if btn ~= self.lastClick then
            if btn == btn_shop then
                self:showView(self.shopView);
                MsgSendMgr:sendBoxListReq();
            elseif btn == btn_hero then
                local data = self.heroView.curRoleInfo
                self.heroView:refreshPanelCombat(data)
                self:showView(self.heroView)
            elseif btn == btn_fight then
                self:showView(self.homeView)
                self:updateRoleAni()
            elseif btn == btn_dungeon then
                GameTool:showTxtTip("敬请期待！")
            end
            self.lastClick = btn
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_shop, btnCall, true)
    ExternalTools:addBtnTouchEventListener(btn_hero, btnCall, true)
    ExternalTools:addBtnTouchEventListener(btn_fight, btnCall, true)
    ExternalTools:addBtnTouchEventListener(btn_dungeon, btnCall, true)
end

function MainView:initPanelPlayer()
    local panel = self.panel_player
    local panel_show = self.panel_player_show
    local panel_nickname = panel:getChildByName("Panel_nickname")
    local panel_nickname_show = panel_show:getChildByName("Panel_nickname")
    local panel_avatar = panel:getChildByName("Panel_avatar")
    local panel_avatar_show = panel_show:getChildByName("Panel_avatar")
    self.txt_nick = panel_nickname_show:getChildByName("Text_nickname"):show()
    self.img_avatar = panel_avatar_show:getChildByName("img_avatar"):show()
    if UserData.Shared().szNickName then
        self.txt_nick:setString(UserData.Shared().szNickName)
    end
    if UserData.Shared().dwIconid then
        GameTool:setUserIconImg(UserData.Shared().dwIconid, self.img_avatar)
    end
    local function btnCall(btn)
        if btn == panel_nickname then
            self:showNickView()
        elseif btn == panel_avatar then
            self:showAvatarView()
        end
    end
    ExternalTools:addBtnTouchEventListener(panel_avatar, btnCall)
    ExternalTools:addBtnTouchEventListener(panel_nickname, btnCall)
end

-- 修改昵称界面
function MainView:showNickView()
    if self.nickView then
        return
    end
    local para = {
        csb = JunTuanCfg.csbCfg.mainView.modify_nick,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self:addChild(ui)
    self.nickView = ui

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)

    local panel_nickname = panel_main:getChildByName("Panel_nickname")
    local txt_input = panel_nickname:getChildByName("Text_input")
    self.input_nick = ClippingNodeUtils:resetEditBox(panel_nickname, txt_input)
    --self.input_nick:setText("")
    --self.input_nick:setPlaceHolder("请输入新的昵称")
    self.input_nick:setMaxLength(8)
    self.input_nick:setLocalZOrder(1)

    local btn_ok = panel_main:getChildByName("btn_ok")
    local btn_close = panel_main:getChildByName("btn_close")

    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent(true)
                self.nickView = nil
            end)
        elseif btn == btn_ok then
            local newNick = self.input_nick:getText()
            if newNick == "" then
                GameTool:showTxtTip("昵称不能为空")
            else
                UserData.Shared().lastNick = UserData.Shared().szNickName
                UserData.Shared().szNickName = newNick
                MsgSendMgr:sendModifyUserInfo(newNick)
            end
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_ok, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
end

-- 修改头像界面
function MainView:showAvatarView()
    if self.avatarView then
        return
    end
    local para = {
        csb = JunTuanCfg.csbCfg.mainView.modify_head,
        setSize = true
    }
    local ui = ViewBase:createCSB(para)
    self:addChild(ui)
    self.avatarView = ui

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self:createAni(panel_main)
    local headList = {}
    self.curAvatarIdx = 1
    local function setSelectImg(btn)
        for _, v in pairs(headList) do
            v.img_select:setVisible(v == btn)
        end
    end
    local btn_close = panel_main:getChildByName("btn_close")
    local btn_change = panel_main:getChildByName("btn_change")
    local function btnCall(btn)
        if btn == btn_close then
            self:destroyAni(panel_main, function()
                ui:removeFromParent(true)
                self.avatarView = nil
            end)
        elseif btn == btn_change then
            UserData.Shared().dwIconid = self.curAvatarIdx
            MsgSendMgr:sendModifyUserInfo(_, self.curAvatarIdx)
        else
            self.curAvatarIdx = btn.idx
            setSelectImg(btn)
        end
    end
    for i = 1, 6 do
        local btn_head = panel_main:getChildByName("Panel_head_" .. i)
        btn_head.idx = i
        btn_head.img_select = btn_head:getChildByName("img_select")
        headList[i] = btn_head
        ExternalTools:addBtnTouchEventListener(btn_head, btnCall)
    end
    ExternalTools:addBtnTouchEventListener(btn_close, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_change, btnCall)
    setSelectImg(headList[UserData.Shared().dwIconid])
end

function MainView:showLoading()
    local para = {
        time = 1,
        from = "load"
    }
    local scene = SceneManager.Shared():GetRunningScene()
    local layer = require("JunTuan.src.views.GameLoadingView").new(para)
    ExternalTools:showView(layer, scene)
end

-- 体力更新
function MainView:refreshEnergyNum(num)
    local curNum = num or UserData.Shared():get_lCurEnergy()
    local maxNum = UserData.Shared():get_lMaxEnergy()
    self.txt_energy:setString(string.format("%d/%d", curNum, maxNum))
    ExternalTools:txtAutoWidth(self.txt_energy, 70)
end

-- 金币数更新
function MainView:refreshGoldNum(num)
    local curNum = num or UserData.Shared():get_lGoldBean()
    self.txt_gold:setString(curNum)
    ExternalTools:txtAutoWidth(self.txt_gold, 70)
end

-- 钻石数更新
function MainView:refreshDiamondNum(num)
    local curNum = num or UserData.Shared():get_lDiamond()
    self.txt_diamond:setString(curNum)
    ExternalTools:txtAutoWidth(self.txt_diamond, 70)
end

-- 战力更新
function MainView:refreshCombatNum(num)
    local curNum = num or UserData.Shared():get_dwCombat()
    self.txt_combat:setString(curNum)
    ExternalTools:txtAutoWidth(self.txt_combat, 70)
end

function MainView:addContentView(view, parent)
    local s = parent.size
    view:hide()
    view:setAnchorPoint(0.5, 0.5)
    view:setPosition(cc.p(s.width / 2, s.height / 2))
    parent:addChild(view)
end

function MainView:showBuyGemView()
    local view = require("JunTuan.src.views.BuyGemView").new()
    ExternalTools:showView(view, self)
    self.buyGemView = view
end

function MainView:showBuyGoldView()
    local view = require("JunTuan.src.views.BuyGoldView").new()
    ExternalTools:showView(view, self)
    self.buyGoldView = view
end

function MainView:showBuyEnergyView()
    local view = require("JunTuan.src.views.BuyEnergyView").new()
    ExternalTools:showView(view, self)
    self.buyEnergyView = view
end

function MainView:showView(view)
    for _, v in pairs(self.viewList) do
        v:setVisible(v == view)
    end
    self:showIcon(view.icon)
    self:showSelectImg(view.btn)
    self.panel_role:setVisible(view == self.homeView)
end

function MainView:showIcon(icon)
    for _, v in pairs(self.bottomIconList) do
        if v == icon then
            v:setPositionY(125)
        else
            v:setPositionY(110)
        end
    end
end

function MainView:showSelectImg(btn)
    for _, v in pairs(self.bottomSelectList) do
        v:setVisible(v == btn.img_select)
    end
end

-- 更新角色动画位置
function MainView:updateRoleAni()
    local roleInfoList = UserData.Shared().roleInfoList
    for i = 1, 5 do
        local panel = self.panel_role:getChildByName("Panel_" .. i)
        if panel and panel.ani then
            panel.ani:removeFromParent(true)
            panel.ani = nil
        end
    end
    for i, v in pairs(roleInfoList) do
        local position = v.position
        local panel = self.panel_role:getChildByName("Panel_" .. position)
        if panel then
            if v.isDispatch == 1 then
                local s = panel:getContentSize()
                local ani = AnimationMgr:createHeroSpine(v.roleId, v.roleRank)
                ani:setPosition(cc.p(s.width / 2, s.height / 2 - 20))
                panel:addChild(ani)
                panel.ani = ani
            end
        end
    end
end

-- 体力恢复倒计时
function MainView:energyCountdown(dt)
    local cur = UserData.Shared():get_lCurEnergy()
    local max = UserData.Shared():get_lMaxEnergy()
    if cur < max then
        local time = self.curEnergyTime
        time = time - dt
        self.curEnergyTime = time
        if time <= 0 then
            if not self.isSendEnergyRecover then
                self.isSendEnergyRecover = true
                MsgSendMgr:sendEnergyRecover()
                performWithDelay(self, function ()
                    self.isSendEnergyRecover = false
                end, 3)
            end
            self.txt_time_energy:hide()
        else
            self.txt_time_energy:show()
        end
        self.txt_time_energy:setString(timeStr2(time, true))
    else
        self.txt_time_energy:hide()
    end
end

-- 离线收益倒计时
function MainView:offlineCountdown(dt)
    if not self.homeView or not self.homeView.offline_mask then
        return
    end
    self.curOfflineTime = self.curOfflineTime + dt
    if self.curOfflineTime >= self.lOfflineTime then
        self.curOfflineTime = 0
        if UserData.Shared().offlineGold and UserData.Shared().maxCoin then
            if UserData.Shared().offlineGold < UserData.Shared().maxCoin then
                MsgSendMgr:sendReqHungGold()
            end
        end
        self.homeView.offline_mask:setPercentage(0)
    else
        local p = (self.curOfflineTime / self.lOfflineTime) * 100
        self.homeView.offline_mask:setPercentage(p)
    end
end

function MainView:startMainSchedule()
    local function update(dt)
        self:energyCountdown(dt)
        self:offlineCountdown(dt)
    end
    if not self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        self.mainScheduler = scheduler:scheduleScriptFunc(update, 0.1, false)
    end
end

function MainView:stopMainSchedule()
    if self.mainScheduler then
        local scheduler = cc.Director:getInstance():getScheduler()
        scheduler:unscheduleScriptEntry(self.mainScheduler)
        self.mainScheduler = nil
    end
end

function MainView:sendReqRoleEquipList()
    for i = 1, 6 do
        performWithDelay(self, function ()
            MsgSendMgr:sendReqEquipList(i)
        end, (i - 1) * 0.1)
    end
end

function MainView:isLoadCfg(name)
    for _, v in pairs(Define.ENUM_CFG_KEY) do
        if name == v then
            return true
        end
    end
    return false
end

function MainView:sendGameJsonCfg()
    local function successCallBack(data)
        local jsonCfg = JsonUtil.decode(data)
        for _, v in pairs(jsonCfg) do
            if not UserData.Shared().gameCfg[v.Name] then
                if self:isLoadCfg(v.Name) then
                    local cfg = JsonUtil.decode(v.ConfigJson)
                    UserData.Shared().gameCfg[v.Name] = cfg
                end
            end
        end
        GameTool:initMileList()
    end
    local function failCallBack()
        GameTool:showTxtTip("请求失败")
    end
    HttpManager.Shared():sendGameJsonCfg(nil, successCallBack, failCallBack)
end

function MainView:handleEnterGame()
    -- 初始化大厅界面
    removeWaiting()
    if UserData.Shared().isInitGameScene then
        -- 只初始化一次
        print("已经初始化大厅界面了")
        if UserData.Shared().isInGame then
            MessageManager.Shared():postMsg(MsgKeyData.onInitGame)
        end
        return
    end
    UserData.Shared().isInitGameScene = true
    if self.maskLayout then
        self.maskLayout:hide()
    end
    self.userInfo.dwUserID = UserData.Shared().dwUserID
    self.userInfo.szNickName = UserData.Shared().szNickName
    self.userInfo.lGoldBean = UserData.Shared():get_lGoldBean()
    self.userInfo.lDiamond = UserData.Shared():get_lDiamond()
    self.userInfo.combat = UserData.Shared():get_dwCombat()
    self.userSceneInfo = UserData.Shared().sceneInfo
    self.lEnergyTime = UserData.Shared().lEnergyTime
    self.curEnergyTime = self.lEnergyTime
    self:refreshGoldNum()
    self:refreshDiamondNum()
    self:refreshEnergyNum()
    self:refreshCombatNum()
    self:updateRoleAni()
    self:initPanelContent()
    self:startMainSchedule()

    if not UserData.Shared().isInGame then
        local curLevelInfo = UserData.Shared().curLevelInfo
        if curLevelInfo.userStatus == 1 then
            -- 询问是否继续挑战
            local function okCall()
                MsgSendMgr:sendUserSnapshot()
            end
            local function noCall()
                MsgSendMgr:sendExitBattle()
            end
            local dialog = confirm("要继续挑战上次的关卡吗？", okCall, noCall)
            dialog:setLocalZOrder(9998)
        end
    else
        MessageManager.Shared():postMsg(MsgKeyData.onInitGame)
    end

    self:sendGameJsonCfg()
    self:sendReqRoleEquipList()
    MsgSendMgr:sendNewSceneInfo()
    MsgSendMgr:sendReqHungGold()

    --情非得已在游戏大厅初始化完成之后请求一次数据，用于红点计算
    MsgSendMgr:sendMileStoneReq(0)
    MsgSendMgr:sendMonsterBooksReq()
    MsgSendMgr:sendSignTaskListReq()
end

function MainView:handleCurrencyUpdate()
    self.userInfo.lGoldBean = UserData.Shared():get_lGoldBean()
    self.userInfo.lDiamond = UserData.Shared():get_lDiamond()
    self:refreshGoldNum()
    self:refreshDiamondNum()
    self:refreshEnergyNum()
end

function MainView:handleRoleList(data)
    UserData.Shared():setRoleInfo(data.userRole)
    self:updateRoleAni()
end

function MainView:handleEnergyRecy()
    self.curEnergyTime = UserData.Shared().lEnergyTime
    self.lEnergyTime = UserData.Shared().lEnergyTime
    self.curEnergyTime = self.lEnergyTime
    self.txt_time_energy:setString(timeStr2(self.curEnergyTime, true))
    self:refreshEnergyNum()
    performWithDelay(self, function ()
        self.isSendEnergyRecover = false
    end, 1)
end

function MainView:handleHeroRedDot(isShow)
    self.heroRedDot:setVisible(isShow)
end

function MainView:handleRechargeSuc(data)
    local rewards = data.rewards
    local order = data.order            -- 订单信息

    if order.ptype == 3 and order.productid == 9 and order.paystatus == 1 then
        UserData.Shared().isBuyNewUserBag = true
        if self.homeView and self.homeView.btn_newBag then
            self.homeView.btn_newBag:hide()
        end
    end

    local showReward = {}
    local isCard = false
    for _, v in ipairs(rewards) do
        if v.rewardType ~= 9 then
            --local scene = SceneManager.Shared():GetRunningScene()
            --GameTool:showGetRewardWin(scene, v)
            table.insert(showReward, v)
        else
            if v.rewardId == 1 then
                -- 周卡
                isCard = true
                UserData.Shared().days_week = v.rewardNums
            elseif v.rewardId == 2 then
                -- 月卡
                isCard = true
                UserData.Shared().days_month = v.rewardNums
                UserData.Shared().mileStoneLock = {}
            end
        end
    end

    local scene = SceneManager.Shared():GetRunningScene()
    if #showReward == 1 then
        showReward = showReward[1]
    end
    GameTool:showGetRewardWin(scene, showReward)
    printf("充值奖励个数：%d", #showReward)

    if not tolua.isnull(self.buyGemView) then
        self.buyGemView:removeFromParent()
        self.buyGemView = nil
    end
    self.shopView:handleRechargeSuc(rewards)
    if isCard and self.homeView and self.homeView.gameView then
        self.homeView.gameView:updateLockSlotData(4)
    end
    GameTool:showTxtTip("充值成功, 您的豪气照亮了整个游戏")
    printf("充值奖励个数: %d", #rewards)
end

function MainView:handleModifyUserInfo(data)
    printf(" 修改昵称头像返回，data.noError:%s", data.noError and "true" or "false")
    if data.noError then
        local nick = UserData.Shared().szNickName
        if nick and nick ~= "" then
            self.txt_nick:setString(nick)
        end
        GameTool:setUserIconImg(UserData.Shared().dwIconid, self.img_avatar)
        GameTool:showTxtTip("修改成功")
        if self.avatarView then
            self.avatarView:removeFromParent()
            self.avatarView = nil
        end
        if self.nickView then
            self.nickView:removeFromParent()
            self.nickView = nil
        end
    else
        if UserData.Shared().lastNick then
            UserData.Shared().szNickName = UserData.Shared().lastNick
            UserData.Shared().lastNick = nil
            self.txt_nick:setString(UserData.Shared().szNickName)
        end
        if UserData.Shared().lastIcon then
            UserData.Shared().dwIconid = UserData.Shared().lastIcon
            UserData.Shared().lastIcon = nil
            GameTool:setUserIconImg(UserData.Shared().lastIcon, self.img_avatar)
        end
        GameTool:showTxtTip(data.outMsg)
    end
end

function MainView:addNotify()
    self.enterGameMsg = MessageManager.Shared():addMsg(MsgKeyData.onEnterGame, function ()
        self:handleEnterGame()
    end)
    self.onCurrencyUpdateMsg = MessageManager.Shared():addMsg(MsgKeyData.onCurrencyUpdate, function ()
        self:handleCurrencyUpdate();
    end)
    self.roleInfoListMsg = MessageManager.Shared():addMsg(MsgKeyData.onRoleListRet, function (data)
        self:handleRoleList(data)
    end)
    self.combatUpdateMsg = MessageManager.Shared():addMsg(MsgKeyData.onCombatUpdate, function ()
        local combat = UserData.Shared():get_dwCombat()
        self:refreshCombatNum(combat)
    end)
    self.onEnergyRecvMsg = MessageManager.Shared():addMsg(MsgKeyData.onEnergyRecv, function ()
        self:handleEnergyRecy()
    end)
    self.onHeroRedDotMsg = MessageManager.Shared():addMsg(MsgKeyData.onHeroRedDot, function (data)
        self:handleHeroRedDot(data)
    end)
    self.loginSuc = MessageManager.Shared():addMsg(MsgKeyData.onLoginSuc, function ()
        -- 登录登录服务器成功, 开始连接游戏服务器
        GameManager.Shared():ConnectServer(GameManager.Shared().currRoomType)
    end)
    self.onRechargeSuc = MessageManager.Shared():addMsg(MsgKeyData.onRechargeSuc, function (data)
        self:handleRechargeSuc(data)
    end)
    self.onPropChange = MessageManager.Shared():addMsg(MsgKeyData.onPropChange, function (data)
        self:handleRechargeSuc(data)
    end)
    self.onModifyUserInfo = MessageManager.Shared():addMsg(MsgKeyData.onModifyUserInfo, function (data)
        self:handleModifyUserInfo(data)
    end)
end

function MainView:removeNotify()
    MessageManager.Shared():removeMsg(MsgKeyData.onEnterGame, self.enterGameMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onRoleListRet, self.roleInfoListMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onCurrencyUpdate, self.onCurrencyUpdateMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onCombatUpdate, self.combatUpdateMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onEnergyRecv, self.onEnergyRecvMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onHeroRedDot, self.onHeroRedDotMsg)
    MessageManager.Shared():removeMsg(MsgKeyData.onLoginSuc, self.loginSuc)
    MessageManager.Shared():removeMsg(MsgKeyData.onRechargeSuc, self.onRechargeSuc)
    MessageManager.Shared():removeMsg(MsgKeyData.onPropChange, self.onPropChange)
    MessageManager.Shared():removeMsg(MsgKeyData.onModifyUserInfo, self.onModifyUserInfo)
end

function MainView:onExit()
    self:removeNotify()
    self:stopMainSchedule()
    NoticeController.Shared():stopScrollTimeCountdown()
    if _G["JunTuanMsgHandler.obj"] then
        -- 初始化数据以便重新请求场景消息
        _G["JunTuanMsgHandler.obj"]:initData()
    end
end

return MainView
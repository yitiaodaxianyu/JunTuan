---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hkc.
--- DateTime: 2021/5/7 11:55
---

-- 获得奖励界面
local GetRewardView = class("GetRewardView", ViewBase)
local Define = require("JunTuan.src.configs.Define")

function GetRewardView:ctor(data)
    self:enableNodeEvents()
    self.data = data
end

function GetRewardView:onEnter()
    self:initView()
end

function GetRewardView:initView()
    local para = {
        csb = JunTuanCfg.csbCfg.common.getRewardView,
        setSize = true
    }
    local ui = self:createCSB(para)
    ui:setAnchorPoint(0.5, 0.5)
    ui:setPosition(display.center)
    self.csbNode = ui
    self:addChild(ui)

    local panel_black = ui:getChildByName("Panel_black")
    local panel_main = panel_black:getChildByName("Panel_main")
    self.panel_main = panel_main
    self:createAni(panel_main)

    self.listView_get = self.panel_main:getChildByName("listView_get"):hide()
    self:initReward()

    local img_light = panel_main:getChildByName("img_light")
    img_light:runAction(cc.RepeatForever:create(cc.RotateBy:create(0.1, 15)))
    local btn_receive = panel_main:getChildByName("Panel_receive")
    local btn_double = panel_main:getChildByName("btn_dubble_receive")
    local function btnCall(btn)
        if btn == btn_double or btn == panel_main then
            -- 领取
            self:destroyAni(panel_main, function()
                self:removeFromParent()
            end)
        end
    end
    ExternalTools:addBtnTouchEventListener(btn_double, btnCall)
    ExternalTools:addBtnTouchEventListener(btn_receive, btnCall)
    ExternalTools:addBtnTouchEventListener(panel_main, btnCall, true)
end

function GetRewardView:initReward()
    -- local count = 1;
    -- for i,v in pairs(self.data) do
    --     self:initRewarditem(v,count,#self.data);
    --     count = count + 1;
    -- end
    --local data = {
    --    rewardType = self.data.rewardType,
    --    rewardId = self.data.rewardId,
    --    rewardNums = self.data.rewardNums,
    --    userEquip = clone(self.data.userEquip),
    --}
    --self.data = {
    --    data, data, data, data, data
    --}
    if #self.data > 1 then
        self:initRewardItemList(self.data)
    else
        self:initRewarditem(self.data);
    end
end

function GetRewardView:initRewarditem(data, isClone)
    local rewardType = data.rewardType
    local rewardID = data.rewardId or data.rewardID
    local rewardNum = data.rewardNums or data.rewardNum
    local panel_equip = self.panel_main:getChildByName("Panel_equip"):hide()
    local panel_money = self.panel_main:getChildByName("Panel_money"):hide()
    panel_equip = isClone and panel_equip:clone() or panel_equip
    panel_money = isClone and panel_money:clone() or panel_money
    if rewardType == Define.ENUM_REWARD_TYPE.CHIPS or rewardType == Define.ENUM_REWARD_TYPE.BOX then
        panel_money:show()
        local img_money = panel_money:getChildByName("img_money"):hide()
        local txt_num = panel_money:getChildByName("Text_num")
        txt_num:setString("x" .. rewardNum)
        local roleID = rewardID
        if rewardType == Define.ENUM_REWARD_TYPE.CHIPS then
            UserData.Shared():updateRoleChip(roleID, rewardNum)
            MessageManager.Shared():postMsg(MsgKeyData.onHeroRedDotCheck)
        end
        local node = GameTool:createChipNode(roleID)
        node:setScale(2)
        node:setPosition(cc.p(img_money:getPosition()))
        panel_money:addChild(node)
        return panel_money
    elseif rewardType == Define.ENUM_REWARD_TYPE.EQUIPS then
        panel_equip:show()
        if isClone then
            panel_equip:setScale(1.2)
        end
        GameTool:setEquipImgById(rewardID, panel_equip)
        MessageManager.Shared():postMsg(MsgKeyData.onHeroRedDotCheck)
        return panel_equip
    elseif rewardType == Define.ENUM_REWARD_TYPE.PET_EGG then
    elseif rewardType == Define.ENUM_REWARD_TYPE.PET then
    elseif (rewardType == Define.ENUM_REWARD_TYPE.COINS) or (rewardType == Define.ENUM_REWARD_TYPE.GEM) then
        panel_money:show()
        local img_money = panel_money:getChildByName("img_money")
        GameTool:setRewardImg(rewardType, rewardID, img_money)
        local txt_num = panel_money:getChildByName("Text_num")
        txt_num:setString("x" .. rewardNum)
        if rewardType == Define.ENUM_REWARD_TYPE.COINS then
            GameTool:updateGold(rewardNum)
        else
            GameTool:updateGem(rewardNum)
        end
        MessageManager.Shared():postMsg(MsgKeyData.onHeroRedDotCheck)
        --MessageManager.Shared():postMsg(MsgKeyData.onNewEquipDotCheck)
        return panel_money
    end
end

function GetRewardView:initItemList(panel, data, num)
    panel:show()
    local s = panel:getContentSize()
    --local c = cc.p(s.width / 2, s.height / 2)
    --local posList = ExternalTools:getCenterSortPos(c, num, 160, 1)
    local posList = {
        cc.p(s.width * 0.15, s.height * 0.5),
        cc.p(s.width * 0.5, s.height * 0.5),
        cc.p(s.width * 0.85, s.height * 0.5),
    }
    for i, v in pairs(data) do
        local item = self:initRewarditem(v, true)
        item:show()
        item:setPosition(posList[i])
        panel:addChild(item)
    end
end

function GetRewardView:initRewardItemList()
    local listView_get = self.panel_main:getChildByName("listView_get"):show()
    listView_get:setScrollBarEnabled(false)
    local itemClone = self.panel_main:getChildByName("Panel_item"):hide()
    local num = 3
    local list = ExternalTools:splitGetList(self.data, num)
    for _, v in pairs(list) do
        local item = itemClone:clone()
        self:initItemList(item, v, num)
        listView_get:pushBackCustomItem(item)
    end
end

function GetRewardView:addNotify()

end

function GetRewardView:removeNotify()

end

function GetRewardView:onExit()
    self:removeNotify()
end

return GetRewardView
{"version":3,"sources":["assets\\Scripts\\Wall\\WallManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAkC;AAK5B,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAyC,+BAAY;IAArD;QAAA,qEAmDC;QA/CW,cAAQ,GAAoB,IAAI,CAAC;QACjC,eAAS,GAAU,IAAI,CAAC;;IA8CpC,CAAC;oBAnDoB,WAAW;IAOd,uBAAW,GAAzB;QAEI,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,4BAAM,GAAN;QACI,aAAW,CAAC,SAAS,GAAC,IAAI,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAC,IAAI,GAAG,EAAiB,CAAC;IAC3C,CAAC;IAED,+BAAS,GAAT;QACI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,aAAW,CAAC,SAAS,GAAC,IAAI,CAAC;IAC/B,CAAC;IAED,YAAY;IACZ,6BAAO,GAAP,UAAQ,MAAe,EAAC,IAAS;QAC7B,IAAI,OAAO,GAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtC,IAAG,OAAO,IAAE,MAAM,EAAC;YACf,OAAO,CAAC,WAAW,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IACD,aAAa;IACb,gCAAU,GAAV,UAAW,EAAW;QAClB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IACD,cAAc;IACd,gCAAU,GAAV;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACD,cAAc;IACd,8BAAQ,GAAR,UAAS,MAAe;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAEO,iCAAW,GAAnB;QACI,IAAI,CAAC,SAAS,GAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,kBAAQ,CAAC,CAAC;IACpE,CAAC;IACD,WAAW;IACX,iCAAW,GAAX;QACI,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;;IAhDc,qBAAS,GAAgB,IAAI,CAAC;IAF5B,WAAW;QAD/B,OAAO;OACa,WAAW,CAmD/B;IAAD,kBAAC;CAnDD,AAmDC,CAnDwC,EAAE,CAAC,SAAS,GAmDpD;kBAnDoB,WAAW","file":"","sourceRoot":"/","sourcesContent":["import MainWall from \"./MainWall\";\r\nimport Wall from \"./Wall\";\r\nimport { WallType } from \"./WallConfig\";\r\n\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class WallManager extends cc.Component {\r\n\r\n    private static _instance: WallManager = null;\r\n\r\n    private map_wall:Map<WallType,Wall>=null;\r\n    private main_wall:MainWall=null;\r\n\r\n    public static getInstance():WallManager\r\n    {\r\n        return this._instance;\r\n    }\r\n\r\n    onLoad () {\r\n        WallManager._instance=this;\r\n        this.setMainWall();\r\n        this.map_wall=new Map<WallType,Wall>();   \r\n    }\r\n\r\n    onDestroy(): void {\r\n        this.map_wall.clear();\r\n        WallManager._instance=null;        \r\n    }\r\n\r\n    /**添加一个墙体 */\r\n    addWall(wallId:WallType,wall:Wall){\r\n        let oldWall=this.map_wall.get(wallId);\r\n        if(oldWall&&wallId){\r\n            oldWall.destroyWall();\r\n        }\r\n        this.map_wall.set(wallId,wall);\r\n    }\r\n    /**移除指定的墙体 */\r\n    removeWall(id:WallType){\r\n        this.map_wall.delete(id);\r\n    }\r\n    /**获得所有墙体数据 */\r\n    getAllWall():Map<WallType,Wall>{\r\n        return this.map_wall;\r\n    }\r\n    /**获得一个墙体数据 */\r\n    getAWall(wallId:WallType):Wall{\r\n        return this.map_wall.get(wallId);\r\n    }\r\n    \r\n    private setMainWall(){\r\n        this.main_wall=cc.find('Canvas/wall_bg').getComponent(MainWall);     \r\n    }\r\n    /**获得主城墙 */\r\n    getMainWall():MainWall{\r\n        return this.main_wall;\r\n    }\r\n}\r\n"]}
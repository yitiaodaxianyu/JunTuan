{"version":3,"sources":["assets\\Scripts\\Tower\\TowerLevel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { FightingInfo } from \"../Constants\";\r\nimport { TableMonsterData } from \"../Level/MissionLevel\";\r\nimport { LoadManager } from \"../Loading/LoadManager\";\r\nimport { MonsterGroupConfigureManager } from \"../Monster/Data/MonsterGroupConfigure\";\r\nimport LanguageManager from \"../multiLanguage/LanguageManager\";\r\nimport TowerManager from \"./TowerManager\";\r\n\r\nexport class JsonTowerLevel {\r\n    /**层数 */\r\n    public Floor:number = 0 ;\r\n    /**怪物组 */\r\n    public MonsterGroup:number = 0 ;\r\n    /**怪物等级 */\r\n    public MonsterLevel:number = 0 ;\r\n}\r\n\r\nexport class TowerLevelManager {\r\n    private static _instance: TowerLevelManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonTowerLevel>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():TowerLevelManager {\r\n        if(this._instance==null) {\r\n            this._instance=new TowerLevelManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('TowerLevel',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonTowerLevel成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonTowerLevel();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.Floor,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonTowerLevel(id:number):JsonTowerLevel {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据层数获取怪物组 */\r\n    public getMonsterGroup(id:number): number {\r\n        return this.data.get(id).MonsterGroup;\r\n    }\r\n    /**根据层数获取怪物等级 */\r\n    public getMonsterLevel(id:number): number {\r\n        return this.data.get(id).MonsterLevel;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 层数*/\r\n    public static getMaxFloor():number {\r\n        return 480;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    /**获取当前挑战的信息----迷宫怪物信息/标题信息/背景图片名称 */\r\n    getFightingInfo(level:number):FightingInfo{\r\n        let fightingInfo=new FightingInfo();\r\n        //LanguageManager.getInstance().getStrByTextId(810001)+\r\n        fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(810001)+TowerManager.getTowerLevel()+' F';\r\n        //背景图片名称    \r\n        let bgIndex=2;\r\n        let bgName='bg/bg'+bgIndex;\r\n        fightingInfo.bg_name=bgName;\r\n        //怪物信息列表\r\n        let monsterDatas=new Array();\r\n        let dataArr=new Array();\r\n        let jsonData=this.getJsonTowerLevel(level);\r\n        let monsterJsonData=MonsterGroupConfigureManager.getInstance().getJsonMonsterGroupConfigure(jsonData.MonsterGroup);\r\n        for(let n=0; n<monsterJsonData.MonsterId.length; n++){\r\n            let tableMonsterData=new TableMonsterData();\r\n            tableMonsterData.id=monsterJsonData.MonsterId[n];\r\n            tableMonsterData.num=monsterJsonData.MonsterNum[n];\r\n            tableMonsterData.level=jsonData.MonsterLevel;\r\n            dataArr.push(tableMonsterData);\r\n            fightingInfo.total_monster_num+=tableMonsterData.num;\r\n        }\r\n        monsterDatas.push(dataArr);\r\n        fightingInfo.monster_datas=monsterDatas;\r\n        return fightingInfo;\r\n    }\r\n}\r\n"]}
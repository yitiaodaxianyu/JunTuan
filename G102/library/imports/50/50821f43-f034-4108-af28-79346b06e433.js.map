{"version":3,"sources":["assets\\Scripts\\Level\\MissionLevel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { LoadManager } from \"../Loading/LoadManager\";\r\nimport { FightingInfo, IsDebug } from \"../Constants\";\r\nimport LanguageManager from \"../multiLanguage/LanguageManager\";\r\nimport { MonsterGroupConfigureManager } from \"../Monster/Data/MonsterGroupConfigure\";\r\nimport { MonsterConfigureManager } from \"../Monster/Data/MonsterConfigure\";\r\nimport { MonsterAttributeManager } from \"../Monster/Data/MonsterAttribute\";\r\nimport { MonsterGrowthAttributesManager } from \"../Monster/Data/MonsterGrowthAttributes\";\r\nimport { MonsterSkillManager } from \"../Monster/Data/MonsterSkill\";\r\n\r\nexport class TableMonsterData{\r\n    /**怪物id */\r\n    id:number=50010;\r\n    /**怪物数量 */\r\n    num:number=1;\r\n    /**怪物等级 */\r\n    level:number=1;\r\n    /**怪物hp系数 */\r\n    hp_rate:number=1;\r\n    /**怪物刷新间隔 */\r\n    refresh_time:number=0;\r\n    /**怪物分数（活动模式专用） */\r\n    score:number=10;\r\n}\r\n\r\nexport class JsonMissionLevel {\r\n    /**关卡数id */\r\n    public LevelId:number = 0 ;\r\n    /**关卡类型 */\r\n    public LevelTypes:number = 0 ;\r\n    /**章节 */\r\n    public Chapter:number = 0 ;\r\n    /**小关编号 */\r\n    public LevelNum:number = 0 ;\r\n    /**x轴 */\r\n    public PosX:number = 0 ;\r\n    /**y轴 */\r\n    public PosY:number = 0 ;\r\n    /**怪物组配置 */\r\n    public MonsterGroupConfigure:number[] = [] ;\r\n    /**最大波次 */\r\n    public MaxWave:number = 0 ;\r\n    /**怪潮波次 */\r\n    public MonsterTideWave:number[] = [] ;\r\n    /**每波时间间隔 */\r\n    public TimeInterval:number[] = [] ;\r\n    /**怪物等级 */\r\n    public MonsterLevel:number[] = [] ;\r\n    /**血量系数 */\r\n    public HpCoefficient:number[] = [] ;\r\n    /**金币总数量 */\r\n    public PassReward_Coin:number = 0 ;\r\n    /**推荐战力 */\r\n    public RecommendedCombatPower:number = 0 ;\r\n}\r\n\r\nexport class MissionLevelManager {\r\n    private static _instance: MissionLevelManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonMissionLevel>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():MissionLevelManager {\r\n        if(this._instance==null) {\r\n            this._instance=new MissionLevelManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('MissionLevel',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonMissionLevel成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonMissionLevel();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.LevelId,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonMissionLevel(id:number):JsonMissionLevel {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据关卡数id获取关卡类型 */\r\n    public getLevelTypes(id:number): number {\r\n        return this.data.get(id).LevelTypes;\r\n    }\r\n    /**根据关卡数id获取章节 */\r\n    public getChapter(id:number): number {\r\n        console.log(\"chapterid:\"+id);\r\n        \r\n        return this.data.get(id).Chapter;\r\n    }\r\n    /**根据关卡数id获取小关编号 */\r\n    public getLevelNum(id:number): number {\r\n        return this.data.get(id).LevelNum;\r\n    }\r\n    /**根据关卡数id获取x轴 */\r\n    public getPosX(id:number): number {\r\n        return this.data.get(id).PosX;\r\n    }\r\n    /**根据关卡数id获取y轴 */\r\n    public getPosY(id:number): number {\r\n        return this.data.get(id).PosY;\r\n    }\r\n    /**根据关卡数id获取怪物组配置 */\r\n    public getMonsterGroupConfigure(id:number): number[] {\r\n        return this.data.get(id).MonsterGroupConfigure;\r\n    }\r\n    /**根据关卡数id获取最大波次 */\r\n    public getMaxWave(id:number): number {\r\n        return this.data.get(id).MaxWave;\r\n    }\r\n    /**根据关卡数id获取怪潮波次 */\r\n    public getMonsterTideWave(id:number): number[] {\r\n        return this.data.get(id).MonsterTideWave;\r\n    }\r\n    /**根据关卡数id获取每波时间间隔 */\r\n    public getTimeInterval(id:number): number[] {\r\n        return this.data.get(id).TimeInterval;\r\n    }\r\n    /**根据关卡数id获取怪物等级 */\r\n    public getMonsterLevel(id:number): number[] {\r\n        return this.data.get(id).MonsterLevel;\r\n    }\r\n    /**根据关卡数id获取血量系数 */\r\n    public getHpCoefficient(id:number): number[] {\r\n        return this.data.get(id).HpCoefficient;\r\n    }\r\n    /**根据关卡数id获取金币总数量 */\r\n    public getPassReward_Coin(id:number): number {\r\n        return this.data.get(id).PassReward_Coin;\r\n    }\r\n    /**根据关卡数id获取推荐战力 */\r\n    public getRecommendedCombatPower(id:number): number {\r\n        return this.data.get(id).RecommendedCombatPower;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 关卡数id*/\r\n    public static getMaxLevelId():number {\r\n        return 6;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    /**根据关卡数和波数获得一个id */\r\n    public static getId(level:number,wave:number):number{\r\n        return 10000*level+wave;\r\n    }\r\n    \r\n    /** 静态方法，获取最大的关卡数*/\r\n    public static getMaxLevel():number {\r\n        return 255;\r\n    }\r\n    /**根据关卡数获得该关卡的总波数 */\r\n    public getWaveNumByLevel(level:number):number\r\n    {        \r\n        let num=this.getMonsterGroupConfigure(level).length;\r\n        return num;\r\n    }\r\n\r\n    /**获取关卡名字 */\r\n    public getLevelName(level:number):string{\r\n        return this.getChapter(level)+\"\";\r\n    }\r\n\r\n    /**根据id号获取Json的坐标 */\r\n    public getJsonLevelPosXY(id:number):cc.Vec2 {\r\n        let pos=new cc.Vec2(this.getPosX(id),this.getPosY(id))\r\n        return pos;\r\n    }\r\n    /**获得level的关卡数据 */\r\n    public getFightingInfo(level:number):FightingInfo\r\n    {\r\n        let jsonData=this.getJsonMissionLevel(level);\r\n        let fightingInfo=new FightingInfo();\r\n        \r\n        fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(130007)+' '+this.getLevelName(level);\r\n        //背景图片名称    \r\n        let bgIndex=(this.getChapter(level)%11);\r\n        let bgName='bg/bg'+bgIndex;\r\n        fightingInfo.bg_name=bgName;\r\n        fightingInfo.wall_name=bgName+'_wall';\r\n        fightingInfo.wave_types=jsonData.MonsterTideWave;\r\n        fightingInfo.wave_refresh_time=jsonData.TimeInterval;\r\n        //怪物信息列表\r\n        let monsterDatas=new Array();\r\n        let monsterGroups=jsonData.MonsterGroupConfigure;\r\n        let MGC=MonsterGroupConfigureManager.getInstance();\r\n        for(let i=0; i<monsterGroups.length; i++){\r\n            let dataArr=new Array();\r\n            let groupId=monsterGroups[i];\r\n           \r\n            let monsterJsonData=MGC.getJsonMonsterGroupConfigure(groupId)\r\n            for(let n=0; n<monsterJsonData.MonsterId.length; n++){\r\n                let tableMonsterData=new TableMonsterData();\r\n                tableMonsterData.id=monsterJsonData.MonsterId[n];\r\n                tableMonsterData.num=monsterJsonData.MonsterNum[n];\r\n                tableMonsterData.refresh_time=monsterJsonData.RefreshInterval[n];\r\n                tableMonsterData.level=jsonData.MonsterLevel[i];\r\n                tableMonsterData.hp_rate=jsonData.HpCoefficient[i];\r\n                dataArr.push(tableMonsterData);\r\n                fightingInfo.total_monster_num+=tableMonsterData.num;\r\n            }\r\n            monsterDatas.push(dataArr);\r\n        }\r\n        fightingInfo.monster_datas=monsterDatas;\r\n        console.log(\"主线关卡-\"+level);\r\n        return fightingInfo;\r\n    }\r\n\r\n\r\n    public getLevelPos(level:number):cc.Vec2\r\n    {\r\n        let jsonData=this.getJsonMissionLevel(level);\r\n        let pos=cc.v2(jsonData.PosX,jsonData.PosY);\r\n        return pos;\r\n    }\r\n\r\n    /**根据一个战力，获得关卡数 */\r\n    public getLevelByZhanli(zhanli:number,type:number):number{\r\n        let level=1;\r\n        //搜索关卡\r\n        let minOffsetZhanli=zhanli;        \r\n        this.data.forEach((jsonData,key)=>{\r\n            if(type==jsonData.LevelTypes){\r\n                let curZhanli=jsonData.RecommendedCombatPower;\r\n                let offsetZL=Math.abs(curZhanli-zhanli);\r\n                if(offsetZL<minOffsetZhanli){\r\n                    minOffsetZhanli=offsetZL;\r\n                    level=key;\r\n                }\r\n            }            \r\n        })\r\n        return level;\r\n    }\r\n    /**根据关卡获取当前关卡对应的章节的最后一关关卡数 */\r\n    public getLastLevel(level:number):number{\r\n        let lastLevel=1;\r\n        //获取当前章节\r\n        let chapter=this.getChapter(level);\r\n        this.data.forEach((v,k)=>{\r\n            if(v.Chapter==chapter){\r\n                lastLevel=v.LevelNum;\r\n            }\r\n        });        \r\n        return lastLevel;\r\n    }\r\n    /**根据章节获取当前章节对应的关卡的最后一关 */\r\n    public getChapterLevel(chapter:number):number{\r\n        let LevelId=1;\r\n        //获取与传过来章节一样的关卡\r\n        this.data.forEach((v,k)=>{\r\n            if(v.Chapter==chapter){\r\n                LevelId=v.LevelId;\r\n            }\r\n        });       \r\n        return LevelId;\r\n    }\r\n    /**获取Json的长度 */\r\n    public getJsonLevelLength():number {\r\n        let pos=this.data.size\r\n        return pos;\r\n    }\r\n    /**获取这个章节的长度 */\r\n    public getJsonLevelchapterLength(number):number {\r\n        let length=0\r\n        this.data.forEach((v,k)=>{\r\n            if(v.Chapter==number){\r\n                length+=1\r\n            }\r\n        });\r\n        return length;\r\n    }\r\n    /**获取这个章节之前章节的全部长度 */\r\n    public getJsonLevelchapterwholeLength(number):number {\r\n        let length=0\r\n        for (let index = 0; index < 1;) {\r\n            number--\r\n            if(number==0){\r\n                number--\r\n                index=2\r\n            }\r\n            if(number>=1){\r\n                this.data.forEach((v,k)=>{\r\n                    if(v.Chapter==number){\r\n                        length+=1\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    check(){\r\n        let isHave=false;\r\n        this.data.forEach((v,k)=>{\r\n            if(v.MaxWave!=v.MonsterGroupConfigure.length){\r\n                console.error(\"关卡\"+k+'怪物组配置长度是：'+v.MonsterGroupConfigure.length+\",最大长度：\"+v.MaxWave);\r\n            }\r\n            if(v.MaxWave!=v.TimeInterval.length){\r\n                console.error(\"关卡\"+k+'时间间隔长度是：'+v.TimeInterval.length+\",最大长度：\"+v.MaxWave);\r\n            }\r\n            if(v.MaxWave!=v.HpCoefficient.length){\r\n                console.error(\"关卡\"+k+'血量系数是：'+v.HpCoefficient.length+\",最大长度：\"+v.MaxWave);\r\n            }\r\n            if(v.MaxWave!=v.MonsterLevel.length){\r\n                console.error(\"关卡\"+k+'等级长度是：'+v.MonsterLevel.length+\",最大长度：\"+v.MaxWave);\r\n            }\r\n            let monsterGroupConfigure=v.MonsterGroupConfigure;\r\n            for(let i=0; i<monsterGroupConfigure.length; i++){\r\n                let groupId=monsterGroupConfigure[i];\r\n                let jsonMGC=MonsterGroupConfigureManager.getInstance().getJsonMonsterGroupConfigure(groupId);\r\n                if(!jsonMGC){\r\n                    console.error(\"怪物组配置id不存在：\"+groupId);\r\n                    isHave=true;\r\n                }else{\r\n                    //如果存在，查找这个怪物组配置是否有问题\r\n                    if(jsonMGC.MonsterId.length!=jsonMGC.MonsterNum.length){\r\n                        console.error(\"怪物组配置id和怪物数量存在长度不一致：\"+groupId);\r\n                    }\r\n                    if(jsonMGC.MonsterId.length!=jsonMGC.RefreshInterval.length){\r\n                        console.error(\"怪物组配置id和刷新时间存在长度不一致：\"+groupId);\r\n                    }\r\n                    //如果存在，查找怪物是否存在\r\n                    let monsterArr=jsonMGC.MonsterId;\r\n                    for(let m=0; m<monsterArr.length; m++){\r\n                        let monsterId=monsterArr[m];\r\n                        let jsonMonster=MonsterConfigureManager.getInstance().getJsonMonsterConfigure(monsterId);\r\n                        if(!jsonMonster){\r\n                            console.error(\"怪物id不存在：\"+monsterId);\r\n                            isHave=true;\r\n                        }else{\r\n                            //查找等级是否存在\r\n                            let level=v.MonsterLevel[i];\r\n                            let attbId=MonsterGrowthAttributesManager.getId(monsterId,level)\r\n                            let jsonAttb=MonsterGrowthAttributesManager.getInstance().getJsonMonsterGrowthAttributes(attbId);\r\n                            if(!jsonAttb){\r\n                                console.error(\"怪物属性id不存在：\"+attbId);\r\n                                isHave=true;\r\n                            }else{\r\n                                //检查技能\r\n                                for(let s=1; s<=jsonMonster.SkillNum; s++){\r\n                                    let skillId=MonsterSkillManager.getInstance().getId(jsonMonster.MonsterId,s,jsonAttb.SkillLevel);\r\n                                    let skillJson=MonsterSkillManager.getInstance().getJsonMonsterSkill(skillId);\r\n                                    if(!skillJson){\r\n                                        console.error(\"怪物id：\"+monsterId+\"技能id不存在：\"+skillId);\r\n                                        isHave=true;\r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // if(isHave==false){\r\n        //     console.log(\"关卡检测通过,没问题!\");\r\n        // }\r\n        //怪物组配置检测\r\n\r\n    }\r\n}\r\n"]}
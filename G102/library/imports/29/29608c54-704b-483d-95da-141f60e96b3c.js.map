{"version":3,"sources":["assets\\Scripts\\Activity\\EndlessLevels.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { HttpManager, AccessName } from \".././NetWork/HttpManager\";\r\nimport { CumulativeRechargesManager } from \"../AccumulatedRecharge/CumulativeRecharges\";\r\nimport { FightingInfo } from \"../Constants\";\r\nimport { TableMonsterData } from \"../Level/MissionLevel\";\r\nimport { LoadManager } from \"../Loading/LoadManager\";\r\nimport { MonsterAttributeManager } from \"../Monster/Data/MonsterAttribute\";\r\nimport { MonsterConfigureManager } from \"../Monster/Data/MonsterConfigure\";\r\nimport { MonsterGrowthAttributesManager } from \"../Monster/Data/MonsterGrowthAttributes\";\r\nimport LanguageManager from \"../multiLanguage/LanguageManager\";\r\nimport { StorageKey } from \"../Storage/StorageConfig\";\r\nimport { TheStorageManager } from \"../Storage/StorageManager\";\r\nimport MyTool, { Digits } from \"../Tools/MyTool\";\r\nimport UserData from \"../UserData\";\r\nimport { UserInfo } from \"../UserInfo/UserInfo\";\r\nimport WaveData from \"../WaveData\";\r\n\r\nexport class JsonEndlessLevels {\r\n    /**回合 */\r\n    public Round:number = 0 ;\r\n    /**等级上限 */\r\n    public LevelLimit_Upper:number = 0 ;\r\n    /**等级下限 */\r\n    public LevelLimit_Lower:number = 0 ;\r\n    /**怪物数量 */\r\n    public MonsterNum:number[] = [] ;\r\n    /**血量系数 */\r\n    public HpCoefficient:number[] = [] ;\r\n    /**怪潮波次 */\r\n    public MonsterTideWave:number[] = [] ;\r\n    /**每波时间间隔 */\r\n    public TimeInterval:number[] = [] ;\r\n    /**普通怪id */\r\n    public NormalMonster:number[] = [] ;\r\n    /**精英怪id */\r\n    public EliteMonster:number[] = [] ;\r\n    /**精英怪概率 */\r\n    public ProbabilityOfElite:number[] = [] ;\r\n}\r\n\r\nexport class EndlessLevelsManager {\r\n    private static _instance: EndlessLevelsManager = null;\r\n    //把json数据转化成map数据\r\n    private data:Map<number,JsonEndlessLevels>=null;\r\n    private is_load_completed:boolean=false;\r\n\r\n    public static getInstance():EndlessLevelsManager {\r\n        if(this._instance==null) {\r\n            this._instance=new EndlessLevelsManager();\r\n            this._instance.init();\r\n        }\r\n        return this._instance;\r\n    }\r\n    //初始化游戏数据\r\n    private init() {\r\n        if(!this.data) {\r\n            this.loadJson();\r\n        }\r\n    }\r\n    //加载json\r\n    private loadJson() {\r\n        LoadManager.loadJson('EndlessLevels',LoadManager.load_mode,(error: Error, assets:cc.JsonAsset)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            console.log('加载JsonEndlessLevels成功');\r\n            this.data=new Map();\r\n            let json=assets.json;\r\n            for(let i=0; i<json.length; i++){\r\n                let jsonData=new JsonEndlessLevels();\r\n                jsonData=json[i];\r\n                this.data.set(jsonData.Round,jsonData);\r\n            }\r\n            this.is_load_completed=true;\r\n        });\r\n    }\r\n\r\n    /**加载是否完成 */\r\n    public getIsLoadCompleted(): boolean{\r\n        return this.is_load_completed;\r\n    }\r\n    /**根据id号获取Json的各种数据 */\r\n    public getJsonEndlessLevels(id:number):JsonEndlessLevels {\r\n        return this.data.get(id);\r\n    }\r\n    /**根据回合获取等级上限 */\r\n    public getLevelLimit_Upper(id:number): number {\r\n        return this.data.get(id).LevelLimit_Upper;\r\n    }\r\n    /**根据回合获取等级下限 */\r\n    public getLevelLimit_Lower(id:number): number {\r\n        return this.data.get(id).LevelLimit_Lower;\r\n    }\r\n    /**根据回合获取怪物数量 */\r\n    public getMonsterNum(id:number): number[] {\r\n        return this.data.get(id).MonsterNum;\r\n    }\r\n    /**根据回合获取血量系数 */\r\n    public getHpCoefficient(id:number): number[] {\r\n        return this.data.get(id).HpCoefficient;\r\n    }\r\n    /**根据回合获取怪潮波次 */\r\n    public getMonsterTideWave(id:number): number[] {\r\n        return this.data.get(id).MonsterTideWave;\r\n    }\r\n    /**根据回合获取每波时间间隔 */\r\n    public getTimeInterval(id:number): number[] {\r\n        return this.data.get(id).TimeInterval;\r\n    }\r\n    /**根据回合获取普通怪id */\r\n    public getNormalMonster(id:number): number[] {\r\n        return this.data.get(id).NormalMonster;\r\n    }\r\n    /**根据回合获取精英怪id */\r\n    public getEliteMonster(id:number): number[] {\r\n        return this.data.get(id).EliteMonster;\r\n    }\r\n    /**根据回合获取精英怪概率 */\r\n    public getProbabilityOfElite(id:number): number[] {\r\n        return this.data.get(id).ProbabilityOfElite;\r\n    }\r\n\r\n    /** 静态方法，获取最大的 回合*/\r\n    public static getMaxRound():number {\r\n        return 85;\r\n    }\r\n\r\n    //以上格式统一，以下写每个json数据的特殊需求\r\n\r\n    endless_score:number=0;\r\n\r\n    /**获得回合数的关卡数据 */\r\n    public getFightingInfo(round:number):FightingInfo\r\n    {\r\n        let fightingInfo=new FightingInfo();\r\n        //LanguageManager.getInstance().getStrByTextId(0)+\r\n        fightingInfo.title_name=LanguageManager.getInstance().getStrByTextId(800001);\r\n        //背景图片名称    \r\n        // let bgIndex=2;\r\n        let bgName=\"bg/bg_Endless\"//'bg/bg'+bgIndex;\r\n        fightingInfo.bg_name=bgName;\r\n        fightingInfo.wall_name=\"bg/bg5_wall\";\r\n        //怪物信息列表\r\n        let monsterDatas=new Array();\r\n        let jsonData=this.getJsonEndlessLevels(round);\r\n        //怪物潮\r\n        fightingInfo.wave_types=jsonData.MonsterTideWave;\r\n        fightingInfo.wave_refresh_time=jsonData.TimeInterval;\r\n        //当前回合的怪物组\r\n        for(let i=0; i<jsonData.MonsterNum.length; i++){\r\n            let dataArr=new Array(); \r\n            //每波怪的数量\r\n            let monsterNum=jsonData.MonsterNum[i];\r\n            let delayTime=(jsonData.TimeInterval[i]-2)/monsterNum;\r\n            if(delayTime<0){\r\n                delayTime=0;\r\n            }\r\n            for(let n=0; n<monsterNum; n++){\r\n                //每只怪物都要单独随机\r\n                //1.随机怪物等级\r\n                let useLevel=MyTool.randomRangeInt(jsonData.LevelLimit_Lower,jsonData.LevelLimit_Upper,true);\r\n                //2.找出存在该等级的怪物池A\r\n                let monsterArrA=new Array();\r\n                for(let x=0; x<jsonData.NormalMonster.length; x++){\r\n                    let monsterIdA=jsonData.NormalMonster[x];\r\n                    let attriId=MonsterGrowthAttributesManager.getId(monsterIdA,useLevel);\r\n                    //属性表是否包含该id\r\n                    if(MonsterGrowthAttributesManager.getInstance().getJsonMonsterGrowthAttributes(attriId)){\r\n                        monsterArrA.push(monsterIdA);\r\n                    }\r\n                }\r\n                //存在该等级的精英池A\r\n                let eliteArrA=new Array();\r\n                for(let x=0; x<jsonData.EliteMonster.length; x++){\r\n                    let eliteIdA=jsonData.EliteMonster[x];\r\n                    let attriId=MonsterGrowthAttributesManager.getId(eliteIdA,useLevel);\r\n                    //属性表是否包含该id\r\n                    if(MonsterGrowthAttributesManager.getInstance().getJsonMonsterGrowthAttributes(attriId)){\r\n                        eliteArrA.push(eliteIdA);\r\n                    }\r\n                }\r\n                if(monsterArrA.length<=0 && eliteArrA.length<=0){\r\n                    cc.error(\"不存在等级：\"+useLevel);;\r\n                }\r\n                //3.如果存在精英怪，则优先随机是否有精英怪\r\n                let isHaveElite=false;\r\n                if(eliteArrA.length>0){\r\n                    isHaveElite=Math.random()<jsonData.ProbabilityOfElite[i];\r\n                }\r\n                let useMonsterId=0;\r\n                if(isHaveElite){\r\n                    //随机精英怪\r\n                    useMonsterId=eliteArrA[MyTool.randomRangeInt(0,eliteArrA.length)];\r\n                }else{\r\n                    //随机普通怪\r\n                    useMonsterId=monsterArrA[MyTool.randomRangeInt(0,monsterArrA.length)];\r\n                }\r\n                let md=new TableMonsterData();\r\n                md.id=useMonsterId;\r\n                md.num=1;\r\n                md.level=useLevel;\r\n                md.refresh_time=Math.random()*delayTime;\r\n                dataArr.push(md);\r\n                fightingInfo.total_monster_num+=md.num;\r\n            }\r\n            monsterDatas.push(dataArr);        \r\n        }        \r\n        fightingInfo.monster_datas=monsterDatas;\r\n        \r\n        return fightingInfo;\r\n    }\r\n    /**\r\n     * 获得回合数\r\n     * @param waveNum 波数\r\n     * @returns 回合数\r\n     */\r\n    getRound(waveNum:number):number{//9\r\n        let round=1;\r\n        let totalWave=0;\r\n        this.data.forEach((v,k)=>{\r\n            totalWave+=v.MonsterNum.length;\r\n            if(totalWave<=waveNum){//16<9\r\n                round=v.Round;\r\n                round+=1\r\n            }\r\n        })\r\n        if(round>EndlessLevelsManager.getMaxRound()){\r\n            round=EndlessLevelsManager.getMaxRound()\r\n        }\r\n        // console.log(\"回合数：\",round)\r\n        return round;\r\n    }\r\n    /**\r\n     * 获得这个回合的第一波的波数\r\n     * @param round 回合数\r\n     * @returns 波数\r\n     */\r\n    getWave(round:number):number{//第10波   返回第第二回合第一波=9-1\r\n        let mywave=0;\r\n        let totalWave=0;\r\n        this.data.forEach((v,k)=>{\r\n            if(round>k){\r\n                totalWave+=v.MonsterNum.length;\r\n                mywave=totalWave\r\n            }\r\n        })\r\n        return mywave;\r\n    }\r\n    \r\n\r\n    setWave(wave:number){//如果回合数比之前的回合数多   s 放进回合数\r\n        if(wave>this.getMaxWave()){\r\n            this.saveWave(wave)\r\n        }\r\n    }\r\n    private saveWave(wave){//放进回合数\r\n        UserInfo.getInstance().waveNumber=wave\r\n        HttpManager.post(AccessName.updateUserInfo,this.setCopyWaveJsonString(wave));\r\n        // TheStorageManager.getInstance().setItem(StorageKey.UnlimitedChallengeDamageMax,wave);\r\n    }\r\n    getMaxWave():number{//现在的回合数\r\n        let damage=UserInfo.getInstance().waveNumber;\r\n        return damage\r\n    }\r\n\r\n    /**检测表格数据 */\r\n    check(){\r\n        //怪物潮\r\n        //MonsterGrowthAttributesManager.getInstance().getLevel(123);\r\n        this.data.forEach((jsonData,k)=>{\r\n            //当前回合的怪物组\r\n            for(let i=0; i<jsonData.MonsterNum.length; i++){\r\n                //每波怪的数量\r\n                for(let level=jsonData.LevelLimit_Lower; level<=jsonData.LevelLimit_Upper; level++){\r\n                    let monsterArrA=new Array();\r\n                    for(let x=0; x<jsonData.NormalMonster.length; x++){\r\n                        let monsterIdA=jsonData.NormalMonster[x];\r\n                        if(!MonsterConfigureManager.getInstance().getJsonMonsterConfigure(monsterIdA)){\r\n                            console.error(\"不存在怪物id:\"+monsterIdA);\r\n                        }\r\n                        let attriId=MonsterGrowthAttributesManager.getId(monsterIdA,level);\r\n                        //属性表是否包含该id\r\n                        if(MonsterGrowthAttributesManager.getInstance().getJsonMonsterGrowthAttributes(attriId)){\r\n                            monsterArrA.push(monsterIdA);\r\n                        }\r\n                    }\r\n                    //存在该等级的精英池A\r\n                    let eliteArrA=new Array();\r\n                    for(let x=0; x<jsonData.EliteMonster.length; x++){\r\n                        let eliteIdA=jsonData.EliteMonster[x];\r\n                        if(!MonsterConfigureManager.getInstance().getJsonMonsterConfigure(eliteIdA)){\r\n                            console.error(\"不存在精英怪物id:\"+eliteIdA);\r\n                        }\r\n                        let attriId=MonsterGrowthAttributesManager.getId(eliteIdA,level);\r\n                        //属性表是否包含该id\r\n                        if(MonsterGrowthAttributesManager.getInstance().getJsonMonsterGrowthAttributes(attriId)){\r\n                            eliteArrA.push(eliteIdA);\r\n                        }\r\n                    }\r\n                    if(monsterArrA.length<=0 && eliteArrA.length<=0){                        \r\n                        console.error(\"不存在等级：\"+level);\r\n                        \r\n                    }\r\n                }\r\n                \r\n            }\r\n        })\r\n        \r\n    }\r\n    private setCopyWaveJsonString(Wave:number):string{\r\n        let uid=UserData.getInstance().getUserID();\r\n        let num=Wave;\r\n        return JSON.stringify({\r\n            type:9,\r\n            uid:uid,\r\n            value:num,\r\n        });\r\n    }\r\n}\r\n"]}
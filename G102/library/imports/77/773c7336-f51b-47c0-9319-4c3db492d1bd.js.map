{"version":3,"sources":["assets\\Scripts\\UI\\home\\ToPlayPreviewUi.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { BossChallengeManager } from \"../../Activity/BossChallenge\";\r\nimport { EndlessLevelsManager } from \"../../Activity/EndlessLevels\";\r\nimport { FightingInfo, GameMode } from \"../../Constants\";\r\nimport GameManager from \"../../GameManager\";\r\nimport { LevelManager } from \"../../Level/LevelManager\";\r\nimport { MissionLevelManager } from \"../../Level/MissionLevel\";\r\nimport { MazeManager } from \"../../Maze/MazeManager\";\r\nimport { MonsterConfigureManager } from \"../../Monster/Data/MonsterConfigure\";\r\nimport Monster from \"../../Monster/Monster\";\r\nimport { MonsterActionName, MonsterFaceName } from \"../../Monster/MonsterData\";\r\nimport { TowerLevelManager } from \"../../Tower/TowerLevel\";\r\nimport TowerManager from \"../../Tower/TowerManager\";\r\nimport UIComponent from \"../UIComponent\";\r\nimport { UiAction } from \"../UiInterface\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ToPlayPreviewUi extends UIComponent {\r\n\r\n    @property(cc.SpriteAtlas)\r\n    to_play_ui:cc.SpriteAtlas = null;\r\n\r\n    index:number = 0;\r\n    bossIndex:number = 0;\r\n\r\n\r\n    \r\n    protected start(): void {\r\n        this.refreshUi();\r\n        \r\n    }\r\n\r\n    init(uiAc: UiAction) {\r\n        super.init(uiAc);\r\n\r\n        this.refreshUi();\r\n    }\r\n\r\n    refreshUi(){\r\n        \r\n        let level=LevelManager.getInstance().start_level;\r\n\r\n        let fightingInfo=new FightingInfo();\r\n        switch(GameManager.getInstance().cur_game_mode){\r\n            case GameMode.Main:{\r\n                fightingInfo=MissionLevelManager.getInstance().getFightingInfo(level);\r\n            }break;\r\n            case GameMode.Endless:{\r\n                fightingInfo=EndlessLevelsManager.getInstance().getFightingInfo(1);\r\n            }break;\r\n            case GameMode.Boss_Challenge:{\r\n                fightingInfo=BossChallengeManager.getInstance().getFightingInfo(BossChallengeManager.getInstance().cur_challenge_mode);\r\n            }break;\r\n            case GameMode.Maze:{\r\n                fightingInfo=MazeManager.getInstance().getFightingInfo();\r\n            }break;\r\n            case GameMode.Tower:{\r\n                fightingInfo=TowerLevelManager.getInstance().getFightingInfo(TowerManager.getTowerLevel());\r\n            }break;\r\n        }\r\n        GameManager.getInstance().fighting_info=fightingInfo;\r\n        let bg1=this.node.getChildByName('bg1');\r\n        this.node.getChildByName(\"levelLabel\").getComponent(cc.Label).string =fightingInfo.title_name;\r\n\r\n        cc.resources.load(fightingInfo.bg_name,cc.SpriteFrame,(error: Error, assets:cc.SpriteFrame)=>{\r\n            if(error)\r\n            {\r\n                console.log(error);\r\n                return;\r\n            }\r\n            bg1.getComponent(cc.Sprite).spriteFrame=assets;\r\n        });        \r\n        let list=fightingInfo.getOnlyMonsterDataList();\r\n        list.forEach((v,k)=>{\r\n            if(!MonsterConfigureManager.getInstance().getJsonMonsterConfigure(v.id)){\r\n                cc.log(v.id);\r\n            }\r\n            let type=MonsterConfigureManager.getInstance().getMonsterClass(v.id);\r\n            this.loadPrefab(\"\" + type,v.id,v.level);\r\n        })\r\n    }\r\n\r\n    private loadPrefab(type:string,key,value){\r\n        let path = \"monster/ui/Monster_\" + type;\r\n        let node:cc.Node = null;\r\n        cc.resources.load(path,cc.Prefab,(error: Error, assets:cc.Prefab)=>{  \r\n            if(error){\r\n                cc.log(error);\r\n                return;\r\n            }\r\n            node = cc.instantiate(assets);\r\n            // node.removeComponent(Monster);\r\n            // node.removeComponent(cc.PolygonCollider)\r\n            let levelNode = new cc.Node();\r\n            levelNode.addComponent(cc.Sprite).spriteFrame = this.to_play_ui.getSpriteFrame(\"Prepare_Level_Bg\")\r\n            let levelLabel = new cc.Node();\r\n            levelLabel.addComponent(cc.Label).string = \"Lv.\"+value;\r\n            levelLabel.getComponent(cc.Label).fontSize = 28;\r\n            levelLabel.color = cc.color(255,255,255);\r\n            levelLabel.getComponent(cc.Label).enableBold = true;\r\n            levelLabel.addComponent(cc.LabelOutline).color = cc.color(27, 35, 52)\r\n            levelLabel.getComponent(cc.LabelOutline).width = 2;\r\n            levelLabel.parent = levelNode;\r\n            levelLabel.setPosition(cc.v2(0,0));\r\n            levelLabel.anchorY = 0.4;\r\n            if(MonsterConfigureManager.getInstance().getStrengthType(key) != 3){\r\n                node.parent = this.node.getChildByName(\"pos\"+this.index);\r\n                levelNode.parent = this.node.getChildByName(\"pos\"+this.index);\r\n                node.setPosition(cc.v2(0,0));\r\n                levelNode.setPosition(cc.v2(0,0));\r\n                this.index++;\r\n                levelNode.scale = 0.7;\r\n                node.getComponent(sp.Skeleton).setSkin(MonsterFaceName.Front + MonsterConfigureManager.getInstance().getSkin(key));\r\n                node.getComponent(sp.Skeleton).setAnimation(0,MonsterFaceName.Front + \"_\" + MonsterActionName.Idle,true);\r\n            }else{\r\n                let bossIcon = new cc.Node();\r\n                bossIcon.addComponent(cc.Sprite).spriteFrame = this.to_play_ui.getSpriteFrame(\"Prepare_Icon_Boss\")\r\n                bossIcon.parent = levelNode;\r\n                bossIcon.setPosition(cc.v2(-60,0));\r\n                bossIcon.anchorY = 0;\r\n                \r\n                node.parent = this.node.getChildByName(\"bossPos\"+this.bossIndex);\r\n                levelNode.parent = this.node.getChildByName(\"bossPos\"+this.bossIndex);\r\n                levelNode.setPosition(cc.v2(0,0));\r\n                node.setPosition(cc.v2(0,0));\r\n                this.bossIndex++;\r\n                // levelNode.scale = 0.5;\r\n                // node.getComponent(sp.Skeleton).setSkin(MonsterFaceName.SideL + MonsterConfigureManager.getInstance().getSkin(key));\r\n                node.getComponent(sp.Skeleton).setAnimation(0,\"idle\",true);\r\n            }\r\n            // levelNode.setPosition(node.getChildByName(\"hp\").getPosition())\r\n            // levelNode.setPosition(cc.v2(0,0))\r\n            levelNode.anchorY = 0;\r\n            node.scale = MonsterConfigureManager.getInstance().getScale(key);\r\n            levelNode.setPosition(cc.v2\r\n                ((node.getPosition().x + node.getChildByName(\"hp\").getPosition().x)* node.scale,\r\n                (node.getPosition().y + node.getChildByName(\"hp\").getPosition().y)* node.scale));\r\n        });\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["assets\\Scripts\\UI\\UIPool.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\n/**动态对象池*/\r\nexport default class UIPool extends cc.Component {\r\n\r\n    map_node_pools: Map<string,cc.NodePool>=null;\r\n    map_prefabs: Map<string,cc.Prefab>=null;\r\n    preload_path:string[]=[];\r\n    test_pool:cc.NodePool=null;\r\n    /**回调数组 */\r\n    map_callback: Map<string,Array<Function>>=null;\r\n\r\n    protected onLoad(): void {\r\n        this.map_node_pools=new Map<string,cc.NodePool>();\r\n        this.map_prefabs=new Map<string,cc.Prefab>();\r\n        this.map_callback=new Map<string,Array<Function>>();\r\n        this.preload_path=new Array();\r\n        this.test_pool=new cc.NodePool();\r\n    }\r\n\r\n    /**根据id和资源目录 新建一个对象池,返回是否需要加载*/\r\n    protected addNodePool(pathId:string,initCount:number,loadCallback?:Function):boolean{\r\n        //如果已经添加了，那么就不继续添加了\r\n        if(this.map_node_pools.has(pathId)){\r\n            if(loadCallback){\r\n                loadCallback();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if(this.preload_path.includes(pathId)){\r\n            let arr=this.map_callback.get(pathId);\r\n            if(arr){\r\n                arr.push(loadCallback);\r\n            }else{\r\n                arr=new Array();\r\n                arr.push(loadCallback);\r\n            }            \r\n            this.map_callback.set(pathId,arr);\r\n            return false;\r\n        }\r\n\r\n        this.preload_path.push(pathId);\r\n        cc.resources.load(pathId,cc.Prefab,(error: Error, assets:cc.Prefab)=> {\r\n            if(error){\r\n                console.log(error);\r\n                return;\r\n            }\r\n            \r\n            this.map_prefabs.set(pathId,assets);\r\n            let pool=new cc.NodePool();// 创建对象池\r\n            //初始先放置多少个对象到对象池\r\n            for(let i=0; i<initCount; ++i){\r\n                let node:cc.Node = cc.instantiate(assets); // 创建节点\r\n                pool.put(node);// 通过 put 接口放入对象池                \r\n                //this.test_pool.put(node);\r\n            }\r\n            this.map_node_pools.set(pathId,pool); //把对象池放进map对象\r\n            let pNode=pool.get()\r\n            if(loadCallback){\r\n                loadCallback(pNode);\r\n            }\r\n            let arr=this.map_callback.get(pathId);\r\n            if(arr){\r\n                arr.forEach((v,k)=>{\r\n                    v(pNode);\r\n                })\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n    /**根据id获得一个对象节点*/\r\n    protected getNodeById(pathId:string):cc.Node\r\n    {\r\n        let node:cc.Node = null;\r\n        //获得id对应的对象池\r\n        let pool=this.map_node_pools.get(pathId);\r\n        if(pool){\r\n            if (pool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n                node = pool.get();\r\n            } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n                node = cc.instantiate(this.map_prefabs.get(pathId));\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    /**根据id删除一个对象节点*/\r\n    protected destroyNode(pathId:string,node:cc.Node)\r\n    {\r\n        //获得id对应的对象池\r\n        let pool=this.map_node_pools.get(pathId);\r\n        if(pool){\r\n            // 和初始化时的方法一样，将节点放进对象池，这个方法会同时调用节点的 removeFromParent(false)\r\n            pool.put(node);                        \r\n        }\r\n    }\r\n\r\n    protected onDestroy()\r\n    {\r\n        if(this.map_node_pools){\r\n            this.map_node_pools.forEach((v,k)=>{\r\n                v.clear();\r\n            });\r\n            this.map_node_pools=null;\r\n        }\r\n        \r\n        if(this.map_prefabs){\r\n            this.map_prefabs.forEach((v,k)=>{\r\n                cc.log(cc.assetManager.assets.count);\r\n            });\r\n            this.map_prefabs=null;\r\n        }\r\n        if(this.preload_path){\r\n            this.preload_path=null;\r\n        }\r\n    }\r\n\r\n}\r\n"]}